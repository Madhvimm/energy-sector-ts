---
title: "Multivariate TS Models (ARIMAX/SARIMAX/VAR)"
output: distill::distill_article
---


```{r, warning=FALSE, message=FALSE, echo=FALSE}
#| code-fold: true
#| code-summary: 'Importing Libraries'
#| warning: false
#| output: false
library(ggplot2)
library(readr)
library(tidyverse)
library(lubridate)
library(forecast)
library(tseries)
library(plotly)
library(gridExtra)
library(zoo)
library(astsa)
library(ggplot2)
library(zoo)
library(plotly)
library(vars)
```

```{r, warning=FALSE, message=FALSE, echo=FALSE}
#| code-fold: true
#| code-summary: 'Read data'
#| warning: false
#| output: false

composite_crude_oil_prices <- read.csv("data/composite_crude_oil_prices.csv")
citygate_gas_prices <- read.csv("data/citygate_gas_prices.csv")
total_electricity_prices <- read.csv("data/total_electricity_prices.csv")
gdp_data <- read.csv("data/gdp_data.csv")
cpi_data <- read.csv("data/cpi_data.csv")

```



```{r, warning=FALSE, message=FALSE, echo=FALSE}
#| code-fold: true
#| code-summary: 'convert to ts'
#| warning: false
#| output: false


# For Crude Oil
composite_crude_oil_prices$Date <- as.Date(composite_crude_oil_prices$Date)
start_year <- as.numeric(format(min(composite_crude_oil_prices$Date), "%Y"))
start_month <- as.numeric(format(min(composite_crude_oil_prices$Date), "%m"))
composite_crude_oil_ts <- ts(composite_crude_oil_prices$Value, start=c(start_year, start_month), frequency=12)
# Log-transform Value
composite_crude_oil_prices$LOG_Value <- log(composite_crude_oil_prices$Value)
oil_log_ts <- ts(composite_crude_oil_prices$LOG_Value, start=c(start_year, start_month), frequency=12)

# For Natural Gas
citygate_gas_prices$Date <- as.Date(citygate_gas_prices$Date)
start_year_gas <- as.numeric(format(min(citygate_gas_prices$Date), "%Y"))
start_month_gas <- as.numeric(format(min(citygate_gas_prices$Date), "%m"))
citygate_gas_ts <- ts(citygate_gas_prices$Value, start=c(start_year_gas, start_month_gas), frequency=12)
# Log-transform Value
citygate_gas_prices$LOG_Value <- log(citygate_gas_prices$Value)
gas_log_ts <- ts(citygate_gas_prices$LOG_Value, start=c(start_year_gas, start_month_gas), frequency=12)

# For Electricity
total_electricity_prices$Date <- as.Date(total_electricity_prices$Date, format = "%Y-%m-%d")
start_year_elec <- as.numeric(format(min(total_electricity_prices$Date), "%Y"))
start_month_elec <- as.numeric(format(min(total_electricity_prices$Date), "%m"))
total_electricity_ts <- ts(total_electricity_prices$Value, start = c(start_year_elec, start_month_elec), frequency = 12)
# Log-transform Value
total_electricity_prices$LOG_Value <- log(total_electricity_prices$Value)
electricity_log_ts <- ts(total_electricity_prices$LOG_Value, start=c(start_year_elec, start_month_elec), frequency=12)


# For GDP (it's quarterly)
gdp_data$DATE <- as.Date(gdp_data$DATE, format = "%Y-%m-%d")
start_year_gdp <- as.numeric(format(min(gdp_data$DATE), "%Y"))
start_quarter_gdp <- quarter(min(gdp_data$DATE))
# Log-transform GDP
gdp_data$LOG_GDP <- log(gdp_data$GDP)
gdp_log_ts <- ts(gdp_data$LOG_GDP, start=c(start_year_gdp, start_quarter_gdp), frequency=4)


# For CPI (it's monthly)
cpi_data$DATE <- as.Date(cpi_data$DATE, format = "%Y-%m-%d")
start_year_cpi <- as.numeric(format(min(cpi_data$DATE), "%Y"))
start_month_cpi <- as.numeric(format(min(cpi_data$DATE), "%m"))
# Log-transform CPI
cpi_data$LOG_CPI <- log(cpi_data$CPIAUCSL)
cpi_log_ts <- ts(cpi_data$LOG_CPI, start = c(start_year_cpi, start_month_cpi), frequency = 12)

```




# Define the Models


In our quest to uncover the relationships within the energy sector and its economic consequences, we will use a series of statistical models that serve as the foundation for our analysis. This will help us understand both direct impacts and more complex, interdependent relationships within the datasets.

## 1. SARIMAX Models:

1. (SARIMAX) Electricity Prices ~ Crude Oil Prices + Natural Gas Prices
2. (SARIMAX) GDP ~ Crude Oil Prices + Natural Gas Prices
3. (SARIMAX) CPI ~ Crude Oil Prices + Natural Gas Prices



## 2. VAR Models:

1. (VAR) Crude Oil Prices ~ CPI
2. (VAR) Electricity Prices ~ Crude Oil Prices + Natural Gas Prices




# ARIMAX / SARIMAX

We will use ARIMAX and SARIMAX models to investigate the intricate interdependencies within our economic and energy datasets. By selecting response and exogenous variables, we construct models to capture these relationships.


## 1. Variable Selection

::: panel-tabset

## (SARIMAX) Electricity Prices ~ Crude Oil Prices + Natural Gas Prices

```{r, warning=FALSE, message=FALSE, echo=FALSE}
#| code-fold: true
#| code-summary: 'convert to ts'
#| warning: false
#| output: false

# Define the time window
start_date <- as.Date("1990-01-01")
end_date <- as.Date("2023-09-01")

# Subset
crude_oil_window <- window(oil_log_ts, start = decimal_date(start_date), end = decimal_date(end_date))
natural_gas_window <- window(gas_log_ts, start = decimal_date(start_date), end = decimal_date(end_date))
electricity_prices_window <- window(electricity_log_ts, start = decimal_date(start_date), end = decimal_date(end_date))
gdp_window <- window(gdp_log_ts, start = decimal_date(start_date), end = decimal_date(end_date))
cpi_window <- window(cpi_log_ts, start = decimal_date(start_date), end = decimal_date(end_date))
```




```{r, warning=FALSE, message=FALSE, echo=TRUE}
#| code-fold: true
#| code-summary: 'Variable Selection'
#| warning: false
#| output: true

#Combining
elec_oil_ng <- cbind(electricity_prices_window, crude_oil_window, natural_gas_window)
colnames(elec_oil_ng) <- c("Electricity", "CrudeOil", "NaturalGas")

#Plotting the data
autoplot(elec_oil_ng) + 
  theme_bw() +
  labs(title = "Electricity, Crude Oil, and Natural Gas Prices Over Time",
       x = "Year",
       y = "Logged Prices",
       color = "Series") +
  theme(plot.title = element_text(hjust = 0.5, face = "bold"))


```



## (SARIMAX) GDP ~ Crude Oil Prices + Natural Gas Prices


```{r, warning=FALSE, message=FALSE, echo=TRUE}
#| code-fold: true
#| code-summary: 'Variable Selection'
#| warning: false
#| output: true

#Combining
gdp_oil_ng <- cbind(electricity_prices_window, crude_oil_window, natural_gas_window)
colnames(gdp_oil_ng) <- c("GDP", "CrudeOil", "NaturalGas")

#Plotting the data
autoplot(gdp_oil_ng) + 
  theme_bw() +
  labs(title = "GDP, Crude Oil, and Natural Gas Prices Over Time",
       x = "Year",
       y = "Logged Prices",
       color = "Series") +
  theme(plot.title = element_text(hjust = 0.5, face = "bold"))


```




## (SARIMAX) CPI ~ Crude Oil Prices + Natural Gas Prices

```{r, warning=FALSE, message=FALSE, echo=TRUE}
#| code-fold: true
#| code-summary: 'Variable Selection'
#| warning: false
#| output: true

#Combining
cpi_oil_ng <- cbind(cpi_window, crude_oil_window, natural_gas_window)
colnames(cpi_oil_ng) <- c("CPI", "CrudeOil", "NaturalGas")

#Plotting the data
autoplot(cpi_oil_ng) + 
  theme_bw() +
  labs(title = "CPI, Crude Oil, and Natural Gas Prices Over Time",
       x = "Year",
       y = "Logged Prices",
       color = "Series") +
  theme(plot.title = element_text(hjust = 0.5, face = "bold"))


```


:::




## 2. Fit Auto.Arima

In this section, I will first use the auto.arima() method 

::: panel-tabset

## (SARIMAX) Electricity Prices ~ Crude Oil Prices + Natural Gas Prices


```{r, warning=FALSE, message=FALSE, echo=TRUE}
#| code-fold: true
#| code-summary: 'Fit Auto Arima'
#| warning: false
#| output: true

#Exogenous regressors
xreg <- cbind(CrudeOil = elec_oil_ng[,"CrudeOil"], NaturalGas = elec_oil_ng[,"NaturalGas"])

#Fit the ARIMAX model
fit_arimax_ecn <- auto.arima(elec_oil_ng[,"Electricity"], xreg=xreg)

#Summary
summary(fit_arimax_ecn)

```

This gives me a Regression with SARIMA(2,1,1)(0,0,2)[12] errors. The model diagnostics are below.


```{r, warning=FALSE, message=FALSE, echo=TRUE}
#| code-fold: true
#| code-summary: 'Check Residuals'
#| warning: false
#| output: true

#Check residuals
checkresiduals(fit_arimax_ecn)
```

**Residuals Check:**

- The residuals plot shows fluctuations around zero, which is good because it suggests no obvious patterns are left unexplained by the model.


- In the ACF plot of residuals we see some spikes suggesting that there is still some autocorrelation present in the residuals.


- The histogram and Q-Q plot suggest that the residuals are approximately normally distributed.


- Ljung-Box Test: The very low p-value suggests there is still autocorrelation in the residuals



```{r, warning=FALSE, message=FALSE, echo=TRUE}
#| code-fold: true
#| code-summary: 'Residuals Fit - SARIMA'
#| warning: false
#| output: true

model_output_r1 <- capture.output(sarima(residuals(fit_arimax_ecn), 0,1,2,0,1,1,12))
#model_output_r1
cat(model_output_r1[26:38], model_output_r1[length(model_output_r1)], sep = "\n") 


```

**Residuals Fit:**: The model used for the residuals is SARIMA(0,1,2)x(0,1,1)[12], which suggests that the residuals have seasonal patterns


- The coefficients for the moving average terms ma1 and ma2 are significantly different from zero (p-value = 0.0).


- The seasonal moving average term sma1 has a coefficient of -0.9483, indicating strong seasonal effects within the residuals.


- The standardized residuals do not show any apparent trends or seasonality.


- The ACF plot of the residuals shows a very little correlations at lags. This is an indicator of a good model fit.


- The Normal Q-Q Plot of Std Residuals displays points that mostly align suggesting that the residuals are normally distributed.


- The p-values for the Ljung-Box statistic are all below the significance threshold of 0.05, implying that there's still significant autocorrelation and a lack of fit.


I think there might still be some patterns or trends hiding in the residuals.


:::



## 3. Manual Fit

In this section, we will manually fit 

::: panel-tabset

## (SARIMAX) Electricity Prices ~ Crude Oil Prices + Natural Gas Prices


```{r, warning=FALSE, message=FALSE, echo=TRUE}
#| code-fold: true
#| code-summary: 'Manual Fit'
#| warning: false
#| output: true


fit_m_ecn <- lm(Electricity ~ CrudeOil + NaturalGas, data=elec_oil_ng)
summary(fit_m_ecn)
```

The coefficients for both Crude Oil and Natural Gas are statistically significant (esp coefficient for CrudeOil which is 0.30032). 


#### ACF/PACF plot of the residuals.



```{r, warning=FALSE, message=FALSE, echo=TRUE}
#| code-fold: true
#| code-summary: 'ACF-PACF'
#| warning: false
#| output: true

residuals_m_ecn <- ts(residuals(fit_m_ecn), start=start(elec_oil_ng)[1], frequency=12)

#ACF plot
acf_plot <- ggAcf(residuals_m_ecn) +
  ggtitle("ACF Plot for Residulas") + 
  theme_bw() +
  theme(plot.title = element_text(hjust = 0.5, face = "bold"))
  

#PACF plot
pacf_plot <- ggPacf(residuals_m_ecn) +
  ggtitle("PACF Plot for Residulas") +
  theme_bw() +
  theme(plot.title = element_text(hjust = 0.5, face = "bold"))

#Arrange
grid.arrange(acf_plot, pacf_plot, nrow=2)
```

The ACF plot shows significant autocorrelation, suggesting seasonality in the residuals.


#### Differencing - ACF/PACF plot



```{r, warning=FALSE, message=FALSE, echo=TRUE}
#| code-fold: true
#| code-summary: 'ACF-PACF'
#| warning: false
#| output: true


#ACF plot
acf_plot2 <- ggAcf(diff(residuals_m_ecn)) +
  ggtitle("Diff ACF Plot for Residulas") + 
  theme_bw() +
  theme(plot.title = element_text(hjust = 0.5, face = "bold"))
  

#PACF plot
pacf_plot2 <- ggPacf(diff(residuals_m_ecn)) +
  ggtitle("Diff PACF Plot for Residulas") +
  theme_bw() +
  theme(plot.title = element_text(hjust = 0.5, face = "bold"))

#Arrange
grid.arrange(acf_plot2, pacf_plot2, nrow=2)
```


Differencing has addressed some of the seasonality. Now we have the following values: 

p = 1 to 5

q= 1 to 4



#### Manual Parameter


```{r, warning=FALSE, message=FALSE, echo=TRUE}
#| code-fold: true
#| code-summary: 'Manual Function'
#| warning: false
#| output: true

SARIMA.c=function(p1,p2,q1,q2,P1,P2,Q1,Q2,d1,d2,data){
  
  temp=c()
  d=1
  D=1
  s=12
  
  i=1
  temp= data.frame()
  ls=matrix(rep(NA,9*95),nrow=95)
  
  
  for (p in p1:p2)
  {
    for(q in q1:q2)
    {
      for(P in P1:P2)
      {
        for(Q in Q1:Q2)
        {
          for(d in d1:d2)
       
        {
          if(p+d+q+P+D+Q<=10)
          {
            
            model<- Arima(data,order=c(p-1,d,q-1),seasonal=c(P-1,D,Q-1))
            ls[i,]= c(p-1,d,q-1,P-1,D,Q-1,model$aic,model$bic,model$aicc)
            i=i+1

          }
          
        }
      }
    }
    
  }
  
  }
  temp= as.data.frame(ls)
  names(temp)= c("p","d","q","P","D","Q","AIC","BIC","AICc")
  
  temp
  
}


output=SARIMA.c(p1=1,p2=5,q1=1,q2=4,P1=1,P2=2,Q1=1,Q2=2,d1=0,d2=1,data=residuals_m_ecn)

knitr::kable(output)


#Displaying the models with min values
output[which.min(output$AIC),]
output[which.min(output$BIC),]
output[which.min(output$AICc),]
```




The best model is ARIMA(4,0,0)(0,1,1)[12]




#### Manual Model Fitting


```{r, warning=FALSE, message=FALSE, echo=TRUE}
#| code-fold: true
#| code-summary: 'Manual Model Fit'
#| warning: false
#| output: true

set.seed(222)
model_output_m_ecn <- capture.output(sarima(residuals_m_ecn, 4,0,0,0,1,1,12))
#model_output_m_ecn
cat(model_output_m_ecn[37:52], model_output_m_ecn[length(model_output_m_ecn)], sep = "\n") 
```


- The Standardized Residuals plot doesn’t show any apparent trends or seasonality, indicating that the model residuals are randomly distributed around zero


- The ACF of Residuals plot exhibits all bars within the confidence bounds, suggesting that there's no autocorrelation


- The Normal Q-Q Plot of Std Residuals displays points that mostly align suggesting that the residuals are approximately normally distributed.


- The p-values for the Ljung-Box statistic are mostly above the significance threshold of 0.05, implying that there's no significant autocorrelation.


- The significant positive value of ar1 and ar2 are both significant while ar3 and ar4 are not significant (p-values are greater than 0.05), which suggests they might not be useful in the model. The seasonal MA term is significant with a coefficient of -0.9275, indicating a strong seasonal effect.


When comparing the models 

- Manual model -  ARIMA(4,0,0)(0,1,1)[12]
- Auto Arima   -  ARIMA(2,1,1)(0,0,2)[12]


Almost similar Manual model is better in terms of p-value in the Ljung-Box



:::



## 4. Cross-Validation



::: panel-tabset

## (SARIMAX) Electricity Prices ~ Crude Oil Prices + Natural Gas Prices

Manual model -  ARIMA(4,0,0)(0,1,1)[12]
Auto Arima   -  ARIMA(2,1,1)(0,0,2)[12]


```{r, warning=FALSE, message=FALSE, echo=TRUE}
#| code-fold: true
#| code-summary: 'C-V'
#| warning: false
#| output: true

n=length(residuals_m_ecn) # 404
k=72 
 
 #n-k=332; 332/12=27;
 
rmse1 <- matrix(NA, 27,12) 
rmse2 <- matrix(NA,27,12)
rmse3 <- matrix(NA,27,12)
err1 = c()
err2 = c()

st <- tsp(residuals_m_ecn)[1]+(k-1)/12 

for(i in 1:27)
{
  #xtrain <- window(a10, start=st+(i-k+1)/12, end=st+i/12)
  xtrain <- window(residuals_m_ecn, end=st + i-1)
  xtest <- window(residuals_m_ecn, start=st + (i-1) + 1/12, end=st + i)
  
  
  # auto arima
  fit <- Arima(xtrain, order=c(2,1,1), seasonal=list(order=c(0,0,2), period=12),
                include.drift=TRUE, method="CSS") 
  fcast <- forecast(fit, h=12)
  # manual model
  fit2 <- Arima(xtrain, order=c(4,0,0), seasonal=list(order=c(0,1,1), period=12),
                include.drift=TRUE, method="CSS") 
  fcast2 <- forecast(fit2, h=12)
  
  

  rmse1[i,1:length(xtest)]  <- sqrt((fcast$mean-xtest)^2)
  rmse2[i,1:length(xtest)] <- sqrt((fcast2$mean-xtest)^2)
  
  ## This is mean absolute error
  err1 = c(err1, abs(fcast$mean-xtest)) 
  err2 = c(err2, abs(fcast2$mean-xtest))
  
  # This is mean squared error
  err3 = c(err1, (fcast$mean-xtest)^2)
  err4 = c(err2, (fcast2$mean-xtest)^2)

  
}

plot(1:12, colMeans(rmse1,na.rm=TRUE), type="l", col=2, xlab="horizon", ylab="RMSE")
lines(1:12, colMeans(rmse2,na.rm=TRUE), type="l",col=3)

legend("topleft",legend=c("Auto Arima model","Manual Model"),col=2:3,lty=1)


RMSE1 <- sqrt(mean(err3, na.rm = TRUE))
RMSE2 <- sqrt(mean(err4, na.rm = TRUE))

cat('The RMSE of Auto Arima is', RMSE1, '\n')
cat('The RMSE of Manually Selection is', RMSE2, '\n')

```


The Manual model, ARIMA(4,0,0)(0,1,1)[12] has a lower RMSE (0.2340468) compared to the Auto Arima model (0.2591981) for all horizons. Therefore, manual is better.


:::


## 5. Model Fitting

Now we will fit the Manual model -  ARIMA(4,0,0)(0,1,1)[12]

::: panel-tabset

## (SARIMAX) Electricity Prices ~ Crude Oil Prices + Natural Gas Prices


```{r, warning=FALSE, message=FALSE, echo=TRUE}
#| code-fold: true
#| code-summary: 'Model Fit'
#| warning: false
#| output: true


fit_ecng <- Arima(elec_oil_ng[,"Electricity"],order=c(4,0,0),seasonal = c(0,1,1), xreg=xreg)
summary(fit_ecng)
```

$$
0.0313 * {NaturalGas} - 0.0057 * {CrudeOil} - 0.6998 x_t + n_t + 0.8859 n_{t-1} + 0.0909 n_{t-2} + 0.1035 n_{t-3} - 0.0862 n_{t-4} + \epsilon_t
$$



:::


## 6. Forecast



::: panel-tabset

## (SARIMAX) Electricity Prices ~ Crude Oil Prices + Natural Gas Prices


```{r, warning=FALSE, message=FALSE, echo=TRUE}
#| code-fold: true
#| code-summary: 'Forecasting'
#| warning: false
#| output: true


forecast(fit_ecng, h = 3, xreg=xreg) %>%
  autoplot() + xlab("Year")+ theme_bw()

```





:::





# VAR MODEL

1. (VAR) Crude Oil Prices ~ CPI
2. (VAR) Electricity Prices ~ Crude Oil Prices + Natural Gas Prices
  

```{r, warning=FALSE, message=FALSE, echo=FALSE}
#| code-fold: true
#| code-summary: 'Variable'
#| warning: false
#| output: false

#crude_oil_window <- window(oil_log_ts, start = decimal_date(start_date), end = decimal_date(end_date))
#natural_gas_window <- window(gas_log_ts, start = decimal_date(start_date), end = decimal_date(end_date))
#electricity_prices_window <- window(electricity_log_ts, start = decimal_date(start_date), end = decimal_date(end_date))
#gdp_window <- window(gdp_log_ts, start = decimal_date(start_date), end = decimal_date(end_date))
#cpi_window <- window(cpi_log_ts, start = decimal_date(start_date), end = decimal_date(end_date))



#oil_cpi_dd<-data.frame(composite_crude_oil_prices,cpi_data)
#oil_cpi_dd<-oil_cpi_dd[,c(1,2,4,6)]
#colnames(dd)<-c("DATE","GDP","Employment","PIncome")

#knitr::kable(head(dd))
```




## 1. Variable Selection

::: panel-tabset

## (VAR) Crude Oil Prices ~ CPI


```{r, warning=FALSE, message=FALSE, echo=TRUE}
#| code-fold: true
#| code-summary: 'Variable'
#| warning: false
#| output: true

#Combining
oil_cpi <- cbind(crude_oil_window, cpi_window)
colnames(oil_cpi) <- c("CrudeOil", "CPI")

#Plotting the data
autoplot(oil_cpi) + 
  theme_bw() +
  labs(title = "Crude Oil Prices and CPI Over Time",
       x = "Year",
       y = "Logged Prices",
       color = "Series") +
  theme(plot.title = element_text(hjust = 0.5, face = "bold"))




```




:::





## 2. VARselect

::: panel-tabset

## (VAR) Crude Oil Prices ~ CPI


```{r, warning=FALSE, message=FALSE, echo=TRUE}
#| code-fold: true
#| code-summary: 'VAR Select'
#| warning: false
#| output: true
#options(scipen = 999, digits = 3)

VARselect(oil_cpi, lag.max=10, type="both")


```


So we have p = 2, 4 ,7. Now the model is tested for different lags (p=2, p=4, p=7)


```{r, warning=FALSE, message=FALSE, echo=TRUE}
#| code-fold: true
#| code-summary: 'VAR Select'
#| warning: false
#| output: true


summary(vars::VAR(oil_cpi, p=2, type='both'))

```

```{r, warning=FALSE, message=FALSE, echo=TRUE}
#| code-fold: true
#| code-summary: 'VAR Select'
#| warning: false
#| output: true


summary(vars::VAR(oil_cpi, p=4, type='both'))

```


```{r, warning=FALSE, message=FALSE, echo=TRUE}
#| code-fold: true
#| code-summary: 'VAR Select'
#| warning: false
#| output: true


summary(vars::VAR(oil_cpi, p=7, type='both'))

```


All the 3 models with different lags (p =2, 4, and 7) have significant coefficients. But lets go for VAR model with p = 4 

:::




