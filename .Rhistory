lines(1:12, colMeans(mae2,na.rm=TRUE), type="l",col=3)
legend("topleft",legend=c("Manual Model","Auto Arima"),col=2:4,lty=1)
#| code-fold: true
#| code-summary: 'CV'
#| warning: false
#| output: true
x=electricity_log_ts
set.seed(222)
k <- 48 # first training set length (4 seasonal lags - 4*12)
n <- length(x) #407
n-k #359 rest of the observations
#n-k=360; 360/12=30; k=48
mae1 <- matrix(NA, 29,12)
mae2 <- matrix(NA,29,12)
st <- tsp(electricity_log_ts)[1]+(k-1)/12
for(i in 1:29)
{
xtrain <- window(electricity_log_ts, end=st + i-1)
xtest <- window(electricity_log_ts, start=st + (i-1) + 1/12, end=st + i)
# Manual model
fit <- Arima(xtrain, order=c(1,1,0), seasonal=list(order=c(0,1,1), period=12),
method="ML")
fcast <- forecast(fit, h=12)
# Auto Arima
fit2 <- Arima(xtrain, order=c(0,1,1), seasonal=list(order=c(0,1,1), period=12),
method="ML")
fcast2 <- forecast(fit2, h=12)
mae1[i,] <- abs(fcast$mean-xtest)
mae2[i,] <- abs(fcast2$mean-xtest)
}
plot(1:12, colMeans(mae1,na.rm=TRUE), type="l", col=2, xlab="horizon", ylab="MAE")
lines(1:12, colMeans(mae2,na.rm=TRUE), type="l",col=3)
legend("topleft",legend=c("Manual Model","Auto Arima"),col=2:4,lty=1)
#| code-fold: true
#| code-summary: 'CV'
#| warning: false
#| output: true
x=oil_log_ts
set.seed(222)
k <- 72 # first training set length (6 seasonal lags - 6*12)
n <- length(x) #408
n-k #336 rest of the observations
#n-k=336; 336/12=28; k=72
mae1 <- matrix(NA, 28,12)
mae2 <- matrix(NA,28,12)
st <- tsp(oil_log_ts)[1]+(k-1)/12
for(i in 1:28)
{
#xtrain <- window(a10, start=st+(i-k+1)/12, end=st+i/12)
xtrain <- window(oil_log_ts, end=st + i-1)
xtest <- window(oil_log_ts, start=st + (i-1) + 1/12, end=st + i)
# Manual model
fit <- Arima(xtrain, order=c(0,1,2), seasonal=list(order=c(0,1,1), period=12),
method="ML")
fcast <- forecast(fit, h=12)
# Auto Arima
fit2 <- Arima(xtrain, order=c(2,1,0), seasonal=list(order=c(1,0,0), period=12),
method="ML")
fcast2 <- forecast(fit2, h=12)
mae1[i,] <- abs(fcast$mean-xtest)
mae2[i,] <- abs(fcast2$mean-xtest)
}
plot(1:12, colMeans(mae1,na.rm=TRUE), type="l", col=2, xlab="horizon", ylab="MAE")
lines(1:12, colMeans(mae2,na.rm=TRUE), type="l",col=3)
legend("topleft",legend=c("Manual Model","Auto Arima"),col=2:4,lty=1)
#| code-fold: true
#| code-summary: 'CV'
#| warning: false
#| output: true
x=cpi_log_ts
set.seed(222)
k <- 48 # first training set length (6 seasonal lags - 6*12)
n <- length(x) #410
n-k #338 rest of the observations
#n-k=338; 338/12=28; k=72
mae1 <- matrix(NA, 30,12)
mae2 <- matrix(NA,30,12)
st <- tsp(cpi_log_ts)[1]+(k-1)/12
for(i in 1:30)
{
#xtrain <- window(a10, start=st+(i-k+1)/12, end=st+i/12)
xtrain <- window(cpi_log_ts, end=st + i-1)
xtest <- window(cpi_log_ts, start=st + (i-1) + 1/12, end=st + i)
# Manual model
fit <- Arima(xtrain, order=c(0,1,2), seasonal=list(order=c(0,1,1), period=12),
method="ML")
fcast <- forecast(fit, h=12)
# Auto Arima
fit2 <- Arima(xtrain, order=c(2,1,0), seasonal=list(order=c(1,0,0), period=12),
method="ML")
fcast2 <- forecast(fit2, h=12)
mae1[i,] <- abs(fcast$mean-xtest)
mae2[i,] <- abs(fcast2$mean-xtest)
}
plot(1:12, colMeans(mae1,na.rm=TRUE), type="l", col=2, xlab="horizon", ylab="MAE")
lines(1:12, colMeans(mae2,na.rm=TRUE), type="l",col=3)
legend("topleft",legend=c("Manual Model","Auto Arima"),col=2:4,lty=1)
#| code-fold: true
#| code-summary: 'CV'
#| warning: false
#| output: true
x=cpi_log_ts
set.seed(222)
k <- 72 # first training set length (6 seasonal lags - 6*12)
n <- length(x) #410
n-k #338 rest of the observations
#n-k=338; 338/12=28; k=72
mae1 <- matrix(NA, 28,12)
mae2 <- matrix(NA,28,12)
st <- tsp(cpi_log_ts)[1]+(k-1)/12
for(i in 1:28)
{
#xtrain <- window(a10, start=st+(i-k+1)/12, end=st+i/12)
xtrain <- window(cpi_log_ts, end=st + i-1)
xtest <- window(cpi_log_ts, start=st + (i-1) + 1/12, end=st + i)
# Manual model
fit <- Arima(xtrain, order=c(0,1,2), seasonal=list(order=c(0,1,1), period=12),
method="ML")
fcast <- forecast(fit, h=12)
# Auto Arima
fit2 <- Arima(xtrain, order=c(2,1,0), seasonal=list(order=c(1,0,0), period=12),
method="ML")
fcast2 <- forecast(fit2, h=12)
mae1[i,] <- abs(fcast$mean-xtest)
mae2[i,] <- abs(fcast2$mean-xtest)
}
plot(1:12, colMeans(mae1,na.rm=TRUE), type="l", col=2, xlab="horizon", ylab="MAE")
lines(1:12, colMeans(mae2,na.rm=TRUE), type="l",col=3)
legend("topleft",legend=c("Manual Model","Auto Arima"),col=2:4,lty=1)
#| code-fold: true
#| code-summary: 'CV'
#| warning: false
#| output: true
x=cpi_log_ts
set.seed(222)
k <- 72 # first training set length (6 seasonal lags - 6*12)
n <- length(x) #410
#n-k #338 rest of the observations
#n-k=338; 338/12=28; k=72
mae1 <- matrix(NA, 28,12)
mae2 <- matrix(NA,28,12)
st <- tsp(cpi_log_ts)[1]+(k-1)/12
for(i in 1:28)
{
#xtrain <- window(a10, start=st+(i-k+1)/12, end=st+i/12)
xtrain <- window(cpi_log_ts, end=st + i-1)
xtest <- window(cpi_log_ts, start=st + (i-1) + 1/12, end=st + i)
# Manual model
fit <- Arima(xtrain, order=c(0,1,2), seasonal=list(order=c(0,1,1), period=12),
method="ML")
fcast <- forecast(fit, h=12)
# Auto Arima
fit2 <- Arima(xtrain, order=c(2,1,0), seasonal=list(order=c(1,0,0), period=12),
method="ML")
fcast2 <- forecast(fit2, h=12)
mae1[i,] <- abs(fcast$mean-xtest)
mae2[i,] <- abs(fcast2$mean-xtest)
}
plot(1:12, colMeans(mae1,na.rm=TRUE), type="l", col=2, xlab="horizon", ylab="MAE")
lines(1:12, colMeans(mae2,na.rm=TRUE), type="l",col=3)
legend("topleft",legend=c("Manual Model","Auto Arima"),col=2:4,lty=1)
#| code-fold: true
#| code-summary: 'Importing Libraries'
#| warning: false
#| output: false
library(ggplot2)
library(readr)
library(tidyverse)
library(lubridate)
library(forecast)
library(tseries)
library(plotly)
library(gridExtra)
library(zoo)
library(astsa)
library(ggplot2)
library(zoo)
library(plotly)
#| code-fold: true
#| code-summary: 'Read data'
#| warning: false
#| output: false
composite_crude_oil_prices <- read.csv("data/composite_crude_oil_prices.csv")
citygate_gas_prices <- read.csv("data/citygate_gas_prices.csv")
total_electricity_prices <- read.csv("data/total_electricity_prices.csv")
gdp_data <- read.csv("data/gdp_data.csv")
cpi_data <- read.csv("data/cpi_data.csv")
#| code-fold: true
#| code-summary: 'convert to ts'
#| warning: false
#| output: false
# For Crude Oil
composite_crude_oil_prices$Date <- as.Date(composite_crude_oil_prices$Date)
start_year <- as.numeric(format(min(composite_crude_oil_prices$Date), "%Y"))
start_month <- as.numeric(format(min(composite_crude_oil_prices$Date), "%m"))
composite_crude_oil_ts <- ts(composite_crude_oil_prices$Value, start=c(start_year, start_month), frequency=12)
# Log-transform Value
composite_crude_oil_prices$LOG_Value <- log(composite_crude_oil_prices$Value)
oil_log_ts <- ts(composite_crude_oil_prices$LOG_Value, start=c(start_year, start_month), frequency=12)
# For Natural Gas
citygate_gas_prices$Date <- as.Date(citygate_gas_prices$Date)
start_year_gas <- as.numeric(format(min(citygate_gas_prices$Date), "%Y"))
start_month_gas <- as.numeric(format(min(citygate_gas_prices$Date), "%m"))
citygate_gas_ts <- ts(citygate_gas_prices$Value, start=c(start_year_gas, start_month_gas), frequency=12)
# Log-transform Value
citygate_gas_prices$LOG_Value <- log(citygate_gas_prices$Value)
gas_log_ts <- ts(citygate_gas_prices$LOG_Value, start=c(start_year_gas, start_month_gas), frequency=12)
# For Electricity
total_electricity_prices$Date <- as.Date(total_electricity_prices$Date, format = "%Y-%m-%d")
start_year_elec <- as.numeric(format(min(total_electricity_prices$Date), "%Y"))
start_month_elec <- as.numeric(format(min(total_electricity_prices$Date), "%m"))
total_electricity_ts <- ts(total_electricity_prices$Value, start = c(start_year_elec, start_month_elec), frequency = 12)
# Log-transform Value
total_electricity_prices$LOG_Value <- log(total_electricity_prices$Value)
electricity_log_ts <- ts(total_electricity_prices$LOG_Value, start=c(start_year_elec, start_month_elec), frequency=12)
# For GDP (it's quarterly)
gdp_data$DATE <- as.Date(gdp_data$DATE, format = "%Y-%m-%d")
start_year_gdp <- as.numeric(format(min(gdp_data$DATE), "%Y"))
start_quarter_gdp <- quarter(min(gdp_data$DATE))
# Log-transform GDP
gdp_data$LOG_GDP <- log(gdp_data$GDP)
gdp_log_ts <- ts(gdp_data$LOG_GDP, start=c(start_year_gdp, start_quarter_gdp), frequency=4)
# For CPI (it's monthly)
cpi_data$DATE <- as.Date(cpi_data$DATE, format = "%Y-%m-%d")
start_year_cpi <- as.numeric(format(min(cpi_data$DATE), "%Y"))
start_month_cpi <- as.numeric(format(min(cpi_data$DATE), "%m"))
# Log-transform CPI
cpi_data$LOG_CPI <- log(cpi_data$CPIAUCSL)
cpi_log_ts <- ts(cpi_data$LOG_CPI, start = c(start_year_cpi, start_month_cpi), frequency = 12)
# Subset precip
crude_oil_window <- window(oil_log_ts, start = decimal_date(as.Date("1990-01-01")), end = decimal_date(as.Date("2023-12-01")))
natural_gas_window <- window(gas_log_ts, start = decimal_date(as.Date("1990-01-01")), end = decimal_date(as.Date("2023-12-01")))
electricity_prices_window <- window(electricity_log_ts, start = decimal_date(as.Date("1990-01-01")), end = decimal_date(as.Date("2023-12-01")))
# Combining the data into one object
energy_price_data <- cbind(electricity_prices_window, crude_oil_window, natural_gas_window)
colnames(energy_price_data) <- c("Electricity", "CrudeOil", "NaturalGas")
# Plotting the data simultaneously to inspect relationships
autoplot(energy_price_data) + theme_bw() +
theme(plot.background = element_rect(fill = "#D9E3F1", color = NA),
panel.background = element_rect(fill = "#D9E3F1", color = NA))
# Subset precip
crude_oil_window <- window(oil_log_ts, start = decimal_date(as.Date("1990-01-01")), end = decimal_date(as.Date("2023-12-01")))
natural_gas_window <- window(gas_log_ts, start = decimal_date(as.Date("1990-01-01")), end = decimal_date(as.Date("2023-12-01")))
electricity_prices_window <- window(electricity_log_ts, start = decimal_date(as.Date("1990-01-01")), end = decimal_date(as.Date("2023-12-01")))
# Combining the data into one object
energy_price_data <- cbind(electricity_prices_window, crude_oil_window, natural_gas_window)
colnames(energy_price_data) <- c("Electricity", "CrudeOil", "NaturalGas")
# Plotting the data simultaneously to inspect relationships
autoplot(energy_price_data) + theme_bw() +
theme(plot.title = element_text(hjust = 0.5, face = "bold"))
# Subset precip
gdp_window <- window(gdp_log_ts, start = decimal_date(as.Date("1990-01-01")), end = decimal_date(as.Date("2023-12-01")))
# Combining the data into one object
gdp_data <- cbind(gdp_window, crude_oil_window, natural_gas_window)
# Subset precip
crude_oil_window <- window(oil_log_ts, start = decimal_date(as.Date("1990-01-01")), end = decimal_date(as.Date("2023-11-01")))
natural_gas_window <- window(gas_log_ts, start = decimal_date(as.Date("1990-01-01")), end = decimal_date(as.Date("2023-11-01")))
electricity_prices_window <- window(electricity_log_ts, start = decimal_date(as.Date("1990-01-01")), end = decimal_date(as.Date("2023-11-01")))
# Combining the data into one object
energy_price_data <- cbind(electricity_prices_window, crude_oil_window, natural_gas_window)
colnames(energy_price_data) <- c("Electricity", "CrudeOil", "NaturalGas")
# Plotting the data simultaneously to inspect relationships
autoplot(energy_price_data) + theme_bw() +
theme(plot.title = element_text(hjust = 0.5, face = "bold"))
# Subset precip
gdp_window <- window(gdp_log_ts, start = decimal_date(as.Date("1990-01-01")), end = decimal_date(as.Date("2023-11-01")))
# Combining the data into one object
gdp_data <- cbind(gdp_window, crude_oil_window, natural_gas_window)
# Subset precip
gdp_window <- window(gdp_log_ts, start = decimal_date(as.Date("1990-01-01")), end = decimal_date(as.Date("2023-11-01")))
# Combining the data into one object
#gdp_data <- cbind(gdp_window, crude_oil_window, natural_gas_window)
#colnames(gdp_data) <- c("GDP", "CrudeOil", "NaturalGas")
# Plotting the data simultaneously to inspect relationships
#autoplot(gdp_data) + theme_bw() +
#        theme(plot.title = element_text(hjust = 0.5, face = "bold"))
# Subset precip
gdp_window <- window(gdp_log_ts, start = decimal_date(as.Date("1990-01-01")), end = decimal_date(as.Date("2023-09-01")))
# Combining the data into one object
#gdp_data <- cbind(gdp_window, crude_oil_window, natural_gas_window)
#colnames(gdp_data) <- c("GDP", "CrudeOil", "NaturalGas")
# Plotting the data simultaneously to inspect relationships
#autoplot(gdp_data) + theme_bw() +
#        theme(plot.title = element_text(hjust = 0.5, face = "bold"))
xreg <- cbind(temp = energy_price_data[, "CrudeOil"],
precip = energy_price_data[, "NaturalGas"])
(fit1 <- auto.arima(energy_price_data[,"Electricity"],
xreg=xreg))
fit1 <- Arima(energy_price_data[,"Electricity"],order=c(2,1,1),seasonal = c(0,0,2), xreg=xreg)
summary(fit1)
checkresiduals(fit1)
set.seed(1234)
model_output12 <- capture.output(sarima(residuals(fit1), 2,0,3, 2,0,0,12))
set.seed(1234)
model_output12 <- capture.output(sarima(residuals(fit1), 2,1,1, 0,0,2,12))
#| code-fold: true
#| code-summary: 'convert to ts'
#| warning: false
#| output: false
# Subset
crude_oil_window <- window(oil_log_ts, start = decimal_date(as.Date("1990-01-01")), end = decimal_date(as.Date("2023-11-01")))
#| code-fold: true
#| code-summary: 'Importing Libraries'
#| warning: false
#| output: false
library(ggplot2)
library(readr)
library(tidyverse)
library(lubridate)
library(forecast)
library(tseries)
library(plotly)
library(gridExtra)
library(zoo)
library(astsa)
library(ggplot2)
library(zoo)
library(plotly)
#| code-fold: true
#| code-summary: 'Read data'
#| warning: false
#| output: false
composite_crude_oil_prices <- read.csv("data/composite_crude_oil_prices.csv")
citygate_gas_prices <- read.csv("data/citygate_gas_prices.csv")
total_electricity_prices <- read.csv("data/total_electricity_prices.csv")
gdp_data <- read.csv("data/gdp_data.csv")
cpi_data <- read.csv("data/cpi_data.csv")
#| code-fold: true
#| code-summary: 'convert to ts'
#| warning: false
#| output: false
# For Crude Oil
composite_crude_oil_prices$Date <- as.Date(composite_crude_oil_prices$Date)
start_year <- as.numeric(format(min(composite_crude_oil_prices$Date), "%Y"))
start_month <- as.numeric(format(min(composite_crude_oil_prices$Date), "%m"))
composite_crude_oil_ts <- ts(composite_crude_oil_prices$Value, start=c(start_year, start_month), frequency=12)
# Log-transform Value
composite_crude_oil_prices$LOG_Value <- log(composite_crude_oil_prices$Value)
oil_log_ts <- ts(composite_crude_oil_prices$LOG_Value, start=c(start_year, start_month), frequency=12)
# For Natural Gas
citygate_gas_prices$Date <- as.Date(citygate_gas_prices$Date)
start_year_gas <- as.numeric(format(min(citygate_gas_prices$Date), "%Y"))
start_month_gas <- as.numeric(format(min(citygate_gas_prices$Date), "%m"))
citygate_gas_ts <- ts(citygate_gas_prices$Value, start=c(start_year_gas, start_month_gas), frequency=12)
# Log-transform Value
citygate_gas_prices$LOG_Value <- log(citygate_gas_prices$Value)
gas_log_ts <- ts(citygate_gas_prices$LOG_Value, start=c(start_year_gas, start_month_gas), frequency=12)
# For Electricity
total_electricity_prices$Date <- as.Date(total_electricity_prices$Date, format = "%Y-%m-%d")
start_year_elec <- as.numeric(format(min(total_electricity_prices$Date), "%Y"))
start_month_elec <- as.numeric(format(min(total_electricity_prices$Date), "%m"))
total_electricity_ts <- ts(total_electricity_prices$Value, start = c(start_year_elec, start_month_elec), frequency = 12)
# Log-transform Value
total_electricity_prices$LOG_Value <- log(total_electricity_prices$Value)
electricity_log_ts <- ts(total_electricity_prices$LOG_Value, start=c(start_year_elec, start_month_elec), frequency=12)
# For GDP (it's quarterly)
gdp_data$DATE <- as.Date(gdp_data$DATE, format = "%Y-%m-%d")
start_year_gdp <- as.numeric(format(min(gdp_data$DATE), "%Y"))
start_quarter_gdp <- quarter(min(gdp_data$DATE))
# Log-transform GDP
gdp_data$LOG_GDP <- log(gdp_data$GDP)
gdp_log_ts <- ts(gdp_data$LOG_GDP, start=c(start_year_gdp, start_quarter_gdp), frequency=4)
# For CPI (it's monthly)
cpi_data$DATE <- as.Date(cpi_data$DATE, format = "%Y-%m-%d")
start_year_cpi <- as.numeric(format(min(cpi_data$DATE), "%Y"))
start_month_cpi <- as.numeric(format(min(cpi_data$DATE), "%m"))
# Log-transform CPI
cpi_data$LOG_CPI <- log(cpi_data$CPIAUCSL)
cpi_log_ts <- ts(cpi_data$LOG_CPI, start = c(start_year_cpi, start_month_cpi), frequency = 12)
#| code-fold: true
#| code-summary: 'convert to ts'
#| warning: false
#| output: false
# Subset
crude_oil_window <- window(oil_log_ts, start = decimal_date(as.Date("1990-01-01")), end = decimal_date(as.Date("2023-11-01")))
natural_gas_window <- window(gas_log_ts, start = decimal_date(as.Date("1990-01-01")), end = decimal_date(as.Date("2023-11-01")))
electricity_prices_window <- window(electricity_log_ts, start = decimal_date(as.Date("1990-01-01")), end = decimal_date(as.Date("2023-11-01")))
gdp_window <- window(gdp_log_ts, start = decimal_date(as.Date("1990-01-01")), end = decimal_date(as.Date("2023-09-01")))
#| code-fold: true
#| code-summary: 'convert to ts'
#| warning: false
#| output: false
# Subset
crude_oil_window <- window(oil_log_ts, start = decimal_date(as.Date("1990-01-01")), end = decimal_date(as.Date("2023-11-01")))
natural_gas_window <- window(gas_log_ts, start = decimal_date(as.Date("1990-01-01")), end = decimal_date(as.Date("2023-11-01")))
electricity_prices_window <- window(electricity_log_ts, start = decimal_date(as.Date("1990-01-01")), end = decimal_date(as.Date("2023-11-01")))
gdp_window <- window(gdp_log_ts, start = decimal_date(as.Date("1990-01-01")), end = decimal_date(as.Date("2023-09-01")))
cpi_window <- window(cpi_log_ts, start = decimal_date(as.Date("1990-01-01")), end = decimal_date(as.Date("2023-09-01")))
#| code-fold: true
#| code-summary: 'convert to ts'
#| warning: false
#| output: false
# Subset
crude_oil_window <- window(oil_log_ts, start = decimal_date(as.Date("1990-01-01")), end = decimal_date(as.Date("2023-09-01")))
natural_gas_window <- window(gas_log_ts, start = decimal_date(as.Date("1990-01-01")), end = decimal_date(as.Date("2023-09-01")))
electricity_prices_window <- window(electricity_log_ts, start = decimal_date(as.Date("1990-01-01")), end = decimal_date(as.Date("2023-09-01")))
gdp_window <- window(gdp_log_ts, start = decimal_date(as.Date("1990-01-01")), end = decimal_date(as.Date("2023-09-01")))
cpi_window <- window(cpi_log_ts, start = decimal_date(as.Date("1990-01-01")), end = decimal_date(as.Date("2023-09-01")))
#| code-fold: true
#| code-summary: 'Variable Selection'
#| warning: false
#| output: true
#Combining
energy_price_data <- cbind(electricity_prices_window, crude_oil_window, natural_gas_window)
colnames(energy_price_data) <- c("Electricity", "CrudeOil", "NaturalGas")
#Plotting the data
autoplot(energy_price_data) + theme_bw() +
theme(plot.title = element_text(hjust = 0.5, face = "bold"))
#| code-fold: true
#| code-summary: 'Variable Selection'
#| warning: false
#| output: true
#Combining
elec_oil_ng <- cbind(electricity_prices_window, crude_oil_window, natural_gas_window)
colnames(elec_oil_ng) <- c("Electricity", "CrudeOil", "NaturalGas")
#Plotting the data
autoplot(elec_oil_ng) + theme_bw() +
theme(plot.title = element_text(hjust = 0.5, face = "bold"))
#| code-fold: true
#| code-summary: 'Variable Selection'
#| warning: false
#| output: true
#Combining
elec_oil_ng <- cbind(electricity_prices_window, crude_oil_window, natural_gas_window)
colnames(elec_oil_ng) <- c("Electricity", "CrudeOil", "NaturalGas")
#Plotting the data
autoplot(elec_oil_ng) + theme_bw() +
theme(plot.title = element_text(hjust = 0.5, face = "bold"))
gg_energy_price <- ggplot(elec_oil_ng, aes(x = Index)) +
geom_line(aes(y = Electricity, color = "Electricity")) +
geom_line(aes(y = CrudeOil, color = "Crude Oil")) +
geom_line(aes(y = NaturalGas, color = "Natural Gas")) +
scale_color_manual(values = c("Electricity" = "red", "Crude Oil" = "green", "Natural Gas" = "blue")) +
labs(title = "Electricity, Crude Oil, and Natural Gas Prices Over Time",
x = "Year",
y = "Logged Prices",
color = "Series") +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5, face = "bold"))
# Convert to an interactive plotly object
plotly_energy_price <- ggplotly(gg_energy_price)
#| code-fold: true
#| code-summary: 'Variable Selection'
#| warning: false
#| output: true
#Combining
elec_oil_ng <- cbind(electricity_prices_window, crude_oil_window, natural_gas_window)
colnames(elec_oil_ng) <- c("Electricity", "CrudeOil", "NaturalGas")
#Plotting the data
#autoplot(elec_oil_ng) + theme_bw() +
#        theme(plot.title = element_text(hjust = 0.5, face = "bold"))
elec_oil_ng_df <- fortify(elec_oil_ng)
gg_energy_price <- ggplot(elec_oil_ng_df, aes(x = Index)) +
geom_line(aes(y = Electricity, color = "Electricity")) +
geom_line(aes(y = CrudeOil, color = "Crude Oil")) +
geom_line(aes(y = NaturalGas, color = "Natural Gas")) +
scale_color_manual(values = c("Electricity" = "red", "Crude Oil" = "green", "Natural Gas" = "blue")) +
labs(title = "Electricity, Crude Oil, and Natural Gas Prices Over Time",
x = "Year",
y = "Logged Prices",
color = "Series") +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5, face = "bold"))
# Convert to an interactive plotly object
plotly_energy_price <- ggplotly(gg_energy_price)
#| code-fold: true
#| code-summary: 'Variable Selection'
#| warning: false
#| output: true
#Combining
elec_oil_ng <- cbind(electricity_prices_window, crude_oil_window, natural_gas_window)
colnames(elec_oil_ng) <- c("Electricity", "CrudeOil", "NaturalGas")
head(elec_oil_ng)
#Plotting the data
#autoplot(elec_oil_ng) + theme_bw() +
#        theme(plot.title = element_text(hjust = 0.5, face = "bold"))
elec_oil_ng_df <- fortify(elec_oil_ng)
gg_energy_price <- ggplot(elec_oil_ng_df, aes(x = Index)) +
geom_line(aes(y = Electricity, color = "Electricity")) +
geom_line(aes(y = CrudeOil, color = "Crude Oil")) +
geom_line(aes(y = NaturalGas, color = "Natural Gas")) +
scale_color_manual(values = c("Electricity" = "red", "Crude Oil" = "green", "Natural Gas" = "blue")) +
labs(title = "Electricity, Crude Oil, and Natural Gas Prices Over Time",
x = "Year",
y = "Logged Prices",
color = "Series") +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5, face = "bold"))
# Convert to an interactive plotly object
plotly_energy_price <- ggplotly(gg_energy_price)
#| code-fold: true
#| code-summary: 'Variable Selection'
#| warning: false
#| output: true
#Combining
elec_oil_ng <- cbind(electricity_prices_window, crude_oil_window, natural_gas_window)
colnames(elec_oil_ng) <- c("Electricity", "CrudeOil", "NaturalGas")
#Plotting the data
autoplot(elec_oil_ng) + theme_bw() +
theme(plot.title = element_text(hjust = 0.5, face = "bold"))
#| code-fold: true
#| code-summary: 'Variable Selection'
#| warning: false
#| output: true
#Combining
elec_oil_ng <- cbind(electricity_prices_window, crude_oil_window, natural_gas_window)
colnames(elec_oil_ng) <- c("Electricity", "CrudeOil", "NaturalGas")
#Plotting the data
autoplot(elec_oil_ng) +
theme_bw() +
ggtitle("Electricity, Crude Oil, and Natural Gas Prices Over Time") +
theme(plot.title = element_text(hjust = 0.5, face = "bold"))
