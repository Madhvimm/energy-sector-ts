#| code-fold: true
#| code-summary: 'Code'
#| warning: false
#| output: true
exxon.res<-fit_exxon$residuals
plot1 <- ggAcf(exxon.res, 40) +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5, face = "bold"))
plot2<- ggPacf(exxon.res, 40) +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5, face = "bold"))
grid.arrange(plot1, plot2,nrow=2)
#| code-fold: true
#| code-summary: 'Code'
#| warning: false
#| output: true
plot3 <- ggAcf(exxon.res^2, 40) +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5, face = "bold"))
plot4<- ggPacf(exxon.res^2, 40) +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5, face = "bold"))
grid.arrange(plot3, plot4,nrow=2)
#| code-fold: true
#| code-summary: 'Code'
#| warning: false
#| output: true
plot3 <- ggAcf(exxon.res^2, 40) +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5, face = "bold"))
plot4<- ggPacf(exxon.res^2, 40) +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5, face = "bold"))
grid.arrange(plot3, plot4,nrow=2)
#| code-fold: true
#| code-summary: 'Code'
#| warning: false
#| output: true
model <- list() ## set counter
cc <- 1
for (p in 1:7) {
for (q in 1:7) {
model[[cc]] <- garch(exxon.res,order=c(q,p),trace=F)
cc <- cc + 1
}
}
## get AIC values for model evaluation
GARCH_AIC <- sapply(model, AIC) ## model with lowest AIC is the best
which(GARCH_AIC == min(GARCH_AIC))
model[[which(GARCH_AIC == min(GARCH_AIC))]]
summary(garchFit(~garch(1,1), exxon.res,trace = F))
#| code-fold: true
#| code-summary: 'Code'
#| warning: false
#| output: true
model <- list() ## set counter
cc <- 1
for (p in 1:7) {
for (q in 1:7) {
model[[cc]] <- garch(exxon.res,order=c(q,p),trace=F)
cc <- cc + 1
}
}
## get AIC values for model evaluation
GARCH_AIC <- sapply(model, AIC) ## model with lowest AIC is the best
which(GARCH_AIC == min(GARCH_AIC))
model[[which(GARCH_AIC == min(GARCH_AIC))]]
#| code-fold: true
#| code-summary: 'Code'
#| warning: false
#| output: true
model <- list() ## set counter
cc <- 1
for (p in 1:9) {
for (q in 1:9) {
model[[cc]] <- garch(exxon.res,order=c(q,p),trace=F)
cc <- cc + 1
}
}
## get AIC values for model evaluation
GARCH_AIC <- sapply(model, AIC) ## model with lowest AIC is the best
which(GARCH_AIC == min(GARCH_AIC))
model[[which(GARCH_AIC == min(GARCH_AIC))]]
#| code-fold: true
#| code-summary: 'Code'
#| warning: false
#| output: true
# Fit the GARCH(1, 1) model on the residuals
garch_fit_exxon <- garchFit(~garch(1, 1), data = exxon.res, trace = F)
# Summary of the fitted GARCH model
summary(garch_fit_exxon)
#| code-fold: true
#| code-summary: 'Code'
#| warning: false
#| output: true
model <- list()
cc <- 1
for (p in 1:9) {
for (q in 1:9) {
model[[cc]] <- garch(exxon.res,order=c(q,p),trace=F)
cc <- cc + 1
}
}
## get AIC values for model evaluation
GARCH_AIC <- sapply(model, AIC) ## model with lowest AIC is the best
which(GARCH_AIC == min(GARCH_AIC))
model[[which(GARCH_AIC == min(GARCH_AIC))]]
#| code-fold: true
#| code-summary: 'Code'
#| warning: false
#| output: true
model <- list()
cc <- 1
for (p in 1:9) {
for (q in 1:9) {
model[[cc]] <- garch(exxon.res,order=c(q,p),trace=F)
cc <- cc + 1
}
}
## get AIC values for model evaluation
GARCH_AIC <- sapply(model, AIC) ## model with lowest AIC is the best
which(GARCH_AIC == min(GARCH_AIC))
model[[which(GARCH_AIC == min(GARCH_AIC))]]
best_model <- model[[which.min(GARCH_AIC)]]
best_model@fit$arma
#| code-fold: true
#| code-summary: 'Code'
#| warning: false
#| output: true
model <- list()
cc <- 1
for (p in 1:9) {
for (q in 1:9) {
model[[cc]] <- garch(exxon.res,order=c(p,q),trace=F)
cc <- cc + 1
}
}
## get AIC values for model evaluation
GARCH_AIC <- sapply(model, AIC) ## model with lowest AIC is the best
which(GARCH_AIC == min(GARCH_AIC))
model[[which(GARCH_AIC == min(GARCH_AIC))]]
best_model <- model[[which.min(GARCH_AIC)]]
summary(best_model)
#| code-fold: true
#| code-summary: 'Code'
#| warning: false
#| output: true
model <- list()
cc <- 1
for (p in 1:9) {
for (q in 1:9) {
model[[cc]] <- garch(exxon.res,order=c(p,q),trace=F)
cc <- cc + 1
}
}
## get AIC values for model evaluation
GARCH_AIC <- sapply(model, AIC) ## model with lowest AIC is the best
which(GARCH_AIC == min(GARCH_AIC))
model[[which(GARCH_AIC == min(GARCH_AIC))]]
#| code-fold: true
#| code-summary: 'Code'
#| warning: false
#| output: true
model <- list()
cc <- 1
for (p in 1:9) {
for (q in 1:9) {
model[[cc]] <- garch(exxon.res,order=c(p,q),trace=F)
cc <- cc + 1
}
}
## get AIC values for model evaluation
GARCH_AIC <- sapply(model, AIC) ## model with lowest AIC is the best
which(GARCH_AIC == min(GARCH_AIC))
model[[which(GARCH_AIC == min(GARCH_AIC))]]
#| code-fold: true
#| code-summary: 'Code'
#| warning: false
#| output: true
#Fit the GARCH(1,1) model on the residuals
garch_fit_exxon <- garchFit(~garch(1, 1), data = exxon.res, trace = F)
#Summary of the fitted GARCH model
summary(garch_fit_exxon)
summary(garchFit(~garch(1, 2), data = exxon.res, trace = F))
#| code-fold: true
#| code-summary: 'Code'
#| warning: false
#| output: true
model <- list() ## set counter
cc <- 1
for (p in 1:7) {
for (q in 1:7) {
model[[cc]] <- garch(exxon.res,order=c(p,q),trace=F)
cc <- cc + 1
}
}
## get AIC values for model evaluation
GARCH_AIC <- sapply(model, AIC) ## model with lowest AIC is the best
which(GARCH_AIC == min(GARCH_AIC))
#| code-fold: true
#| code-summary: 'Code'
#| warning: false
#| output: true
model <- list() ## set counter
cc <- 1
for (p in 1:7) {
for (q in 1:7) {
model[[cc]] <- garch(exxon.res,order=c(p,q),trace=F)
cc <- cc + 1
}
}
## get AIC values for model evaluation
GARCH_AIC <- sapply(model, AIC) ## model with lowest AIC is the best
which(GARCH_AIC == min(GARCH_AIC))
#| code-fold: true
#| code-summary: 'Code'
#| warning: false
#| output: true
model <- list() ## set counter
cc <- 1
for (p in 1:9) {
for (q in 1:9) {
model[[cc]] <- garch(returns_exxon,order=c(p,q),trace=F)
cc <- cc + 1
}
}
## get AIC values for model evaluation
GARCH_AIC <- sapply(model, AIC) ## model with lowest AIC is the best
which(GARCH_AIC == min(GARCH_AIC))
#| code-fold: true
#| code-summary: 'Code'
#| warning: false
#| output: true
model[[which(GARCH_AIC == min(GARCH_AIC))]]
best_model <- model[[which.min(GARCH_AIC)]]
summary(best_model)
#| code-fold: true
#| code-summary: 'Code'
#| warning: false
#| output: true
garch_fit_returns_exxon <- garchFit(~garch(1,1), data = returns_exxon, trace = F)
summary(garch_fit_returns_exxon)
#| code-fold: true
#| code-summary: 'Code'
#| warning: false
#| output: true
model <- list()
cc <- 1
for (p in 1:9) {
for (q in 1:9) {
suppressWarnings({
model[[cc]] <- garch(exxon.res, order=c(p,q), trace=F)
})
cc <- cc + 1
}
}
## get AIC values for model evaluation
GARCH_AIC <- sapply(model, AIC) ## model with lowest AIC is the best
which(GARCH_AIC == min(GARCH_AIC))
model[[which(GARCH_AIC == min(GARCH_AIC))]]
#| code-fold: true
#| code-summary: 'Code'
#| warning: false
#| output: true
summary(fit_exxon)
#| code-fold: true
#| code-summary: 'Code'
#| warning: false
#| output: true
garch_exxon <- garchFit(~garch(1,1), exxon.res,trace = F)
summary(garch_exxon)
#| code-fold: true
#| code-summary: 'Code'
#| warning: false
#| output: true
checkresiduals(garch(exxon.res, order = c(1,1),trace = F))
#| code-fold: true
#| code-summary: 'Code'
#| warning: false
#| output: true
summary(garch(exxon.res, order = c(1,1),trace = F))
#| code-fold: true
#| code-summary: 'Code'
#| warning: false
#| output: true
checkresiduals(garch(exxon.res, order = c(1,1),trace = F))
#| code-fold: true
#| code-summary: 'Code'
#| warning: false
#| output: true
garch_returns_exxon1 <- garch(returns_exxon, order = c(1,1), trace = F)
summary(garch_returns_exxon1)
checkresiduals(garch_returns_exxon1)
#| code-fold: true
#| code-summary: 'Code'
#| warning: false
#| output: true
k <- 700 # minimum data length for fitting a model 3324*.2 (20%)
n <- length(returns_exxon)
n-k
#| code-fold: true
#| code-summary: 'Code'
#| warning: false
#| output: true
k <- 900
n <- length(returns_exxon)
n
n-k
#| code-fold: true
#| code-summary: 'Code'
#| warning: false
#| output: true
k <- 900
n <- length(returns_exxon)
n-k
#| code-fold: true
#| code-summary: 'Code'
#| warning: false
#| output: true
k <- 900
n <- length(returns_exxon)
err1 <- c()
err2 <- c()
for(i in 1:(n-k)) {
xtrain <- returns_exxon[1:(k-1)+i]
xtest <- returns_exxon[k+i]
# ARIMA(1,0,1) + GARCH(1,1)
arima.fit <- Arima(xtrain, order = c(1, 0, 1), include.drift = TRUE)
arima.res <- residuals(arima.fit)
fit1 <- garchFit(~garch(1, 1), data = arima.res, trace = FALSE)
fcast1 <- predict(fit1, n.ahead = 1)
# GARCH(1,1)
returns_diff <- diff(xtrain)
fit2 <- garchFit(~garch(1, 1), data = returns_diff, trace = FALSE)
fcast2 <- predict(fit2, n.ahead = 1)
err1 <- c(err1, (fcast1$meanForecast - xtest)^2)
err2 <- c(err2, (fcast2$meanForecast - xtest)^2)
}
RMSE1 <- sqrt(mean(err1))
RMSE2 <- sqrt(mean(err2))
RMSE1
RMSE2
#| code-fold: true
#| code-summary: 'Code'
#| warning: false
#| output: true
k <- 900
n <- length(returns_exxon)
err1 <- c()
err2 <- c()
for(i in 1:(n-k)) {
xtrain <- returns_exxon[1:(k-1)+i]
xtest <- returns_exxon[k+i]
# ARIMA(1,0,1) + GARCH(1,1)
arima.fit <- Arima(xtrain, order = c(1, 0, 1), include.drift = TRUE)
arima.res <- residuals(arima.fit)
fit1 <- garchFit(~garch(1, 1), data = arima.res, trace = FALSE)
fcast1 <- predict(fit1, n.ahead = 1)
# GARCH(1,1)
returns_diff <- diff(xtrain)
fit2 <- garchFit(~garch(1, 1), data = xtrain, trace = FALSE)
fcast2 <- predict(fit2, n.ahead = 1)
err1 <- c(err1, (fcast1$meanForecast - xtest)^2)
err2 <- c(err2, (fcast2$meanForecast - xtest)^2)
}
RMSE1 <- sqrt(mean(err1))
RMSE2 <- sqrt(mean(err2))
#| code-fold: true
#| code-summary: 'Code'
#| warning: false
#| output: true
cat("The RMSE for model 1 -", RMSE1, "\n")
cat("The RMSE for model 2 -", RMSE2, "\n")
#| code-fold: true
#| code-summary: 'Code'
#| warning: false
#| output: true
cat("The RMSE for model 1 -", RMSE1, "\n")
cat("The RMSE for model 2 -", RMSE2, "\n")
#| code-fold: true
#| code-summary: 'Code'
#| warning: false
#| output: true
#Fit the ARIMA model
arima_exxon_final <- Arima(returns_exxon, order = c(1, 0, 1))
#Extract the residuals
residuals_exxon_final <- residuals(arima_exxon_final)
# Fit the GARCH model on the residuals
garch_exxon_final <- garchFit(~garch(1,1), data = residuals_exxon_final, trace = FALSE)
summary(garch_exxon_final)
garch_exxon_f <- garchFit(~garch(1,1), returns_exxon,trace = F)
summary(garch_exxon_f)
#| code-fold: true
#| code-summary: 'Code'
#| warning: false
#| output: true
predict(garch_exxon_final, n.ahead = 100, plot=TRUE)
#| code-fold: true
#| code-summary: 'Code'
#| warning: false
#| output: true
ht <- garch_exxon_final@h.t
pfe=data.frame(pfe)
#| code-fold: true
#| code-summary: 'Code'
#| warning: false
#| output: true
garch_forecast <- predict(garch_exxon_final, n.ahead = 100, plot = TRUE)
# Plot the forecasted volatility
plot(garch_forecast, main = "Forecasted Volatility")
arima_forecast <- forecast(arima_exxon_final, h = 10)
garch_forecast <- ugarchforecast(garch_exxon_final, n.ahead = 10)
# Load necessary libraries
library(forecast)
library(rugarch)
library(fGarch)
# Fit the ARIMA model
arima_exxon_final <- Arima(returns_exxon, order = c(1, 0, 1))
# Extract the residuals
residuals_exxon_final <- residuals(arima_exxon_final)
# Define GARCH model specification
spec <- ugarchspec(variance.model = list(garchOrder = c(1, 1)),
mean.model = list(armaOrder = c(0, 0), include.mean = FALSE),
distribution.model = "norm")
# Fit the GARCH model on the residuals
garch_exxon_final <- ugarchfit(spec, data = residuals_exxon_final)
# Forecast the ARIMA model
n_forecast <- 10  # Number of periods to forecast
arima_forecast <- forecast(arima_exxon_final, h = n_forecast)
# Forecast the GARCH model
garch_forecast <- ugarchforecast(garch_exxon_final, n.ahead = n_forecast)
# Extract forecasted mean and volatility
forecasted_returns <- arima_forecast$mean
forecasted_volatility <- sqrt(garch_forecast@forecast$sigmaFor)
# Plot the results
par(mfrow=c(2,1))
plot(forecasted_returns, main="Forecasted Returns", xlab="Days", ylab="Returns", type='l')
plot(forecasted_volatility, main="Forecasted Volatility", xlab="Days", ylab="Volatility", type='l')
#| code-fold: true
#| code-summary: 'Code'
#| warning: false
#| output: true
garch_forecast <- predict(garch_exxon_final, n.ahead = 100, plot = TRUE)
#| code-fold: true
#| code-summary: 'Code'
#| warning: false
#| output: true
garch_forecast <- predict(garch_exxon_final, n.ahead = 100, plot = TRUE)
#| code-fold: true
#| code-summary: 'Code'
#| warning: false
#| output: true
#Fit the ARIMA model
arima_exxon_final <- Arima(returns_exxon, order = c(1, 0, 1))
#Extract the residuals
residuals_exxon_final <- residuals(arima_exxon_final)
# Fit the GARCH model on the residuals
garch_exxon_final <- garchFit(~garch(1,1), data = residuals_exxon_final, trace = FALSE)
summary(garch_exxon_final)
#| code-fold: true
#| code-summary: 'Code'
#| warning: false
#| output: true
garch_forecast <- predict(garch_exxon_final, n.ahead = 100, plot = TRUE)
garch_forecast
#| code-fold: true
#| code-summary: 'Code'
#| warning: false
#| output: true
predict(garch_exxon_final, n.ahead = 100, plot = TRUE)
#| code-fold: true
#| code-summary: 'Code'
#| warning: false
#| output: true
ht <- garch_exxon_final@h.t
exxon_stockprice_df = data.frame(Exxon_stockprice)
exxon_stockprice_df <- head(exxon_stockprice_df, -1)
exxon_stockprice_df <- data.frame(exxon_stockprice_df,rownames(exxon_stockprice_df))
colnames(exxon_stockprice_df)[7] = "date"
exxon_stockprice_df$date<-as.Date(exxon_stockprice_df$date,"%Y-%m-%d")
data_spot = data.frame(ht,exxon_stockprice_df$date)
ggplot(data_spot, aes(y = ht, x = exxon_stockprice_df.date)) + geom_line() + ylab('Conditional Variance') + xlab('Date')+ggtitle("Volatality plot for Pfizer") + theme_bw()
#| code-fold: true
#| code-summary: 'Code'
#| warning: false
#| output: true
ht <- garch_exxon_final@h.t
exxon_stockprice_df = data.frame(Exxon_stockprice)
exxon_stockprice_df <- head(exxon_stockprice_df, -1)
exxon_stockprice_df <- data.frame(exxon_stockprice_df,rownames(exxon_stockprice_df))
colnames(exxon_stockprice_df)[7] = "date"
exxon_stockprice_df$date<-as.Date(exxon_stockprice_df$date,"%Y-%m-%d")
data_spot = data.frame(ht,exxon_stockprice_df$date)
ggplot(data_spot, aes(y = ht, x = exxon_stockprice_df.date)) + geom_line() + ylab('Conditional Variance') + xlab('Date')
theme_minimal() +
ggtitle("Volatility plot for Exxon Mobil Stock Price") +
theme(plot.title = element_text(hjust = 0.5, face = "bold"))
#| code-fold: true
#| code-summary: 'Code'
#| warning: false
#| output: true
ht <- garch_exxon_final@h.t
exxon_stockprice_df = data.frame(Exxon_stockprice)
exxon_stockprice_df <- head(exxon_stockprice_df, -1)
exxon_stockprice_df <- data.frame(exxon_stockprice_df,rownames(exxon_stockprice_df))
colnames(exxon_stockprice_df)[7] = "date"
exxon_stockprice_df$date<-as.Date(exxon_stockprice_df$date,"%Y-%m-%d")
data_spot = data.frame(ht,exxon_stockprice_df$date)
ggplot(data_spot, aes(y = ht, x = exxon_stockprice_df.date)) + geom_line() + ylab('Conditional Variance') + xlab('Date') +
theme_minimal() +
ggtitle("Volatility plot for Exxon Mobil Stock Price") +
theme(plot.title = element_text(hjust = 0.5, face = "bold"))
