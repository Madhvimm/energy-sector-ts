#| code-summary: 'Importing Libraries'
#| warning: false
#| output: false
#|
library(reticulate)
use_python("/Users/madhvimalhotra/myenv/bin/python", required = TRUE)
#| code-fold: true
#| code-summary: 'Importing Libraries'
#| warning: false
#| output: false
#|
library(reticulate)
use_python("/Users/madhvimalhotra/myenv/bin/python3", required = TRUE)
#| code-fold: true
#| code-summary: 'Importing Libraries'
#| warning: false
#| output: false
#|
library(reticulate)
use_python("/Users/madhvimalhotra/myenv/bin/python3", required = TRUE)
#| code-fold: true
#| code-summary: 'Importing Libraries'
#| warning: false
#| output: false
library(ggplot2)
library(readr)
library(tidyverse)
library(lubridate)
library(forecast)
library(tseries)
library(plotly)
library(gridExtra)
library(zoo)
library(astsa)
library(ggplot2)
library(zoo)
library(plotly)
library(vars)
library(dplyr)
library(quantmod)
library(FinTS)
library(gogarch)
library(scales)
library(reticulate)
#| code-fold: true
#| code-summary: 'Importing Libraries'
#| warning: false
#| output: false
#|
library(reticulate)
use_python("/Users/madhvimalhotra/myenv/bin/python3", required = TRUE)
reticulate::repl_python()
#| code-fold: true
#| code-summary: 'Importing Libraries'
#| warning: false
#| output: false
library(ggplot2)
library(readr)
library(tidyverse)
library(lubridate)
library(forecast)
library(tseries)
library(plotly)
library(gridExtra)
library(zoo)
library(astsa)
library(ggplot2)
library(zoo)
library(plotly)
library(vars)
library(dplyr)
library(quantmod)
library(FinTS)
library(gogarch)
library(scales)
library(reticulate)
install.packages("reticulate")
install.packages("reticulate")
#| code-fold: true
#| code-summary: 'Importing Libraries'
#| warning: false
#| output: false
library(reticulate)
use_python("/Users/madhvimalhotra/myenv/bin/python3", required = TRUE)
#| code-fold: true
#| code-summary: 'Importing Libraries'
#| warning: false
#| output: false
library(reticulate)
use_python("/Users/madhvimalhotra/myenv/bin/python", required = TRUE)
#| code-fold: true
#| code-summary: 'Importing Libraries'
#| warning: false
#| output: false
library(reticulate)
use_python("/Users/madhvimalhotra/myenv/bin/python", required = TRUE)
#| code-fold: true
#| code-summary: 'Importing Libraries'
#| warning: false
#| output: false
library(ggplot2)
library(readr)
library(tidyverse)
library(lubridate)
library(forecast)
library(tseries)
library(plotly)
library(gridExtra)
library(zoo)
library(astsa)
library(ggplot2)
library(zoo)
library(plotly)
library(vars)
library(dplyr)
library(quantmod)
library(FinTS)
library(gogarch)
library(scales)
library(reticulate)
reticulate::repl_python()
#| code-fold: true
#| code-summary: 'Read data'
#| warning: false
#| output: false
composite_crude_oil_prices <- read.csv("data/composite_crude_oil_prices.csv")
citygate_gas_prices <- read.csv("data/citygate_gas_prices.csv")
total_electricity_prices <- read.csv("data/total_electricity_prices.csv")
gdp_data <- read.csv("data/gdp_data.csv")
cpi_data <- read.csv("data/cpi_data.csv")
#| code-fold: true
#| code-summary: 'convert to ts'
#| warning: false
#| output: false
# For Crude Oil
composite_crude_oil_prices$Date <- as.Date(composite_crude_oil_prices$Date)
start_year <- as.numeric(format(min(composite_crude_oil_prices$Date), "%Y"))
start_month <- as.numeric(format(min(composite_crude_oil_prices$Date), "%m"))
composite_crude_oil_ts <- ts(composite_crude_oil_prices$Value, start=c(start_year, start_month), frequency=12)
# Log-transform Value
composite_crude_oil_prices$LOG_Value <- log(composite_crude_oil_prices$Value)
oil_log_ts <- ts(composite_crude_oil_prices$LOG_Value, start=c(start_year, start_month), frequency=12)
# For Natural Gas
citygate_gas_prices$Date <- as.Date(citygate_gas_prices$Date)
start_year_gas <- as.numeric(format(min(citygate_gas_prices$Date), "%Y"))
start_month_gas <- as.numeric(format(min(citygate_gas_prices$Date), "%m"))
citygate_gas_ts <- ts(citygate_gas_prices$Value, start=c(start_year_gas, start_month_gas), frequency=12)
# Log-transform Value
citygate_gas_prices$LOG_Value <- log(citygate_gas_prices$Value)
gas_log_ts <- ts(citygate_gas_prices$LOG_Value, start=c(start_year_gas, start_month_gas), frequency=12)
# For Electricity
total_electricity_prices$Date <- as.Date(total_electricity_prices$Date, format = "%Y-%m-%d")
start_year_elec <- as.numeric(format(min(total_electricity_prices$Date), "%Y"))
start_month_elec <- as.numeric(format(min(total_electricity_prices$Date), "%m"))
total_electricity_ts <- ts(total_electricity_prices$Value, start = c(start_year_elec, start_month_elec), frequency = 12)
# Log-transform Value
total_electricity_prices$LOG_Value <- log(total_electricity_prices$Value)
electricity_log_ts <- ts(total_electricity_prices$LOG_Value, start=c(start_year_elec, start_month_elec), frequency=12)
# For GDP (it's quarterly)
gdp_data$DATE <- as.Date(gdp_data$DATE, format = "%Y-%m-%d")
start_year_gdp <- as.numeric(format(min(gdp_data$DATE), "%Y"))
start_quarter_gdp <- quarter(min(gdp_data$DATE))
# Log-transform GDP
gdp_data$LOG_GDP <- log(gdp_data$GDP)
gdp_log_ts <- ts(gdp_data$LOG_GDP, start=c(start_year_gdp, start_quarter_gdp), frequency=4)
# For CPI (it's monthly)
cpi_data$DATE <- as.Date(cpi_data$DATE, format = "%Y-%m-%d")
start_year_cpi <- as.numeric(format(min(cpi_data$DATE), "%Y"))
start_month_cpi <- as.numeric(format(min(cpi_data$DATE), "%m"))
# Log-transform CPI
cpi_data$LOG_CPI <- log(cpi_data$CPIAUCSL)
cpi_log_ts <- ts(cpi_data$LOG_CPI, start = c(start_year_cpi, start_month_cpi), frequency = 12)
#| code-fold: true
#| code-summary: 'Code'
#| warning: false
#| output: false
oil_plot <- ggplot(composite_crude_oil_prices, aes(x = Date, y = Value)) +
geom_line(color = "#99494d") +
theme_minimal() +
labs(title = "Crude Oil Prices Over Time", x = "Date", y = "Crude Oil Prices")+
theme(plot.title = element_text(hjust = 0.5))
ggplotly(oil_plot)
#| code-fold: true
#| code-summary: 'Plot Natural Gas Prices'
#| warning: false
#| output: true
#Plotting
ng_plot <- ggplot(citygate_gas_prices, aes(x = Date, y = Value)) +
geom_line(color = "#99494d") +
theme_minimal() +
labs(title = "Natural Gas Price Over Time",
x = "Date",
y = "Price (USD)") +
theme(plot.title = element_text(hjust = 0.5))
ggplotly(ng_plot)
#| code-fold: true
#| code-summary: 'Plot Electricity Prices'
#| warning: false
#| output: true
#Plotting with ggplot2
electricity_plot <- ggplot(total_electricity_prices, aes(x = Date, y = Value)) +
geom_line(color = "#99494d") +
theme_minimal() +
labs(title = "Average Price of Electricity to Ultimate Customers",
x = "Date",
y = "Price (Cents per Kilowatthour)") +
theme(plot.title = element_text(hjust = 0.5))
ggplotly(electricity_plot)
#| code-fold: true
#| code-summary: 'Plot GDP'
#| warning: false
#| output: true
#Plotting with ggplot2
gdp_plot <- ggplot(gdp_data, aes(x = DATE, y = GDP)) +
geom_line(color = "#99494d") +
theme_minimal() +
labs(title = "Gross Domestic Product Over Time",
x = "Date",
y = "GDP (Billion USD)") +
theme(plot.title = element_text(hjust = 0.5))
ggplotly(gdp_plot)
#| code-fold: true
#| code-summary: 'Plot CPI'
#| warning: false
#| output: true
#Plotting with ggplot2
cpi_plot <- ggplot(cpi_data, aes(x = DATE, y = CPIAUCSL)) +
geom_line(color = "#99494d") +
theme_minimal() +
labs(title = "Consumer Price Index Over Time",
x = "Date",
y = "CPI") +
theme(plot.title = element_text(hjust = 0.5))
ggplotly(cpi_plot)
#| code-fold: true
#| code-summary: 'Code'
#| warning: false
#| output: true
#Normalize the crude oil data
oil_normalized <- scale(composite_crude_oil_prices$Value)
#Split data into training and testing
split_index <- floor(0.8 * length(oil_normalized))
oil_train <- oil_normalized[1:split_index]
oil_test <- oil_normalized[(split_index + 1):length(oil_normalized)]
# Print the shapes
cat("Shape of the Crude Oil Data:", length(oil_normalized), "\n")
cat("Shape of the Crude Oil Train Data:", length(oil_train), "\n")
cat("Shape of the Crude Oil Test Data:", length(oil_test), "\n")
#Plot the training and testing sets
train_dates <- composite_crude_oil_prices$Date[1:split_index]
test_dates <- composite_crude_oil_prices$Date[(split_index + 1):length(oil_normalized)]
oil_data <- data.frame(
Date = c(train_dates, test_dates),
Value = c(oil_train, oil_test),
Set = c(rep("Training", length(oil_train)), rep("Testing", length(oil_test)))
)
oil_plot1 <- ggplot(oil_data, aes(x = Date, y = Value, fill = Set)) +
geom_area(position = "stack") +
theme_minimal() +
labs(title = "Crude Oil Training and Testing Sets",
x = "Date",
y = "Normalized Crude Oil Prices") +
theme(plot.title = element_text(hjust = 0.5))
ggplotly(oil_plot1)
#| code-fold: true
#| code-summary: 'Code'
#| warning: false
#| output: true
# Normalize the natural gas data
gas_normalized <- scale(citygate_gas_prices$Value)
# Split data into training and testing
split_index <- floor(0.8 * length(gas_normalized))
gas_train <- gas_normalized[1:split_index]
gas_test <- gas_normalized[(split_index + 1):length(gas_normalized)]
# Print the shapes
cat("Shape of the Natural Gas Data:", length(gas_normalized), "\n")
cat("Shape of the Natural Gas Train Data:", length(gas_train), "\n")
cat("Shape of the Natural Gas Test Data:", length(gas_test), "\n")
# Plot the training and testing sets
train_dates_gas <- citygate_gas_prices$Date[1:split_index]
test_dates_gas <- citygate_gas_prices$Date[(split_index + 1):length(gas_normalized)]
# Create a data frame for plotting
gas_data <- data.frame(
Date = c(train_dates_gas, test_dates_gas),
Value = c(gas_train, gas_test),
Set = c(rep("Training", length(gas_train)), rep("Testing", length(gas_test)))
)
# Create the stacked area plot using ggplot2
gas_plot <- ggplot(gas_data, aes(x = Date, y = Value, fill = Set)) +
geom_area(position = "stack") +
theme_minimal() +
labs(title = "Natural Gas Training and Testing Sets",
x = "Date",
y = "Normalized Natural Gas Prices") +
theme(plot.title = element_text(hjust = 0.5))
# Convert the plot to an interactive plotly plot
ggplotly(gas_plot)
#| code-fold: true
#| code-summary: 'Code'
#| warning: false
#| output: true
#Normalize the electricity data
electricity_normalized <- scale(total_electricity_prices$Value)
#Split data into training and testing
split_index <- floor(0.8 * length(electricity_normalized))
electricity_train <- electricity_normalized[1:split_index]
electricity_test <- electricity_normalized[(split_index + 1):length(electricity_normalized)]
# Print the shapes
cat("Shape of the Electricity Prices Data:", length(electricity_normalized), "\n")
cat("Shape of the Electricity Prices Train Data:", length(electricity_train), "\n")
cat("Shape of the Electricity Prices Test Data:", length(electricity_test), "\n")
# Plot the training and testing sets
train_dates_elec <- total_electricity_prices$Date[1:split_index]
test_dates_elec <- total_electricity_prices$Date[(split_index + 1):length(electricity_normalized)]
# Create a data frame for plotting
elec_data <- data.frame(
Date = c(train_dates_elec, test_dates_elec),
Value = c(electricity_train, electricity_test),
Set = c(rep("Training", length(electricity_train)), rep("Testing", length(electricity_test)))
)
# Create the stacked area plot using ggplot2
elec_plot <- ggplot(elec_data, aes(x = Date, y = Value, fill = Set)) +
geom_area(position = "stack") +
theme_minimal() +
labs(title = "Electricity Training and Testing Sets",
x = "Date",
y = "Normalized Electricity Prices") +
theme(plot.title = element_text(hjust = 0.5))
# Convert the plot to an interactive plotly plot
ggplotly(elec_plot)
#| code-fold: true
#| code-summary: 'Code'
#| warning: false
#| output: true
# Normalize the GDP data
gdp_normalized <- scale(gdp_data$GDP)
# Split data into training and testing
split_index <- floor(0.8 * length(gdp_normalized))
gdp_train <- gdp_normalized[1:split_index]
gdp_test <- gdp_normalized[(split_index + 1):length(gdp_normalized)]
# Print the shapes
cat("Shape of the GDP Data:", length(gdp_normalized), "\n")
cat("Shape of the GDP Train Data:", length(gdp_train), "\n")
cat("Shape of the GDP Test Data:", length(gdp_test), "\n")
# Plot the training and testing sets
train_dates_gdp <- gdp_data$DATE[1:split_index]
test_dates_gdp <- gdp_data$DATE[(split_index + 1):length(gdp_normalized)]
# Create a data frame for plotting
gdp_data_plot <- data.frame(
Date = c(train_dates_gdp, test_dates_gdp),
Value = c(gdp_train, gdp_test),
Set = c(rep("Training", length(gdp_train)), rep("Testing", length(gdp_test)))
)
# Create the stacked area plot using ggplot2
gdp_plot1 <- ggplot(gdp_data_plot, aes(x = Date, y = Value, fill = Set)) +
geom_area(position = "stack") +
theme_minimal() +
labs(title = "GDP Training and Testing Sets",
x = "Date",
y = "Normalized GDP") +
theme(plot.title = element_text(hjust = 0.5))
# Convert the plot to an interactive plotly plot
ggplotly(gdp_plot1)
#| code-fold: true
#| code-summary: 'Code'
#| warning: false
#| output: true
# Normalize the CPI data
cpi_normalized <- scale(cpi_data$CPIAUCSL)
# Split data into training and testing
split_index <- floor(0.8 * length(cpi_normalized))
cpi_train <- cpi_normalized[1:split_index]
cpi_test <- cpi_normalized[(split_index + 1):length(cpi_normalized)]
# Print the shapes
cat("Shape of the CPI Data:", length(cpi_normalized), "\n")
cat("Shape of the CPI Train Data:", length(cpi_train), "\n")
cat("Shape of the CPI Test Data:", length(cpi_test), "\n")
# Plot the training and testing sets
train_dates_cpi <- cpi_data$DATE[1:split_index]
test_dates_cpi <- cpi_data$DATE[(split_index + 1):length(cpi_normalized)]
# Create a data frame for plotting
cpi_data_plot <- data.frame(
Date = c(train_dates_cpi, test_dates_cpi),
Value = c(cpi_train, cpi_test),
Set = c(rep("Training", length(cpi_train)), rep("Testing", length(cpi_test)))
)
# Create the stacked area plot using ggplot2
cpi_plot1 <- ggplot(cpi_data_plot, aes(x = Date, y = Value, fill = Set)) +
geom_area(position = "stack") +
theme_minimal() +
labs(title = "CPI Training and Testing Sets",
x = "Date",
y = "Normalized CPI") +
theme(plot.title = element_text(hjust = 0.5))
# Convert the plot to an interactive plotly plot
ggplotly(cpi_plot1)
#| code-fold: true
#| code-summary: 'Code'
#| warning: false
#| output: true
# Function to create mini-batches
form_arrays <- function(x, lookback = 3, delay = 1, step = 1, feature_columns = 1, target_columns = 1, unique = FALSE, verbose = FALSE) {
count <- 0
x_out <- list()
y_out <- list()
i_start <- 1
while (i_start + lookback + delay <= nrow(x)) {
i_stop <- i_start + lookback - 1
i_pred <- i_stop + delay
indices_to_keep <- seq(i_stop, i_start, -step)
xtmp <- x[indices_to_keep, feature_columns, drop = FALSE]
ytmp <- x[i_pred, target_columns, drop = FALSE]
x_out <- append(x_out, list(xtmp))
y_out <- append(y_out, list(ytmp))
if (verbose && count < 2) {
plot(seq_len(nrow(x)), x[, feature_columns], type = "b", col = "blue", xlab = "Index", ylab = "Value")
points(indices_to_keep, xtmp, col = "green", pch = 19)
points(i_pred, ytmp, col = "red", pch = 19)
}
#Update start point
if (unique) {
i_start <- i_start + lookback
} else {
i_start <- i_start + 1
}
count <- count + 1
}
return(list(x = array(unlist(x_out), dim = c(length(x_out), lookback, length(feature_columns))),
y = array(unlist(y_out), dim = c(length(y_out), length(target_columns)))))
}
lookback <- 5
oil_train <- as.matrix(oil_train)
oil_test <- as.matrix(oil_test)
oil_train_batches <- form_arrays(oil_train, lookback = lookback, delay = 1, step = 1, feature_columns = 1, target_columns = 1)
oil_test_batches <- form_arrays(oil_test, lookback = lookback, delay = 1, step = 1, feature_columns = 1, target_columns = 1)
train_shape <- dim(oil_train_batches$x)
test_shape <- dim(oil_test_batches$x)
cat(sprintf("Train shape: (%d, %d, %d) , (%d, %d)\n",
train_shape[1], train_shape[2], train_shape[3], dim(oil_train_batches$y)[1], dim(oil_train_batches$y)[2]))
cat(sprintf("Test shape: (%d, %d, %d) , (%d, %d)\n",
test_shape[1], test_shape[2], test_shape[3], dim(oil_test_batches$y)[1], dim(oil_test_batches$y)[2]))
#| code-fold: true
#| code-summary: 'Code'
#| warning: false
#| output: true
np <- import("numpy")
# Save the mini-batches to .npy files
np$save("oil_train_batches_x.npy", oil_train_batches$x)
np$save("oil_train_batches_y.npy", oil_train_batches$y)
np$save("oil_test_batches_x.npy", oil_test_batches$x)
np$save("oil_test_batches_y.npy", oil_test_batches$y)
#| code-fold: true
#| code-summary: 'Code'
#| warning: false
#| output: true
gas_train <- as.matrix(gas_train)
gas_test <- as.matrix(gas_test)
gas_train_batches <- form_arrays(gas_train, lookback  = lookback, delay = 1, step = 1, feature_columns = 1, target_columns = 1)
gas_test_batches <- form_arrays(gas_test, lookback  = lookback, delay = 1, step = 1, feature_columns = 1, target_columns = 1)
# Display the shape
train_shape_gas <- dim(gas_train_batches$x)
test_shape_gas <- dim(gas_test_batches$x)
cat(sprintf("Natural Gas Train shape: (%d, %d, %d) , (%d, %d)\n",
train_shape_gas[1], train_shape_gas[2], train_shape_gas[3], dim(gas_train_batches$y)[1], dim(gas_train_batches$y)[2]))
cat(sprintf("Natural Gas Test shape: (%d, %d, %d) , (%d, %d)\n",
test_shape_gas[1], test_shape_gas[2], test_shape_gas[3], dim(gas_test_batches$y)[1], dim(gas_test_batches$y)[2]))
#| code-fold: true
#| code-summary: 'Code'
#| warning: false
#| output: true
electricity_train <- as.matrix(electricity_train)
electricity_test <- as.matrix(electricity_test)
electricity_train_batches <- form_arrays(electricity_train, lookback  = lookback, delay = 1, step = 1, feature_columns = 1, target_columns = 1)
electricity_test_batches <- form_arrays(electricity_test, lookback  = lookback, delay = 1, step = 1, feature_columns = 1, target_columns = 1)
# Display the shape
train_shape_elec <- dim(electricity_train_batches$x)
test_shape_elec <- dim(electricity_test_batches$x)
cat(sprintf("Electricity Train shape: (%d, %d, %d) , (%d, %d)\n",
train_shape_elec[1], train_shape_elec[2], train_shape_elec[3], dim(electricity_train_batches$y)[1], dim(electricity_train_batches$y)[2]))
cat(sprintf("Electricity Test shape: (%d, %d, %d) , (%d, %d)\n",
test_shape_elec[1], test_shape_elec[2], test_shape_elec[3], dim(electricity_test_batches$y)[1], dim(electricity_test_batches$y)[2]))
#| code-fold: true
#| code-summary: 'Code'
#| warning: false
#| output: true
gdp_train <- as.matrix(gdp_train)
gdp_test <- as.matrix(gdp_test)
gdp_train_batches <- form_arrays(gdp_train, lookback  = lookback, delay = 1, step = 1, feature_columns = 1, target_columns = 1)
gdp_test_batches <- form_arrays(gdp_test, lookback  = lookback, delay = 1, step = 1, feature_columns = 1, target_columns = 1)
# Display the shape
train_shape_gdp <- dim(gdp_train_batches$x)
test_shape_gdp <- dim(gdp_test_batches$x)
cat(sprintf("GDP Train shape: (%d, %d, %d) , (%d, %d)\n",
train_shape_gdp[1], train_shape_gdp[2], train_shape_gdp[3], dim(gdp_train_batches$y)[1], dim(gdp_train_batches$y)[2]))
cat(sprintf("GDP Test shape: (%d, %d, %d) , (%d, %d)\n",
test_shape_gdp[1], test_shape_gdp[2], test_shape_gdp[3], dim(gdp_test_batches$y)[1], dim(gdp_test_batches$y)[2]))
#| code-fold: true
#| code-summary: 'Code'
#| warning: false
#| output: true
cpi_train <- as.matrix(cpi_train)
cpi_test <- as.matrix(cpi_test)
cpi_train_batches <- form_arrays(cpi_train, lookback  = lookback, delay = 1, step = 1, feature_columns = 1, target_columns = 1)
cpi_test_batches <- form_arrays(cpi_test, lookback  = lookback, delay = 1, step = 1, feature_columns = 1, target_columns = 1)
# Display the shape
train_shape_cpi <- dim(cpi_train_batches$x)
test_shape_cpi <- dim(cpi_test_batches$x)
cat(sprintf("CPI Train shape: (%d, %d, %d) , (%d, %d)\n",
train_shape_cpi[1], train_shape_cpi[2], train_shape_cpi[3], dim(cpi_train_batches$y)[1], dim(cpi_train_batches$y)[2]))
cat(sprintf("CPI Test shape: (%d, %d, %d) , (%d, %d)\n",
test_shape_cpi[1], test_shape_cpi[2], test_shape_cpi[3], dim(cpi_test_batches$y)[1], dim(cpi_test_batches$y)[2]))
reticulate::repl_python()
