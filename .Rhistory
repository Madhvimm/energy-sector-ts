summary(best_model)
#| code-fold: true
#| code-summary: 'Code'
#| warning: false
#| output: true
garch_fit_returns_chevron <- garchFit(~garch(1,1), data = returns_chevron, trace = F)
summary(garch_fit_returns_chevron)
#| code-fold: true
#| code-summary: 'Code'
#| warning: false
#| output: true
summary(fit_chevron)
#| code-fold: true
#| code-summary: 'Code'
#| warning: false
#| output: true
garch_chevron <- garchFit(~garch(1,1), chevron.res,trace = F)
summary(garch_chevron)
#| code-fold: true
#| code-summary: 'Code'
#| warning: false
#| output: true
summary(garch(chevron.res, order = c(1,1),trace = F))
#| code-fold: true
#| code-summary: 'Code'
#| warning: false
#| output: true
checkresiduals(garch(chevron.res, order = c(1,1),trace = F))
#| code-fold: true
#| code-summary: 'Code'
#| warning: false
#| output: true
garch_returns_chevron1 <- garch(returns_chevron, order = c(1,1), trace = F)
summary(garch_returns_chevron1)
#| code-fold: true
#| code-summary: 'Code'
#| warning: false
#| output: true
checkresiduals(garch_returns_chevron1)
n <- length(returns_exxon)
n
#| code-fold: true
#| code-summary: 'Code'
#| warning: false
#| output: true
k <- 900
n <- length(returns_chevron)
err1 <- c()
err2 <- c()
for(i in 1:(n-k)) {
xtrain <- returns_chevron[1:(k-1)+i]
xtest <- returns_chevron[k+i]
# ARIMA(0,0,1) + GARCH(1,1)
arima.fit <- Arima(xtrain, order = c(0, 0, 1), include.drift = TRUE)
arima.res <- residuals(arima.fit)
fit1 <- garchFit(~garch(1, 1), data = arima.res, trace = FALSE)
fcast1 <- predict(fit1, n.ahead = 1)
# GARCH(1,1)
returns_diff <- diff(xtrain)
fit2 <- garchFit(~garch(1, 1), data = xtrain, trace = FALSE)
fcast2 <- predict(fit2, n.ahead = 1)
err1 <- c(err1, (fcast1$meanForecast - xtest)^2)
err2 <- c(err2, (fcast2$meanForecast - xtest)^2)
}
RMSE1_c <- sqrt(mean(err1))
RMSE2_c <- sqrt(mean(err2))
#| code-fold: true
#| code-summary: 'Code'
#| warning: false
#| output: true
cat("The RMSE for model 1 -", RMSE1_c, "\n")
cat("The RMSE for model 2 -", RMSE2_c, "\n")
#| code-fold: true
#| code-summary: 'Code'
#| warning: false
#| output: true
#Fit the ARIMA model
arima_chevron_final <- Arima(returns_chevron, order = c(0, 0, 1))
#Extract the residuals
residuals_chevron_final <- residuals(arima_chevron_final)
# Fit the GARCH model on the residuals
garch_chevron_final <- garchFit(~garch(1,1), data = residuals_chevron_final, trace = FALSE)
summary(garch_chevron_final)
#| code-fold: true
#| code-summary: 'Code'
#| warning: false
#| output: true
predict(garch_chevron_final, n.ahead = 100, plot = TRUE)
#| code-fold: true
#| code-summary: 'Code'
#| warning: false
#| output: true
ht <- garch_chevron_final@h.t
chevron_stockprice_df = data.frame(Chevron_stockprice)
chevron_stockprice_df <- head(chevron_stockprice_df, -1)
chevron_stockprice_df <- data.frame(chevron_stockprice_df,rownames(chevron_stockprice_df))
colnames(chevron_stockprice_df)[7] = "date"
chevron_stockprice_df$date<-as.Date(chevron_stockprice_df$date,"%Y-%m-%d")
data_spot = data.frame(ht,chevron_stockprice_df$date)
ggplot(data_spot, aes(y = ht, x = chevron_stockprice_df.date)) + geom_line() + ylab('Conditional Variance') + xlab('Date') +
theme_minimal() +
ggtitle("Volatility plot for Chevron Corporation Stock Price") +
theme(plot.title = element_text(hjust = 0.5, face = "bold"))
#| code-fold: true
#| code-summary: 'Code'
#| warning: false
#| output: true
ht <- garch_chevron_final@h.t
chevron_stockprice_df = data.frame(Chevron_stockprice)
chevron_stockprice_df <- head(chevron_stockprice_df, -1)
chevron_stockprice_df <- data.frame(chevron_stockprice_df,rownames(chevron_stockprice_df))
colnames(chevron_stockprice_df)[7] = "date"
chevron_stockprice_df$date<-as.Date(chevron_stockprice_df$date,"%Y-%m-%d")
data_spot = data.frame(ht,chevron_stockprice_df$date)
ggplot(data_spot, aes(y = ht, x = chevron_stockprice_df.date)) +
geom_line() +
ylab('Conditional Variance') +
xlab('Date') +
theme_minimal() +
ggtitle("Volatility plot for Chevron Corporation Stock Price") +
theme(plot.title = element_text(hjust = 0.5, face = "bold"))
#| code-fold: true
#| code-summary: 'Code'
#| warning: false
#| output: true
ht <- garch_chevron_final@h.t
chevron_stockprice_df = data.frame(Chevron_stockprice)
chevron_stockprice_df <- head(chevron_stockprice_df, -1)
chevron_stockprice_df <- data.frame(chevron_stockprice_df,rownames(chevron_stockprice_df))
colnames(chevron_stockprice_df)[7] = "date"
chevron_stockprice_df$date<-as.Date(chevron_stockprice_df$date,"%Y-%m-%d")
data_spot = data.frame(ht,chevron_stockprice_df$date)
ggplot(data_spot, aes(y = ht, x = chevron_stockprice_df.date)) +
geom_line(color = "dodgerblue") +
ylab('Conditional Variance') +
xlab('Date') +
theme_minimal() +
ggtitle("Volatility plot for Chevron Corporation Stock Price") +
theme(plot.title = element_text(hjust = 0.5, face = "bold"))
#| code-fold: true
#| code-summary: 'Code'
#| warning: false
#| output: true
ht <- garch_chevron_final@h.t
chevron_stockprice_df = data.frame(Chevron_stockprice)
chevron_stockprice_df <- head(chevron_stockprice_df, -1)
chevron_stockprice_df <- data.frame(chevron_stockprice_df,rownames(chevron_stockprice_df))
colnames(chevron_stockprice_df)[7] = "date"
chevron_stockprice_df$date<-as.Date(chevron_stockprice_df$date,"%Y-%m-%d")
data_spot = data.frame(ht,chevron_stockprice_df$date)
ggplot(data_spot, aes(y = ht, x = chevron_stockprice_df.date)) +
geom_line(color = "dodgerblue3") +
ylab('Conditional Variance') +
xlab('Date') +
theme_minimal() +
ggtitle("Volatility plot for Chevron Corporation Stock Price") +
theme(plot.title = element_text(hjust = 0.5, face = "bold"))
#| code-fold: true
#| code-summary: 'Code'
#| warning: false
#| output: true
ht <- garch_exxon_final@h.t
exxon_stockprice_df = data.frame(Exxon_stockprice)
exxon_stockprice_df <- head(exxon_stockprice_df, -1)
exxon_stockprice_df <- data.frame(exxon_stockprice_df,rownames(exxon_stockprice_df))
colnames(exxon_stockprice_df)[7] = "date"
exxon_stockprice_df$date<-as.Date(exxon_stockprice_df$date,"%Y-%m-%d")
data_spot = data.frame(ht,exxon_stockprice_df$date)
ggplot(data_spot, aes(y = ht, x = exxon_stockprice_df.date)) +
geom_line(color = "dodgerblue3")  +
ylab('Conditional Variance') +
xlab('Date') +
theme_minimal() +
ggtitle("Volatility plot for Exxon Mobil Stock Price") +
theme(plot.title = element_text(hjust = 0.5, face = "bold"))
#| code-fold: true
#| code-summary: 'Code'
#| warning: false
#| output: true
model_output_c <- capture.output(sarima(returns_chevron,0,0,1))
#| code-fold: true
#| code-summary: 'Importing Libraries'
#| warning: false
#| output: false
library(ggplot2)
library(readr)
library(tidyverse)
library(lubridate)
library(forecast)
library(tseries)
library(plotly)
library(gridExtra)
library(zoo)
library(astsa)
library(ggplot2)
library(zoo)
library(plotly)
library(vars)
library(dplyr)
library(quantmod)
library(FinTS)
library(gogarch)
#| code-fold: true
#| code-summary: 'Code'
#| warning: false
#| output: false
# Retrieve stock price data for Exxon Mobil starting from 1990
Exxon_stockprice <- getSymbols("XOM", auto.assign = FALSE, from = "1990-01-01", src = "yahoo")
#| code-fold: true
#| code-summary: 'Code'
#| warning: false
#| output: true
# Plot the stock prices
chartSeries(Exxon_stockprice, theme = chartTheme("white"),
bar.type = "hlc",
up.col = "green",
dn.col = "red")
#| code-fold: true
#| code-summary: 'Code'
#| warning: false
#| output: false
# Retrieve stock price data for Chevron Corporation starting from 1990
Chevron_stockprice <- getSymbols("CVX", auto.assign = FALSE, from = "1990-01-01", src = "yahoo")
#| code-fold: true
#| code-summary: 'Code'
#| warning: false
#| output: true
# Plot the stock prices
chartSeries(Chevron_stockprice, theme = chartTheme("white"),
bar.type = "hlc",
up.col = "green",
dn.col = "red")
#| code-fold: true
#| code-summary: 'Code'
#| warning: false
#| output: true
# Convert to a time series object
Exxon_ts <- ts(Exxon_stockprice$XOM.Adjusted, start=decimal_date(as.Date("1990-01-01")), frequency = 365.25)
# Calculate log returns
returns_exxon <- log(Exxon_ts)%>% diff()
knitr::kable(summary(returns_exxon))
#| code-fold: true
#| code-summary: 'Code'
#| warning: false
#| output: true
# Plot the returns
autoplot(returns_exxon, color="dodgerblue3") +
theme_minimal() +
ggtitle("Exxon Mobil Stock Price Returns") +
theme(plot.title = element_text(hjust = 0.5, face = "bold"))
#| code-fold: true
#| code-summary: 'Code'
#| warning: false
#| output: true
# Convert to a time series object
Chevron_ts <- ts(Chevron_stockprice$CVX.Adjusted, start=decimal_date(as.Date("1990-01-01")), frequency = 365.25)
# Calculate log returns
returns_chevron <- log(Chevron_ts)%>% diff()
knitr::kable(summary(returns_chevron))
#| code-fold: true
#| code-summary: 'Code'
#| warning: false
#| output: true
# Plot the returns
autoplot(returns_chevron, color="dodgerblue3") +
theme_minimal() +
ggtitle("Chevron Stock Price Returns") +
theme(plot.title = element_text(hjust = 0.5, face = "bold"))
#| code-fold: true
#| code-summary: 'Code'
#| warning: false
#| output: true
#ACF Plot for Exxon Mobil Stock
Exxon_acf <- ggAcf(returns_exxon,40) +
ggtitle("ACF Plot for Exxon Mobil Returns ") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5, face = "bold"))
#PACF Plot for Exxon Mobil Stock
Exxon_pacf <- ggPacf(returns_exxon,40) +
ggtitle("PACF Plot for Exxon Mobil Returns") +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5, face = "bold"))
grid.arrange(Exxon_acf, Exxon_pacf, nrow = 2)
#| code-fold: true
#| code-summary: 'Code'
#| warning: false
#| output: true
#ACF Plot for Chevron Stock
Chevron_acf <- ggAcf(returns_chevron,40) +
ggtitle("ACF Plot for Chevron Stock Returns") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5, face = "bold"))
#PACF Plot for Chevron Stock
Chevron_pacf <- ggPacf(returns_chevron,40) +
ggtitle("PACF Plot for Chevron Stock Returns") +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5, face = "bold"))
grid.arrange(Chevron_acf, Chevron_pacf, nrow = 2)
#| code-fold: true
#| code-summary: 'Code'
#| warning: false
#| output: true
#ACF Plot for Exxon Mobil Stock
Exxon_acf_abs <- ggAcf(abs(returns_exxon),lag.max=40) +
ggtitle("ACF Plot for Exxon Mobil Absolute Returns") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5, face = "bold"))
#PACF Plot for Exxon Mobil Stock
Exxon_pacf_abs <- ggPacf(abs(returns_exxon),lag.max=40) +
ggtitle("PACF Plot for Exxon Mobil Absolute Returns") +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5, face = "bold"))
grid.arrange(Exxon_acf_abs, Exxon_pacf_abs, nrow = 2)
#| code-fold: true
#| code-summary: 'Code'
#| warning: false
#| output: true
#ACF Plot for Chevron Stock
Chevron_acf_abs <- ggAcf(abs(returns_chevron),40) +
ggtitle("ACF Plot for Chevron Stock Absolute Returns") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5, face = "bold"))
#PACF Plot for Chevron Stock
Chevron_pacf_abs <- ggPacf(abs(returns_chevron),40) +
ggtitle("PACF Plot for Chevron Stock Absolute Returns") +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5, face = "bold"))
grid.arrange(Chevron_acf_abs, Chevron_pacf_abs, nrow = 2)
#| code-fold: true
#| code-summary: 'Code'
#| warning: false
#| output: true
# ACF Plot for Exxon Mobil Squared Returns
Exxon_acf_se <- ggAcf(returns_exxon^2, lag.max=40) +
ggtitle("ACF Plot for Exxon Mobil Squared Returns") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5, face = "bold"))
# PACF Plot for Exxon Mobil Squared Returns
Exxon_pacf_se <- ggPacf(returns_exxon^2, lag.max=40) +
ggtitle("PACF Plot for Exxon Mobil Squared Returns") +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5, face = "bold"))
# Arrange the plots on a grid
grid.arrange(Exxon_acf_se, Exxon_pacf_se, nrow = 2)
#| code-fold: true
#| code-summary: 'Code'
#| warning: false
#| output: true
#ACF Plot for Chevron Stock
Chevron_acf_se <- ggAcf(returns_chevron^2,40) +
ggtitle("ACF Plot for Chevron Stock Squared Returns") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5, face = "bold"))
#PACF Plot for Chevron Stock
Chevron_pacf_se <- ggPacf(returns_chevron^2,40) +
ggtitle("PACF Plot for Chevron Stock Squared Returns") +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5, face = "bold"))
grid.arrange(Chevron_acf_se, Chevron_pacf_se, nrow = 2)
#| code-fold: true
#| code-summary: 'Code'
#| warning: false
#| output: true
# Conduct the ARCH test
ArchTest(returns_exxon, lags=1, demean=TRUE)
#| code-fold: true
#| code-summary: 'Code'
#| warning: false
#| output: true
# Conduct the ARCH test
ArchTest(returns_chevron, lags=1, demean=TRUE)
#| code-fold: true
#| code-summary: 'Code'
#| warning: false
#| output: true
ARIMA.c=function(p1,p2,q1,q2,data){
temp=c()
#d=1
i=1
temp= data.frame()
ls=matrix(rep(NA,6*18),nrow=18)
for (p in p1:p2)
{
for(q in q1:q2)
{
for(d in 0:1)
{
if(p+d+q<=6)
{
model<- Arima(data,order=c(p,d,q))
ls[i,]= c(p,d,q,model$aic,model$bic,model$aicc)
i=i+1
}
}
}
}
temp= as.data.frame(ls)
names(temp)= c("p","d","q","AIC","BIC","AICc")
temp
}
output <- ARIMA.c(0,2,0,2,data=returns_exxon)
output
output[which.min(output$AIC),]
output[which.min(output$BIC),]
output[which.min(output$AICc),]
#| code-fold: true
#| code-summary: 'Code'
#| warning: false
#| output: true
fit_exxon <- Arima(returns_exxon,order=c(1,0,1))
summary(fit_exxon)
#| code-fold: true
#| code-summary: 'Code'
#| warning: false
#| output: true
ARIMA.c=function(p1,p2,q1,q2,data){
temp=c()
#d=1
i=1
temp= data.frame()
ls=matrix(rep(NA,6*18),nrow=18)
for (p in p1:p2)
{
for(q in q1:q2)
{
for(d in 0:1)
{
if(p+d+q<=6)
{
model<- Arima(data,order=c(p,d,q))
ls[i,]= c(p,d,q,model$aic,model$bic,model$aicc)
i=i+1
}
}
}
}
temp= as.data.frame(ls)
names(temp)= c("p","d","q","AIC","BIC","AICc")
temp
}
output <- ARIMA.c(0,2,0,2,data=returns_chevron)
output
output[which.min(output$AIC),]
output[which.min(output$BIC),]
output[which.min(output$AICc),]
#| code-fold: true
#| code-summary: 'Code'
#| warning: false
#| output: true
fit_chevron <- Arima(returns_chevron,order=c(0,0,1))
summary(fit_chevron)
#| code-fold: true
#| code-summary: 'Code'
#| warning: false
#| output: true
model_output_e <- capture.output(sarima(returns_exxon,1,0,1))
#model_output_e
cat(model_output_e[22:34], model_output_e[length(model_output_e)], sep = "\n")
#| code-fold: true
#| code-summary: 'Code'
#| warning: false
#| output: true
exxon.res<-fit_exxon$residuals
plot1 <- ggAcf(exxon.res, 40) +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5, face = "bold"))
plot2<- ggPacf(exxon.res, 40) +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5, face = "bold"))
grid.arrange(plot1, plot2,nrow=2)
#| code-fold: true
#| code-summary: 'Code'
#| warning: false
#| output: true
plot3 <- ggAcf(exxon.res^2, 40) +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5, face = "bold"))
plot4<- ggPacf(exxon.res^2, 40) +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5, face = "bold"))
grid.arrange(plot3, plot4,nrow=2)
#| code-fold: true
#| code-summary: 'Code'
#| warning: false
#| output: true
model_output_c <- capture.output(sarima(returns_chevron,0,0,1))
#model_output_c
cat(model_output_c[11:22], model_output_c[length(model_output_c)], sep = "\n")
#| code-fold: true
#| code-summary: 'Code'
#| warning: false
#| output: true
chevron.res<-fit_chevron$residuals
plot5 <- ggAcf(chevron.res, 40) +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5, face = "bold"))
plot6 <- ggPacf(chevron.res, 40) +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5, face = "bold"))
grid.arrange(plot1, plot2,nrow=2)
#| code-fold: true
#| code-summary: 'Code'
#| warning: false
#| output: true
chevron.res<-fit_chevron$residuals
plot5 <- ggAcf(chevron.res, 40) +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5, face = "bold"))
plot6 <- ggPacf(chevron.res, 40) +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5, face = "bold"))
grid.arrange(plot5, plot6,nrow=2)
