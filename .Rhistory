#| output: false
composite_crude_oil_prices <- read.csv("data/composite_crude_oil_prices.csv")
citygate_gas_prices <- read.csv("data/citygate_gas_prices.csv")
total_electricity_prices <- read.csv("data/total_electricity_prices.csv")
gdp_data <- read.csv("data/gdp_data.csv")
cpi_data <- read.csv("data/cpi_data.csv")
#| code-fold: true
#| code-summary: 'convert to ts'
#| warning: false
#| output: false
# For Crude Oil
composite_crude_oil_prices$Date <- as.Date(composite_crude_oil_prices$Date)
start_year <- as.numeric(format(min(composite_crude_oil_prices$Date), "%Y"))
start_month <- as.numeric(format(min(composite_crude_oil_prices$Date), "%m"))
composite_crude_oil_ts <- ts(composite_crude_oil_prices$Value, start=c(start_year, start_month), frequency=12)
# Log-transform Value
composite_crude_oil_prices$LOG_Value <- log(composite_crude_oil_prices$Value)
oil_log_ts <- ts(composite_crude_oil_prices$LOG_Value, start=c(start_year, start_month), frequency=12)
# For Natural Gas
citygate_gas_prices$Date <- as.Date(citygate_gas_prices$Date)
start_year_gas <- as.numeric(format(min(citygate_gas_prices$Date), "%Y"))
start_month_gas <- as.numeric(format(min(citygate_gas_prices$Date), "%m"))
citygate_gas_ts <- ts(citygate_gas_prices$Value, start=c(start_year_gas, start_month_gas), frequency=12)
# Log-transform Value
citygate_gas_prices$LOG_Value <- log(citygate_gas_prices$Value)
gas_log_ts <- ts(citygate_gas_prices$LOG_Value, start=c(start_year_gas, start_month_gas), frequency=12)
# For Electricity
total_electricity_prices$Date <- as.Date(total_electricity_prices$Date, format = "%Y-%m-%d")
start_year_elec <- as.numeric(format(min(total_electricity_prices$Date), "%Y"))
start_month_elec <- as.numeric(format(min(total_electricity_prices$Date), "%m"))
total_electricity_ts <- ts(total_electricity_prices$Value, start = c(start_year_elec, start_month_elec), frequency = 12)
# Log-transform Value
total_electricity_prices$LOG_Value <- log(total_electricity_prices$Value)
electricity_log_ts <- ts(total_electricity_prices$LOG_Value, start=c(start_year_elec, start_month_elec), frequency=12)
# For GDP (it's quarterly)
gdp_data$DATE <- as.Date(gdp_data$DATE, format = "%Y-%m-%d")
start_year_gdp <- as.numeric(format(min(gdp_data$DATE), "%Y"))
start_quarter_gdp <- quarter(min(gdp_data$DATE))
# Log-transform GDP
gdp_data$LOG_GDP <- log(gdp_data$GDP)
gdp_log_ts <- ts(gdp_data$LOG_GDP, start=c(start_year_gdp, start_quarter_gdp), frequency=4)
# For CPI (it's monthly)
cpi_data$DATE <- as.Date(cpi_data$DATE, format = "%Y-%m-%d")
start_year_cpi <- as.numeric(format(min(cpi_data$DATE), "%Y"))
start_month_cpi <- as.numeric(format(min(cpi_data$DATE), "%m"))
# Log-transform CPI
cpi_data$LOG_CPI <- log(cpi_data$CPIAUCSL)
cpi_log_ts <- ts(cpi_data$LOG_CPI, start = c(start_year_cpi, start_month_cpi), frequency = 12)
#| code-fold: true
#| code-summary: 'convert to ts'
#| warning: false
#| output: false
# Subset
crude_oil_window <- window(oil_log_ts, start = decimal_date(as.Date("1990-01-01")), end = decimal_date(as.Date("2023-11-01")))
natural_gas_window <- window(gas_log_ts, start = decimal_date(as.Date("1990-01-01")), end = decimal_date(as.Date("2023-11-01")))
electricity_prices_window <- window(electricity_log_ts, start = decimal_date(as.Date("1990-01-01")), end = decimal_date(as.Date("2023-11-01")))
gdp_window <- window(gdp_log_ts, start = decimal_date(as.Date("1990-01-01")), end = decimal_date(as.Date("2023-09-01")))
#| code-fold: true
#| code-summary: 'convert to ts'
#| warning: false
#| output: false
# Subset
crude_oil_window <- window(oil_log_ts, start = decimal_date(as.Date("1990-01-01")), end = decimal_date(as.Date("2023-11-01")))
natural_gas_window <- window(gas_log_ts, start = decimal_date(as.Date("1990-01-01")), end = decimal_date(as.Date("2023-11-01")))
electricity_prices_window <- window(electricity_log_ts, start = decimal_date(as.Date("1990-01-01")), end = decimal_date(as.Date("2023-11-01")))
gdp_window <- window(gdp_log_ts, start = decimal_date(as.Date("1990-01-01")), end = decimal_date(as.Date("2023-09-01")))
cpi_window <- window(cpi_log_ts, start = decimal_date(as.Date("1990-01-01")), end = decimal_date(as.Date("2023-09-01")))
#| code-fold: true
#| code-summary: 'convert to ts'
#| warning: false
#| output: false
# Subset
crude_oil_window <- window(oil_log_ts, start = decimal_date(as.Date("1990-01-01")), end = decimal_date(as.Date("2023-09-01")))
natural_gas_window <- window(gas_log_ts, start = decimal_date(as.Date("1990-01-01")), end = decimal_date(as.Date("2023-09-01")))
electricity_prices_window <- window(electricity_log_ts, start = decimal_date(as.Date("1990-01-01")), end = decimal_date(as.Date("2023-09-01")))
gdp_window <- window(gdp_log_ts, start = decimal_date(as.Date("1990-01-01")), end = decimal_date(as.Date("2023-09-01")))
cpi_window <- window(cpi_log_ts, start = decimal_date(as.Date("1990-01-01")), end = decimal_date(as.Date("2023-09-01")))
#| code-fold: true
#| code-summary: 'Variable Selection'
#| warning: false
#| output: true
#Combining
energy_price_data <- cbind(electricity_prices_window, crude_oil_window, natural_gas_window)
colnames(energy_price_data) <- c("Electricity", "CrudeOil", "NaturalGas")
#Plotting the data
autoplot(energy_price_data) + theme_bw() +
theme(plot.title = element_text(hjust = 0.5, face = "bold"))
#| code-fold: true
#| code-summary: 'Variable Selection'
#| warning: false
#| output: true
#Combining
elec_oil_ng <- cbind(electricity_prices_window, crude_oil_window, natural_gas_window)
colnames(elec_oil_ng) <- c("Electricity", "CrudeOil", "NaturalGas")
#Plotting the data
autoplot(elec_oil_ng) + theme_bw() +
theme(plot.title = element_text(hjust = 0.5, face = "bold"))
#| code-fold: true
#| code-summary: 'Variable Selection'
#| warning: false
#| output: true
#Combining
elec_oil_ng <- cbind(electricity_prices_window, crude_oil_window, natural_gas_window)
colnames(elec_oil_ng) <- c("Electricity", "CrudeOil", "NaturalGas")
#Plotting the data
autoplot(elec_oil_ng) + theme_bw() +
theme(plot.title = element_text(hjust = 0.5, face = "bold"))
gg_energy_price <- ggplot(elec_oil_ng, aes(x = Index)) +
geom_line(aes(y = Electricity, color = "Electricity")) +
geom_line(aes(y = CrudeOil, color = "Crude Oil")) +
geom_line(aes(y = NaturalGas, color = "Natural Gas")) +
scale_color_manual(values = c("Electricity" = "red", "Crude Oil" = "green", "Natural Gas" = "blue")) +
labs(title = "Electricity, Crude Oil, and Natural Gas Prices Over Time",
x = "Year",
y = "Logged Prices",
color = "Series") +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5, face = "bold"))
# Convert to an interactive plotly object
plotly_energy_price <- ggplotly(gg_energy_price)
#| code-fold: true
#| code-summary: 'Variable Selection'
#| warning: false
#| output: true
#Combining
elec_oil_ng <- cbind(electricity_prices_window, crude_oil_window, natural_gas_window)
colnames(elec_oil_ng) <- c("Electricity", "CrudeOil", "NaturalGas")
#Plotting the data
#autoplot(elec_oil_ng) + theme_bw() +
#        theme(plot.title = element_text(hjust = 0.5, face = "bold"))
elec_oil_ng_df <- fortify(elec_oil_ng)
gg_energy_price <- ggplot(elec_oil_ng_df, aes(x = Index)) +
geom_line(aes(y = Electricity, color = "Electricity")) +
geom_line(aes(y = CrudeOil, color = "Crude Oil")) +
geom_line(aes(y = NaturalGas, color = "Natural Gas")) +
scale_color_manual(values = c("Electricity" = "red", "Crude Oil" = "green", "Natural Gas" = "blue")) +
labs(title = "Electricity, Crude Oil, and Natural Gas Prices Over Time",
x = "Year",
y = "Logged Prices",
color = "Series") +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5, face = "bold"))
# Convert to an interactive plotly object
plotly_energy_price <- ggplotly(gg_energy_price)
#| code-fold: true
#| code-summary: 'Variable Selection'
#| warning: false
#| output: true
#Combining
elec_oil_ng <- cbind(electricity_prices_window, crude_oil_window, natural_gas_window)
colnames(elec_oil_ng) <- c("Electricity", "CrudeOil", "NaturalGas")
head(elec_oil_ng)
#Plotting the data
#autoplot(elec_oil_ng) + theme_bw() +
#        theme(plot.title = element_text(hjust = 0.5, face = "bold"))
elec_oil_ng_df <- fortify(elec_oil_ng)
gg_energy_price <- ggplot(elec_oil_ng_df, aes(x = Index)) +
geom_line(aes(y = Electricity, color = "Electricity")) +
geom_line(aes(y = CrudeOil, color = "Crude Oil")) +
geom_line(aes(y = NaturalGas, color = "Natural Gas")) +
scale_color_manual(values = c("Electricity" = "red", "Crude Oil" = "green", "Natural Gas" = "blue")) +
labs(title = "Electricity, Crude Oil, and Natural Gas Prices Over Time",
x = "Year",
y = "Logged Prices",
color = "Series") +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5, face = "bold"))
# Convert to an interactive plotly object
plotly_energy_price <- ggplotly(gg_energy_price)
#| code-fold: true
#| code-summary: 'Variable Selection'
#| warning: false
#| output: true
#Combining
elec_oil_ng <- cbind(electricity_prices_window, crude_oil_window, natural_gas_window)
colnames(elec_oil_ng) <- c("Electricity", "CrudeOil", "NaturalGas")
#Plotting the data
autoplot(elec_oil_ng) + theme_bw() +
theme(plot.title = element_text(hjust = 0.5, face = "bold"))
#| code-fold: true
#| code-summary: 'Variable Selection'
#| warning: false
#| output: true
#Combining
elec_oil_ng <- cbind(electricity_prices_window, crude_oil_window, natural_gas_window)
colnames(elec_oil_ng) <- c("Electricity", "CrudeOil", "NaturalGas")
#Plotting the data
autoplot(elec_oil_ng) +
theme_bw() +
ggtitle("Electricity, Crude Oil, and Natural Gas Prices Over Time") +
theme(plot.title = element_text(hjust = 0.5, face = "bold"))
#| code-fold: true
#| code-summary: 'C-V'
#| warning: false
#| output: true
suppressWarnings({
n=length(residuals_m_ecn) # 404
k=72
#n-k=332; 332/12=27;
rmse1 <- matrix(NA, 27,12)
rmse2 <- matrix(NA,27,12)
rmse3 <- matrix(NA,27,12)
err1 = c()
err2 = c()
st <- tsp(residuals_m_ecn)[1]+(k-1)/12
for(i in 1:27)
{
#xtrain <- window(a10, start=st+(i-k+1)/12, end=st+i/12)
xtrain <- window(residuals_m_ecn, end=st + i-1)
xtest <- window(residuals_m_ecn, start=st + (i-1) + 1/12, end=st + i)
# auto arima
fit <- Arima(xtrain, order=c(2,1,1), seasonal=list(order=c(0,0,2), period=12),
include.drift=TRUE, method="CSS")
fcast <- forecast(fit, h=12)
# manual model
fit2 <- Arima(xtrain, order=c(4,0,0), seasonal=list(order=c(0,1,1), period=12),
include.drift=TRUE, method="CSS")
fcast2 <- forecast(fit2, h=12)
rmse1[i,1:length(xtest)]  <- sqrt((fcast$mean-xtest)^2)
rmse2[i,1:length(xtest)] <- sqrt((fcast2$mean-xtest)^2)
## This is mean absolute error
err1 = c(err1, abs(fcast$mean-xtest))
err2 = c(err2, abs(fcast2$mean-xtest))
# This is mean squared error
err3 = c(err1, (fcast$mean-xtest)^2)
err4 = c(err2, (fcast2$mean-xtest)^2)
}
})
#| code-fold: true
#| code-summary: 'Importing Libraries'
#| warning: false
#| output: false
library(ggplot2)
library(readr)
library(tidyverse)
library(lubridate)
library(forecast)
library(tseries)
library(plotly)
library(gridExtra)
library(zoo)
library(astsa)
library(ggplot2)
library(zoo)
library(plotly)
library(vars)
#| code-fold: true
#| code-summary: 'Read data'
#| warning: false
#| output: false
composite_crude_oil_prices <- read.csv("data/composite_crude_oil_prices.csv")
citygate_gas_prices <- read.csv("data/citygate_gas_prices.csv")
total_electricity_prices <- read.csv("data/total_electricity_prices.csv")
gdp_data <- read.csv("data/gdp_data.csv")
cpi_data <- read.csv("data/cpi_data.csv")
#| code-fold: true
#| code-summary: 'convert to ts'
#| warning: false
#| output: false
# For Crude Oil
composite_crude_oil_prices$Date <- as.Date(composite_crude_oil_prices$Date)
start_year <- as.numeric(format(min(composite_crude_oil_prices$Date), "%Y"))
start_month <- as.numeric(format(min(composite_crude_oil_prices$Date), "%m"))
composite_crude_oil_ts <- ts(composite_crude_oil_prices$Value, start=c(start_year, start_month), frequency=12)
# Log-transform Value
composite_crude_oil_prices$LOG_Value <- log(composite_crude_oil_prices$Value)
oil_log_ts <- ts(composite_crude_oil_prices$LOG_Value, start=c(start_year, start_month), frequency=12)
# For Natural Gas
citygate_gas_prices$Date <- as.Date(citygate_gas_prices$Date)
start_year_gas <- as.numeric(format(min(citygate_gas_prices$Date), "%Y"))
start_month_gas <- as.numeric(format(min(citygate_gas_prices$Date), "%m"))
citygate_gas_ts <- ts(citygate_gas_prices$Value, start=c(start_year_gas, start_month_gas), frequency=12)
# Log-transform Value
citygate_gas_prices$LOG_Value <- log(citygate_gas_prices$Value)
gas_log_ts <- ts(citygate_gas_prices$LOG_Value, start=c(start_year_gas, start_month_gas), frequency=12)
# For Electricity
total_electricity_prices$Date <- as.Date(total_electricity_prices$Date, format = "%Y-%m-%d")
start_year_elec <- as.numeric(format(min(total_electricity_prices$Date), "%Y"))
start_month_elec <- as.numeric(format(min(total_electricity_prices$Date), "%m"))
total_electricity_ts <- ts(total_electricity_prices$Value, start = c(start_year_elec, start_month_elec), frequency = 12)
# Log-transform Value
total_electricity_prices$LOG_Value <- log(total_electricity_prices$Value)
electricity_log_ts <- ts(total_electricity_prices$LOG_Value, start=c(start_year_elec, start_month_elec), frequency=12)
# For GDP (it's quarterly)
gdp_data$DATE <- as.Date(gdp_data$DATE, format = "%Y-%m-%d")
start_year_gdp <- as.numeric(format(min(gdp_data$DATE), "%Y"))
start_quarter_gdp <- quarter(min(gdp_data$DATE))
# Log-transform GDP
gdp_data$LOG_GDP <- log(gdp_data$GDP)
gdp_log_ts <- ts(gdp_data$LOG_GDP, start=c(start_year_gdp, start_quarter_gdp), frequency=4)
# For CPI (it's monthly)
cpi_data$DATE <- as.Date(cpi_data$DATE, format = "%Y-%m-%d")
start_year_cpi <- as.numeric(format(min(cpi_data$DATE), "%Y"))
start_month_cpi <- as.numeric(format(min(cpi_data$DATE), "%m"))
# Log-transform CPI
cpi_data$LOG_CPI <- log(cpi_data$CPIAUCSL)
cpi_log_ts <- ts(cpi_data$LOG_CPI, start = c(start_year_cpi, start_month_cpi), frequency = 12)
#| code-fold: true
#| code-summary: 'convert to ts'
#| warning: false
#| output: false
# Define the time window
start_date <- as.Date("1990-01-01")
end_date <- as.Date("2023-09-01")
# Subset
crude_oil_window <- window(oil_log_ts, start = decimal_date(start_date), end = decimal_date(end_date))
natural_gas_window <- window(gas_log_ts, start = decimal_date(start_date), end = decimal_date(end_date))
electricity_prices_window <- window(electricity_log_ts, start = decimal_date(start_date), end = decimal_date(end_date))
gdp_window <- window(gdp_log_ts, start = decimal_date(start_date), end = decimal_date(end_date))
cpi_window <- window(cpi_log_ts, start = decimal_date(start_date), end = decimal_date(end_date))
#| code-fold: true
#| code-summary: 'Variable Selection'
#| warning: false
#| output: true
#Combining
elec_oil_ng <- cbind(electricity_prices_window, crude_oil_window, natural_gas_window)
colnames(elec_oil_ng) <- c("Electricity", "CrudeOil", "NaturalGas")
#Plotting the data
autoplot(elec_oil_ng) +
theme_bw() +
labs(title = "Electricity, Crude Oil, and Natural Gas Prices Over Time",
x = "Year",
y = "Logged Prices",
color = "Series") +
theme(plot.title = element_text(hjust = 0.5, face = "bold"))
#| code-fold: true
#| code-summary: 'Variable Selection'
#| warning: false
#| output: true
#Combining
gdp_oil_ng <- cbind(electricity_prices_window, crude_oil_window, natural_gas_window)
colnames(gdp_oil_ng) <- c("GDP", "CrudeOil", "NaturalGas")
#Plotting the data
autoplot(gdp_oil_ng) +
theme_bw() +
labs(title = "GDP, Crude Oil, and Natural Gas Prices Over Time",
x = "Year",
y = "Logged Prices",
color = "Series") +
theme(plot.title = element_text(hjust = 0.5, face = "bold"))
#| code-fold: true
#| code-summary: 'Variable Selection'
#| warning: false
#| output: true
#Combining
cpi_oil_ng <- cbind(cpi_window, crude_oil_window, natural_gas_window)
colnames(cpi_oil_ng) <- c("CPI", "CrudeOil", "NaturalGas")
#Plotting the data
autoplot(cpi_oil_ng) +
theme_bw() +
labs(title = "CPI, Crude Oil, and Natural Gas Prices Over Time",
x = "Year",
y = "Logged Prices",
color = "Series") +
theme(plot.title = element_text(hjust = 0.5, face = "bold"))
#| code-fold: true
#| code-summary: 'Fit Auto Arima'
#| warning: false
#| output: true
#Exogenous regressors
xreg <- cbind(CrudeOil = elec_oil_ng[,"CrudeOil"], NaturalGas = elec_oil_ng[,"NaturalGas"])
#Fit the ARIMAX model
fit_arimax_ecn <- auto.arima(elec_oil_ng[,"Electricity"], xreg=xreg)
#Summary
summary(fit_arimax_ecn)
#| code-fold: true
#| code-summary: 'Check Residuals'
#| warning: false
#| output: true
#Check residuals
checkresiduals(fit_arimax_ecn)
#| code-fold: true
#| code-summary: 'Residuals Fit - SARIMA'
#| warning: false
#| output: true
model_output_r1 <- capture.output(sarima(residuals(fit_arimax_ecn), 0,1,2,0,1,1,12))
#model_output_r1
cat(model_output_r1[26:38], model_output_r1[length(model_output_r1)], sep = "\n")
#| code-fold: true
#| code-summary: 'Manual Fit'
#| warning: false
#| output: true
fit_m_ecn <- lm(Electricity ~ CrudeOil + NaturalGas, data=elec_oil_ng)
summary(fit_m_ecn)
#| code-fold: true
#| code-summary: 'ACF-PACF'
#| warning: false
#| output: true
residuals_m_ecn <- ts(residuals(fit_m_ecn), start=start(elec_oil_ng)[1], frequency=12)
#ACF plot
acf_plot <- ggAcf(residuals_m_ecn) +
ggtitle("ACF Plot for Residulas") +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5, face = "bold"))
#PACF plot
pacf_plot <- ggPacf(residuals_m_ecn) +
ggtitle("PACF Plot for Residulas") +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5, face = "bold"))
#Arrange
grid.arrange(acf_plot, pacf_plot, nrow=2)
#| code-fold: true
#| code-summary: 'ACF-PACF'
#| warning: false
#| output: true
#ACF plot
acf_plot2 <- ggAcf(diff(residuals_m_ecn)) +
ggtitle("Diff ACF Plot for Residulas") +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5, face = "bold"))
#PACF plot
pacf_plot2 <- ggPacf(diff(residuals_m_ecn)) +
ggtitle("Diff PACF Plot for Residulas") +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5, face = "bold"))
#Arrange
grid.arrange(acf_plot2, pacf_plot2, nrow=2)
#| code-fold: true
#| code-summary: 'Manual Function'
#| warning: false
#| output: true
SARIMA.c=function(p1,p2,q1,q2,P1,P2,Q1,Q2,d1,d2,data){
temp=c()
d=1
D=1
s=12
i=1
temp= data.frame()
ls=matrix(rep(NA,9*95),nrow=95)
for (p in p1:p2)
{
for(q in q1:q2)
{
for(P in P1:P2)
{
for(Q in Q1:Q2)
{
for(d in d1:d2)
{
if(p+d+q+P+D+Q<=10)
{
model<- Arima(data,order=c(p-1,d,q-1),seasonal=c(P-1,D,Q-1))
ls[i,]= c(p-1,d,q-1,P-1,D,Q-1,model$aic,model$bic,model$aicc)
i=i+1
}
}
}
}
}
}
temp= as.data.frame(ls)
names(temp)= c("p","d","q","P","D","Q","AIC","BIC","AICc")
temp
}
output=SARIMA.c(p1=1,p2=5,q1=1,q2=4,P1=1,P2=2,Q1=1,Q2=2,d1=0,d2=1,data=residuals_m_ecn)
knitr::kable(output)
#Displaying the models with min values
output[which.min(output$AIC),]
output[which.min(output$BIC),]
output[which.min(output$AICc),]
#| code-fold: true
#| code-summary: 'Manual Model Fit'
#| warning: false
#| output: true
set.seed(222)
model_output_m_ecn <- capture.output(sarima(residuals_m_ecn, 4,0,0,0,1,1,12))
#model_output_m_ecn
cat(model_output_m_ecn[37:52], model_output_m_ecn[length(model_output_m_ecn)], sep = "\n")
#| code-fold: true
#| code-summary: 'C-V'
#| warning: false
#| output: true
suppressWarnings({
n=length(residuals_m_ecn) # 404
k=72
#n-k=332; 332/12=27;
rmse1 <- matrix(NA, 27,12)
rmse2 <- matrix(NA,27,12)
rmse3 <- matrix(NA,27,12)
err1 = c()
err2 = c()
st <- tsp(residuals_m_ecn)[1]+(k-1)/12
for(i in 1:27)
{
#xtrain <- window(a10, start=st+(i-k+1)/12, end=st+i/12)
xtrain <- window(residuals_m_ecn, end=st + i-1)
xtest <- window(residuals_m_ecn, start=st + (i-1) + 1/12, end=st + i)
# auto arima
fit <- Arima(xtrain, order=c(2,1,1), seasonal=list(order=c(0,0,2), period=12),
include.drift=TRUE, method="CSS")
fcast <- forecast(fit, h=12)
# manual model
fit2 <- Arima(xtrain, order=c(4,0,0), seasonal=list(order=c(0,1,1), period=12),
include.drift=TRUE, method="CSS")
fcast2 <- forecast(fit2, h=12)
rmse1[i,1:length(xtest)]  <- sqrt((fcast$mean-xtest)^2)
rmse2[i,1:length(xtest)] <- sqrt((fcast2$mean-xtest)^2)
## This is mean absolute error
err1 = c(err1, abs(fcast$mean-xtest))
err2 = c(err2, abs(fcast2$mean-xtest))
# This is mean squared error
err3 = c(err1, (fcast$mean-xtest)^2)
err4 = c(err2, (fcast2$mean-xtest)^2)
}
})
plot(1:12, colMeans(rmse1,na.rm=TRUE), type="l", col=2, xlab="horizon", ylab="RMSE")
lines(1:12, colMeans(rmse2,na.rm=TRUE), type="l",col=3)
legend("topleft",legend=c("Auto Arima model","Manual Model"),col=2:3,lty=1)
RMSE1 <- sqrt(mean(err3, na.rm = TRUE))
RMSE2 <- sqrt(mean(err4, na.rm = TRUE))
cat('The RMSE of Auto Arima is', RMSE1, '\n')
cat('The RMSE of Manually Selection is', RMSE2, '\n')
