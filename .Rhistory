#| warning: false
#| output: true
#Plot the residuals
plot1_log_cpi <- autoplot(resid_log_cpi_ts, series="Detrended Log CPI", colour = "#499995") +
theme_bw() +
xlab("") +
ylab("Residuals") +
ggtitle("Detrended Log CPI") +
theme(plot.title = element_text(hjust = 0.5, face = "bold"))
#Differencing plot
plot2_diff_log_cpi <- autoplot(diff(cpi_log_ts), series = "First Difference Log CPI", colour = "#99494d") +
theme_bw() +
xlab("Year") +
ylab("Differences") +
ggtitle("First Difference Log CPI") +
theme(plot.title = element_text(hjust = 0.5, face = "bold"))
#Arrange plots
grid.arrange(plot1_log_cpi, plot2_diff_log_cpi, nrow = 2)
#| code-fold: true
#| code-summary: 'Plot'
#| warning: false
#| output: true
#Plot for the original
plot1 <- ggplot(composite_crude_oil_prices, aes(x = Date, y = LOG_Value)) +
geom_line(colour = "#207068") +
theme_bw() +
xlab("Year") +
ylab("Crude Oil Prices (USD)") +
ggtitle("Original Crude Oil Prices (Log)")+
theme(plot.title = element_text(hjust = 0.5, face = "bold"))
#Calculate the first differences
composite_crude_oil_prices$Diff_Value <- c(NA, diff(composite_crude_oil_prices$LOG_Value))
composite_crude_oil_prices_filtered <- composite_crude_oil_prices %>%
filter(!is.na(Diff_Value))
#Plot for the first-differenced
plot2 <- ggplot(composite_crude_oil_prices_filtered, aes(x = Date, y = Diff_Value)) +
geom_line(colour = "#702028") +
theme_bw() +
xlab("Year") +
ylab("First Differences") +
ggtitle("First Differenced Crude Oil Data (Log)")+
theme(plot.title = element_text(hjust = 0.5, face = "bold"))
#Arrange
grid.arrange(plot1, plot2, nrow = 2)
#| code-fold: true
#| code-summary: 'Plot'
#| warning: false
#| output: true
#Plot for the original
plot1_ng <- ggplot(citygate_gas_prices, aes(x = Date, y = LOG_Value)) +
geom_line(colour = "#207068") +
theme_bw() +
xlab("Year") +
ylab("Natural Gas Prices") +
ggtitle("Original Natural Gas (Log)")+
theme(plot.title = element_text(hjust = 0.5, face = "bold"))
#Calculate the first differences
citygate_gas_prices$Diff_Value <- c(NA, diff(citygate_gas_prices$LOG_Value))
citygate_gas_prices_filtered <- citygate_gas_prices %>%
filter(!is.na(Diff_Value))
#Plot for the first-differenced
plot2_ng <- ggplot(citygate_gas_prices_filtered, aes(x = Date, y = Diff_Value)) +
geom_line(colour = "#702028") +
theme_bw() +
xlab("Year") +
ylab("First Differences") +
ggtitle("First Differenced Natural Gas (Log)")+
theme(plot.title = element_text(hjust = 0.5, face = "bold"))
# Arrange
grid.arrange(plot1_ng, plot2_ng, nrow = 2)
#| code-fold: true
#| code-summary: 'Plot'
#| warning: false
#| output: true
#Plot for the original
plot1_elec <- ggplot(total_electricity_prices, aes(x = Date, y = LOG_Value)) +
geom_line(colour = "#207068") +
theme_bw() +
xlab("Year") +
ylab("Electricity Prices (Log)") +
ggtitle("Original Electricity Data (Log)")+
theme(plot.title = element_text(hjust = 0.5, face = "bold"))
#Calculate the first differences
total_electricity_prices$Diff_Value <- c(NA, diff(total_electricity_prices$LOG_Value))
total_electricity_prices_filtered <- total_electricity_prices %>%
filter(!is.na(Diff_Value))
#Plot for the first-differenced
plot2_elec <- ggplot(total_electricity_prices_filtered, aes(x = Date, y = Diff_Value)) +
geom_line(colour = "#702028") +
theme_bw() +
xlab("Year") +
ylab("First Differences") +
ggtitle("First Differenced Electricity Data (Log)")+
theme(plot.title = element_text(hjust = 0.5, face = "bold"))
#Arrange
grid.arrange(plot1_elec, plot2_elec, nrow = 2)
#| code-fold: true
#| code-summary: 'Plot'
#| warning: false
#| output: true
#Plot for the original
plot1_gdp <- ggplot(gdp_data, aes(x = DATE, y = LOG_GDP)) +
geom_line(colour = "#207068") +
theme_bw() +
xlab("Year") +
ylab("Log of GDP") +
ggtitle("Original GDP Data (Log)")+
theme(plot.title = element_text(hjust = 0.5, face = "bold"))
#Calculate the first differences
gdp_data$Diff_GDP <- c(NA, diff(gdp_data$LOG_GDP))
gdp_data_filtered <- gdp_data %>%
filter(!is.na(Diff_GDP))
#Plot for the first-differenced
plot2_gdp <- ggplot(gdp_data_filtered, aes(x = DATE, y = Diff_GDP)) +
geom_line(colour = "#702028") +
theme_bw() +
xlab("Year") +
ylab("First Differences") +
ggtitle("First Differenced GDP (Log)")+
theme(plot.title = element_text(hjust = 0.5, face = "bold"))
#Arrange
grid.arrange(plot1_gdp, plot2_gdp, nrow = 2)
#| code-fold: true
#| code-summary: 'Plot'
#| warning: false
#| output: true
#Plot for the original
plot1_cpi <- ggplot(cpi_data, aes(x = DATE, y = LOG_CPI)) +
geom_line(colour = "#207068") +
theme_bw() +
xlab("Year") +
ylab("CPI") +
ggtitle("Original CPI Data (Log)")+
theme(plot.title = element_text(hjust = 0.5, face = "bold"))
#Calculate the first differences
cpi_data$Diff_CPI <- c(NA, diff(cpi_data$LOG_CPI))
cpi_data_filtered <- cpi_data %>%
filter(!is.na(Diff_CPI))
#Plot for the first-differenced
plot2_cpi <- ggplot(cpi_data_filtered, aes(x = DATE, y = Diff_CPI)) +
geom_line(colour = "#702028") +
theme_bw() +
xlab("Year") +
ylab("First Differences") +
ggtitle("First Differenced CPI Data (Log)")+
theme(plot.title = element_text(hjust = 0.5, face = "bold"))
#Arrange
grid.arrange(plot1_cpi, plot2_cpi, nrow = 2)
#| code-fold: true
#| code-summary: 'ADF Test'
#| warning: false
#| output: true
#First difference
diff_crude_oil_ts <- diff(oil_log_ts, differences = 1)
#Applying ADF test to the differenced time series
adf_test_diff_crude_oil <- suppressWarnings(
adf.test(diff_crude_oil_ts, alternative = "stationary"))
#Display the test results
print(adf_test_diff_crude_oil)
#| code-fold: true
#| code-summary: 'ADF Test'
#| warning: false
#| output: true
#First difference
diff_citygate_gas_ts <- diff(gas_log_ts, differences = 1)
diff_citygate_gas_ts <- na.omit(diff_citygate_gas_ts)
#Applying ADF test to the differenced time series
adf_test_diff_natural_gas <- suppressWarnings(
adf.test(diff_citygate_gas_ts, alternative = "stationary"))
#Display the test results
adf_test_diff_natural_gas
#| code-fold: true
#| code-summary: 'ADF Test'
#| warning: false
#| output: true
#First difference
diff_total_electricity_ts <- diff(electricity_log_ts, differences = 1)
diff_total_electricity_ts <- na.omit(diff_total_electricity_ts)
#Applying ADF test to the differenced time series
adf_test_diff_electricity <- suppressWarnings(
adf.test(diff_total_electricity_ts, alternative = "stationary"))
#Display the test results
print(adf_test_diff_electricity)
#| code-fold: true
#| code-summary: 'ADF Test'
#| warning: false
#| output: true
#First difference
diff_gdp_ts <- diff(gdp_log_ts, differences = 1)
diff_gdp_ts <- na.omit(diff_gdp_ts)
#Applying ADF test to the differenced time series
adf_test_diff_gdp <- suppressWarnings(
adf.test(diff_gdp_ts, alternative = "stationary"))
# Display the test results
print(adf_test_diff_gdp)
#| code-fold: true
#| code-summary: 'ADF Test'
#| warning: false
#| output: true
#First difference
diff_cpi_ts <- diff(cpi_log_ts, differences = 1)
diff_cpi_ts <- na.omit(diff_cpi_ts)
#Applying ADF test to the differenced time series
adf_test_diff_cpi <- suppressWarnings(
adf.test(diff_cpi_ts, alternative = "stationary"))
# Display the test results
print(adf_test_diff_cpi)
#| code-fold: true
#| code-summary: 'Plot'
#| warning: false
#| output: true
# First Differencing
first_diff_crude_oil <- diff(oil_log_ts)
ggtsdisplay(first_diff_crude_oil, main = "First Differencing of Crude Oil Prices (Log)")
# Second Differencing
second_diff_crude_oil <- diff(first_diff_crude_oil)
ggtsdisplay(second_diff_crude_oil, main = "Second Differencing of Crude Oil Prices (Log)")
#| code-fold: true
#| code-summary: 'Plot'
#| warning: false
#| output: true
# First Differencing
first_diff_natural_gas <- diff(gas_log_ts)
ggtsdisplay(first_diff_natural_gas, main = "First Differencing of Natural Gas Prices (Log)")
# Second Differencing
second_diff_natural_gas <- diff(first_diff_natural_gas)
ggtsdisplay(second_diff_natural_gas, main = "Second Differencing of Natural Gas Prices (Log)")
#| code-fold: true
#| code-summary: 'Plot'
#| warning: false
#| output: true
# First Differencing
first_diff_electricity <- diff(electricity_log_ts)
ggtsdisplay(first_diff_electricity, main = "First Differencing of Electricity Prices (Log)")
# Second Differencing
second_diff_electricity <- diff(first_diff_electricity)
ggtsdisplay(second_diff_electricity, main = "Second Differencing of Electricity Prices (Log)")
#| code-fold: true
#| code-summary: 'Plot'
#| warning: false
#| output: true
# First Differencing
first_diff_gdp <- diff(gdp_log_ts)
ggtsdisplay(first_diff_gdp, main = "First Differencing of GDP")
# Second Differencing
second_diff_gdp <- diff(first_diff_gdp)
ggtsdisplay(second_diff_gdp, main = "Second Differencing of GDP")
#| code-fold: true
#| code-summary: 'Plot'
#| warning: false
#| output: true
# First Differencing
first_diff_cpi <- diff(cpi_log_ts)
ggtsdisplay(first_diff_cpi, main = "First Differencing of CPI")
# Second Differencing
second_diff_cpi <- diff(first_diff_cpi)
ggtsdisplay(second_diff_cpi, main = "Second Differencing of CPI")
#| code-fold: true
#| code-summary: 'AIC-BIC'
#| warning: false
#| output: true
d <- 1 # Degree of differencing
temp <- data.frame()
ls <- matrix(rep(NA, 6 * 8), nrow = 8)  # 8 combinations
i <- 1
for (p in 1:2) {
for (q in 1:4) {
if(p-1+d+q-1<=8) {
model <- Arima(oil_log_ts, order = c(p, d, q), include.drift = TRUE)
ls[i,] <- c(p, d, q, model$aic, model$bic, model$aicc)
i <- i + 1
}
}
}
temp= as.data.frame(ls)
names(temp)= c("p","d","q","AIC","BIC","AICc")
knitr::kable(temp)
#Displaying the models with min values
temp[which.min(temp$AIC),]
temp[which.min(temp$BIC),]
temp[which.min(temp$AICc),]
#| code-fold: true
#| code-summary: 'AIC-BIC'
#| warning: false
#| output: true
d <- 1 # Degree of differencing
temp <- data.frame()
ls <- matrix(rep(NA, 6 * 9), nrow = 9)  #  9 combinations: p (3 options) * q (3 options)
i <- 1
for (p in 1:3) {
for (q in 1:3) {
if(p-1+d+q-1<=8) {
model <- Arima(gas_log_ts, order = c(p, d, q), include.drift = TRUE)
ls[i,] <- c(p, d, q, model$aic, model$bic, model$aicc)
i <- i + 1
}
}
}
temp= as.data.frame(ls)
names(temp)= c("p","d","q","AIC","BIC","AICc")
#Displaying the table
knitr::kable(temp)
#Displaying the models with min values
temp[which.min(temp$AIC),]
temp[which.min(temp$BIC),]
temp[which.min(temp$AICc),]
#| code-fold: true
#| code-summary: 'AIC-BIC'
#| warning: false
#| output: true
d <- 1 # Degree of differencing
temp <- data.frame()
ls <- matrix(rep(NA, 6 * 36), nrow = 36)  # p (12 options) * q (9 options) = 108 combinations - threshold
i <- 1
for (p in 1:12) {
for (q in 1:9) {
if(p-1+d+q-1<=8) {
model <- Arima(electricity_log_ts, order = c(p, d, q), include.drift = TRUE)
ls[i,] <- c(p, d, q, model$aic, model$bic, model$aicc)
i <- i + 1
}
}
}
temp= as.data.frame(ls)
names(temp)= c("p","d","q","AIC","BIC","AICc")
#Displaying the table
knitr::kable(temp)
#Displaying the models with min values
temp[which.min(temp$AIC),]
temp[which.min(temp$BIC),]
temp[which.min(temp$AICc),]
#| code-fold: true
#| code-summary: 'AIC-BIC'
#| warning: false
#| output: true
d <- 1 # Degree of differencing
temp <- data.frame()
ls <- matrix(rep(NA, 6 * 9), nrow = 9)  # p (3 options) * q (3 options) = 9 combinations
i <- 1
for (p in 1:3) {
for (q in 1:3) {
if(p-1+d+q-1<=8) {
model <- Arima(gdp_log_ts, order = c(p, d, q), include.drift = TRUE)
ls[i,] <- c(p, d, q, model$aic, model$bic, model$aicc)
i <- i + 1
}
}
}
temp= as.data.frame(ls)
names(temp)= c("p","d","q","AIC","BIC","AICc")
#Displaying the table
knitr::kable(temp)
#Displaying the models with min values
temp[which.min(temp$AIC),]
temp[which.min(temp$BIC),]
temp[which.min(temp$AICc),]
#| code-fold: true
#| code-summary: 'AIC-BIC'
#| warning: false
#| output: true
d <- 1 # Degree of differencing
temp <- data.frame()
ls <- matrix(rep(NA, 6 * 36), nrow = 36)
i <- 1
for (p in 1:12) {
for (q in 1:9) {
if (p-1+d+q-1<=8) {
model <- Arima(cpi_log_ts, order = c(p, d, q), include.drift = TRUE)
ls[i,] <- c(p, d, q, model$aic, model$bic, model$aicc)
i <- i + 1
}
}
}
temp= as.data.frame(ls)
names(temp)= c("p","d","q","AIC","BIC","AICc")
#Displaying the table
knitr::kable(temp)
#Displaying the models with min values
temp[which.min(temp$AIC),]
temp[which.min(temp$BIC),]
temp[which.min(temp$AICc),]
#| code-fold: true
#| code-summary: 'Fitting ARIMA'
#| warning: false
#| output: true
#Fitting ARIMA
fit_crudeoil <- Arima(diff(oil_log_ts), order=c(2, 1, 1),include.drift = TRUE)
summary(fit_crudeoil)
#| code-fold: true
#| code-summary: 'Fitting ARIMA'
#| warning: false
#| output: true
#Fitting ARIMA
fit_NaturalGas <- Arima(diff(gas_log_ts), order=c(3, 1, 1),include.drift = TRUE)
summary(fit_NaturalGas)
#| code-fold: true
#| code-summary: 'Fitting ARIMA'
#| warning: false
#| output: true
#Fitting ARIMA
fit_electricity <- Arima(diff(electricity_log_ts), order=c(4, 1, 4),include.drift = TRUE)
summary(fit_electricity)
#| code-fold: true
#| code-summary: 'Fitting ARIMA'
#| warning: false
#| output: true
#Fitting ARIMA
fit_gdp_a <- Arima(diff(gdp_log_ts), order=c(1, 1, 1),include.drift = TRUE)
summary(fit_gdp_a)
#| code-fold: true
#| code-summary: 'Fitting ARIMA'
#| warning: false
#| output: true
#Fitting ARIMA
fit_cpi_a <- Arima(diff(cpi_log_ts), order=c(3, 1, 2),include.drift = TRUE)
summary(fit_cpi_a)
#| code-fold: true
#| code-summary: 'Fitting ARIMA'
#| warning: false
#| output: true
#Fitting ARIMA
fit_crudeoil2 <- Arima(diff(oil_log_ts), order=c(2, 1, 2),include.drift = TRUE)
summary(fit_crudeoil2)
#| code-fold: true
#| code-summary: 'Fitting ARIMA'
#| warning: false
#| output: true
#Fitting ARIMA
fit_NaturalGas2 <- Arima(diff(gas_log_ts), order=c(1, 1, 1),include.drift = TRUE)
summary(fit_NaturalGas2)
#| code-fold: true
#| code-summary: 'Fitting ARIMA'
#| warning: false
#| output: true
#Fitting ARIMA
fit_electricity2 <- Arima(diff(electricity_log_ts), order=c(7, 1, 2),include.drift = TRUE)
summary(fit_electricity2)
#| code-fold: true
#| code-summary: 'Fitting ARIMA'
#| warning: false
#| output: true
#Fitting ARIMA
fit_gdp_a2 <- Arima(diff(gdp_log_ts), order=c(3, 1, 2),include.drift = TRUE)
summary(fit_gdp_a2)
#| code-fold: true
#| code-summary: 'Fitting ARIMA'
#| warning: false
#| output: true
#Fitting ARIMA
fit_cpi_a2 <- Arima(diff(cpi_log_ts), order=c(3, 1, 3),include.drift = TRUE)
summary(fit_cpi_a2)
#| code-fold: true
#| code-summary: 'Importing Libraries'
#| warning: false
#| output: true
set.seed(222)
diag_crudeoil <- capture.output(sarima(oil_log_ts, 2,1,2))
#| code-fold: true
#| code-summary: 'Importing Libraries'
#| warning: false
#| output: true
auto.arima(oil_log_ts)
#| code-fold: true
#| code-summary: 'Importing Libraries'
#| warning: false
#| output: true
fit_crudeoil2 %>% forecast(h=36) %>% autoplot()
#| code-fold: true
#| code-summary: 'Importing Libraries'
#| warning: false
#| output: true
autoplot(oil_log_ts) +
autolayer(meanf(oil_log_ts, h=36),
series="Mean", PI=FALSE) +
autolayer(naive(oil_log_ts, h=36),
series="Naïve", PI=FALSE) +
autolayer(snaive(oil_log_ts, h=36),
series="SNaïve", PI=FALSE)+
autolayer(rwf(oil_log_ts, h=36, drift=TRUE),
series="Drift", PI=FALSE)+
autolayer(forecast(fit_crudeoil2,36),
series="fit",PI=FALSE) +
guides(colour=guide_legend(title="Forecast"))
#| code-fold: true
#| code-summary: 'Importing Libraries'
#| warning: false
#| output: true
set.seed(222)
diag_cpi <- capture.output(sarima(cpi_log_ts, 3,1,3))
#| code-fold: true
#| code-summary: 'Importing Libraries'
#| warning: false
#| output: true
#|
fit_cpi_a2 %>% forecast() %>% autoplot()
#| code-fold: true
#| code-summary: 'Importing Libraries'
#| warning: false
#| output: true
#|
autoplot(cpi_log_ts) +
autolayer(meanf(cpi_log_ts, h=36),
series="Mean", PI=FALSE) +
autolayer(naive(cpi_log_ts, h=36),
series="Naïve", PI=FALSE) +
autolayer(snaive(cpi_log_ts, h=36),
series="SNaïve", PI=FALSE)+
autolayer(rwf(cpi_log_ts, h=36, drift=TRUE),
series="Drift", PI=FALSE)+
autolayer(forecast(fit_cpi_a2,36),
series="fit",PI=FALSE) +
guides(colour=guide_legend(title="Forecast"))
