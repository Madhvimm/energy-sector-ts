gdp_data$Diff_GDP <- c(NA, diff(gdp_data$LOG_GDP))
#Plot for the first-differenced
plot2_gdp <- ggplot(gdp_data, aes(x = DATE, y = Diff_GDP)) +
geom_line(colour = "#702028") +
theme_bw() +
xlab("Time") +
ylab("First Differences") +
ggtitle("First Differenced GDP (Log)")+
theme(plot.title = element_text(hjust = 0.5, face = "bold"))
#Arrange
grid.arrange(plot1_gdp, plot2_gdp, nrow = 2)
#| code-fold: true
#| code-summary: 'Plot'
#| warning: false
#| output: true
#Plot for the original
plot1_cpi <- ggplot(cpi_data, aes(x = DATE, y = LOG_CPI)) +
geom_line(colour = "#207068") +
theme_bw() +
xlab("Time") +
ylab("CPI") +
ggtitle("Original CPI Data (Log)")+
theme(plot.title = element_text(hjust = 0.5, face = "bold"))
#Calculate the first differences
cpi_data$Diff_CPI <- c(NA, diff(cpi_data$LOG_CPI))
#Plot for the first-differenced
plot2_cpi <- ggplot(cpi_data, aes(x = DATE, y = Diff_CPI)) +
geom_line(colour = "#702028") +
theme_bw() +
xlab("Time") +
ylab("First Differences") +
ggtitle("First Differenced CPI Data (Log)")+
theme(plot.title = element_text(hjust = 0.5, face = "bold"))
#Arrange
grid.arrange(plot1_cpi, plot2_cpi, nrow = 2)
#| code-fold: true
#| code-summary: 'ADF Test'
#| warning: false
#| output: true
#First difference
diff_crude_oil_ts <- diff(composite_crude_oil_ts, differences = 1)
#Applying ADF test to the differenced time series
adf_test_diff_crude_oil <- adf.test(diff_crude_oil_ts, alternative = "stationary")
#Display the test results
print(adf_test_diff_crude_oil)
#| code-fold: true
#| code-summary: 'ADF Test'
#| warning: false
#| output: true
#First difference
diff_citygate_gas_ts <- diff(citygate_gas_ts, differences = 1)
diff_citygate_gas_ts <- na.omit(diff_citygate_gas_ts)
#Applying ADF test to the differenced time series
adf_test_diff_natural_gas <- adf.test(diff_citygate_gas_ts, alternative = "stationary")
#Display the test results
print(adf_test_diff_natural_gas)
#| code-fold: true
#| code-summary: 'ADF Test'
#| warning: false
#| output: true
#First difference
diff_total_electricity_ts <- diff(total_electricity_ts, differences = 1)
diff_total_electricity_ts <- na.omit(diff_total_electricity_ts)
#Applying ADF test to the differenced time series
adf_test_diff_electricity <- adf.test(diff_total_electricity_ts, alternative = "stationary")
#Display the test results
print(adf_test_diff_electricity)
#| code-fold: true
#| code-summary: 'ADF Test'
#| warning: false
#| output: true
#First difference
diff_gdp_ts <- diff(gdp_ts, differences = 1)
diff_gdp_ts <- na.omit(diff_gdp_ts)
#Applying ADF test to the differenced time series
adf_test_diff_gdp <- adf.test(diff_gdp_ts, alternative = "stationary")
# Display the test results
print(adf_test_diff_gdp)
#| code-fold: true
#| code-summary: 'ADF Test'
#| warning: false
#| output: true
#First difference
diff_cpi_ts <- diff(cpi_ts, differences = 1)
diff_cpi_ts <- na.omit(diff_cpi_ts)
#Applying ADF test to the differenced time series
adf_test_diff_cpi <- adf.test(diff_cpi_ts, alternative = "stationary")
# Display the test results
print(adf_test_diff_cpi)
#| code-fold: true
#| code-summary: 'Plot'
#| warning: false
#| output: true
# First Differencing
first_diff_crude_oil <- diff(composite_crude_oil_ts)
ggtsdisplay(first_diff_crude_oil, main = "First Differencing of Crude Oil Prices")
# Second Differencing
second_diff_crude_oil <- diff(first_diff_crude_oil)
ggtsdisplay(second_diff_crude_oil, main = "Second Differencing of Crude Oil Prices")
#| code-fold: true
#| code-summary: 'Plot'
#| warning: false
#| output: true
# First Differencing
first_diff_natural_gas <- diff(citygate_gas_ts)
ggtsdisplay(first_diff_natural_gas, main = "First Differencing of Natural Gas Prices")
# Second Differencing
second_diff_natural_gas <- diff(first_diff_natural_gas)
ggtsdisplay(second_diff_natural_gas, main = "Second Differencing of Natural Gas Prices")
#| code-fold: true
#| code-summary: 'Plot'
#| warning: false
#| output: true
# First Differencing
first_diff_electricity <- diff(total_electricity_ts)
ggtsdisplay(first_diff_electricity, main = "First Differencing of Electricity Prices")
# Second Differencing
second_diff_electricity <- diff(first_diff_electricity)
ggtsdisplay(second_diff_electricity, main = "Second Differencing of Electricity Prices")
#| code-fold: true
#| code-summary: 'Plot'
#| warning: false
#| output: true
# First Differencing
first_diff_gdp <- diff(gdp_ts)
ggtsdisplay(first_diff_gdp, main = "First Differencing of GDP")
# Second Differencing
second_diff_gdp <- diff(first_diff_gdp)
ggtsdisplay(second_diff_gdp, main = "Second Differencing of GDP")
#| code-fold: true
#| code-summary: 'Plot'
#| warning: false
#| output: true
# First Differencing
first_diff_cpi <- diff(cpi_ts)
ggtsdisplay(first_diff_cpi, main = "First Differencing of CPI")
# Second Differencing
second_diff_cpi <- diff(first_diff_cpi)
ggtsdisplay(second_diff_cpi, main = "Second Differencing of CPI")
#| code-fold: true
#| code-summary: 'AIC-BIC'
#| warning: false
#| output: true
d <- 1 # Degree of differencing
temp <- data.frame()
ls <- matrix(rep(NA, 6 * 18), nrow = 18)  # 18 combinations
i <- 1
for (p in 0:2) {
for (q in 0:5) {
if(p-1+d+q-1<=8) {
model <- Arima(composite_crude_oil_ts, order = c(p, d, q), include.drift = TRUE)
ls[i,] <- c(p, d, q, model$aic, model$bic, model$aicc)
i <- i + 1
}
}
}
temp= as.data.frame(ls)
names(temp)= c("p","d","q","AIC","BIC","AICc")
knitr::kable(temp)
#Displaying the models with min values
temp[which.min(temp$AIC),]
temp[which.min(temp$BIC),]
temp[which.min(temp$AICc),]
#| code-fold: true
#| code-summary: 'AIC-BIC'
#| warning: false
#| output: true
d <- 1 # Degree of differencing
temp <- data.frame()
ls <- matrix(rep(NA, 6 * 9), nrow = 9)  #  9 combinations: p (3 options) * q (3 options)
i <- 1
for (p in 0:2) {
for (q in 1:3) {
if(p-1+d+q-1<=8) {
model <- Arima(citygate_gas_ts, order = c(p, d, q), include.drift = TRUE)
ls[i,] <- c(p, d, q, model$aic, model$bic, model$aicc)
i <- i + 1
}
}
}
temp= as.data.frame(ls)
names(temp)= c("p","d","q","AIC","BIC","AICc")
#Displaying the table
knitr::kable(temp)
#Displaying the models with min values
temp[which.min(temp$AIC),]
temp[which.min(temp$BIC),]
temp[which.min(temp$AICc),]
#| code-fold: true
#| code-summary: 'AIC-BIC'
#| warning: false
#| output: true
d <- 1 # Degree of differencing
temp <- data.frame()
ls <- matrix(rep(NA, 6 * 12), nrow = 12)  # p (3 options) * q (4 options) = 12 combinations
i <- 1
for (p in 0:2) {
for (q in 1:4) {
if(p-1+d+q-1<=8) {
model <- Arima(total_electricity_ts, order = c(p, d, q), include.drift = TRUE)
ls[i,] <- c(p, d, q, model$aic, model$bic, model$aicc)
i <- i + 1
}
}
}
temp= as.data.frame(ls)
names(temp)= c("p","d","q","AIC","BIC","AICc")
#Displaying the table
knitr::kable(temp)
#Displaying the models with min values
temp[which.min(temp$AIC),]
temp[which.min(temp$BIC),]
temp[which.min(temp$AICc),]
#| code-fold: true
#| code-summary: 'AIC-BIC'
#| warning: false
#| output: true
d <- 1 # Degree of differencing
temp <- data.frame()
ls <- matrix(rep(NA, 6 * 6), nrow = 6)  # p (2 options) * q (3 options) = 6 combinations
i <- 1
for (p in 1:2) {
for (q in 1:3) {
if(p-1+d+q-1<=8) {
model <- Arima(gdp_ts, order = c(p, d, q), include.drift = TRUE)
ls[i,] <- c(p, d, q, model$aic, model$bic, model$aicc)
i <- i + 1
}
}
}
temp= as.data.frame(ls)
names(temp)= c("p","d","q","AIC","BIC","AICc")
#Displaying the table
knitr::kable(temp)
#Displaying the models with min values
temp[which.min(temp$AIC),]
temp[which.min(temp$BIC),]
temp[which.min(temp$AICc),]
#| code-fold: true
#| code-summary: 'AIC-BIC'
#| warning: false
#| output: true
d <- 1 # Degree of differencing
temp <- data.frame()
ls <- matrix(rep(NA, 6 * 33), nrow = 33)
i <- 1
for (p in 1:6) {
for (q in 1:9) {
if (p-1+d+q-1<=8) {
model <- Arima(cpi_ts, order = c(p, d, q), include.drift = TRUE)
ls[i,] <- c(p, d, q, model$aic, model$bic, model$aicc)
i <- i + 1
}
}
}
temp= as.data.frame(ls)
names(temp)= c("p","d","q","AIC","BIC","AICc")
#Displaying the table
knitr::kable(temp)
#Displaying the models with min values
temp[which.min(temp$AIC),]
temp[which.min(temp$BIC),]
temp[which.min(temp$AICc),]
#| code-fold: true
#| code-summary: 'Fitting ARIMA'
#| warning: false
#| output: true
#Fitting ARIMA
fit_crudeoil <- Arima(diff(composite_crude_oil_ts), order=c(2, 1, 4),include.drift = TRUE)
summary(fit_crudeoil)
#| code-fold: true
#| code-summary: 'Fitting ARIMA'
#| warning: false
#| output: true
#Fitting ARIMA
fit_NaturalGas <- Arima(diff(citygate_gas_ts), order=c(2, 1, 1),include.drift = TRUE)
summary(fit_NaturalGas)
#| code-fold: true
#| code-summary: 'Fitting ARIMA'
#| warning: false
#| output: true
#Fitting ARIMA
fit_electricity <- Arima(diff(total_electricity_ts), order=c(2, 1, 2),include.drift = TRUE)
summary(fit_electricity)
#| code-fold: true
#| code-summary: 'Fitting ARIMA'
#| warning: false
#| output: true
#Fitting ARIMA
fit_gdp_a <- Arima(diff(gdp_ts), order=c(1, 1, 2),include.drift = TRUE)
summary(fit_gdp_a)
#| code-fold: true
#| code-summary: 'Fitting ARIMA'
#| warning: false
#| output: true
#Fitting ARIMA
fit_cpi_a <- Arima(diff(cpi_ts), order=c(3, 1, 4),include.drift = TRUE)
summary(fit_cpi_a)
#| code-fold: true
#| code-summary: 'Fitting ARIMA'
#| warning: false
#| output: true
#Fitting ARIMA
fit_crudeoil2 <- Arima(diff(composite_crude_oil_ts), order=c(2, 1, 1),include.drift = TRUE)
summary(fit_crudeoil2)
#| code-fold: true
#| code-summary: 'Fitting ARIMA'
#| warning: false
#| output: true
#Fitting ARIMA
fit_NaturalGas2 <- Arima(diff(citygate_gas_ts), order=c(0, 1, 1),include.drift = TRUE)
summary(fit_NaturalGas2)
#| code-fold: true
#| code-summary: 'Fitting ARIMA'
#| warning: false
#| output: true
#Fitting ARIMA
fit_electricity2 <- Arima(diff(total_electricity_ts), order=c(2, 1, 4),include.drift = TRUE)
summary(fit_electricity2)
#| code-fold: true
#| code-summary: 'Fitting ARIMA'
#| warning: false
#| output: true
#Fitting ARIMA
fit_gdp_a2 <- Arima(diff(gdp_ts), order=c(1, 1, 1),include.drift = TRUE)
summary(fit_gdp_a2)
#| code-fold: true
#| code-summary: 'Fitting ARIMA'
#| warning: false
#| output: true
#Fitting ARIMA
fit_cpi_a2 <- Arima(diff(cpi_ts), order=c(1, 1, 2),include.drift = TRUE)
summary(fit_cpi_a2)
#| code-fold: true
#| code-summary: 'Importing Libraries'
#| warning: false
#| output: true
set.seed(222)
diag_crudeoil <- capture.output(sarima(composite_crude_oil_ts, 2,1,4))
#| code-fold: true
#| code-summary: 'Importing Libraries'
#| warning: false
#| output: true
set.seed(222)
diag_ng <- capture.output(sarima(citygate_gas_ts, 2,1,1))
#| code-fold: true
#| code-summary: 'Importing Libraries'
#| warning: false
#| output: true
set.seed(222)
diag_electricity <- capture.output(sarima(total_electricity_ts, 2,1,2))
#| code-fold: true
#| code-summary: 'Importing Libraries'
#| warning: false
#| output: true
set.seed(222)
diag_gdp <- capture.output(sarima(gdp_ts, 1,1,2))
#| code-fold: true
#| code-summary: 'Importing Libraries'
#| warning: false
#| output: true
set.seed(222)
diag_cpi <- capture.output(sarima(cpi_ts, 1,1,2))
#| code-fold: true
#| code-summary: 'Importing Libraries'
#| warning: false
#| output: true
auto.arima(composite_crude_oil_ts)
#| code-fold: true
#| code-summary: 'Importing Libraries'
#| warning: false
#| output: true
auto.arima(citygate_gas_ts)
#| code-fold: true
#| code-summary: 'Importing Libraries'
#| warning: false
#| output: true
auto.arima(total_electricity_ts)
#| code-fold: true
#| code-summary: 'Importing Libraries'
#| warning: false
#| output: true
auto.arima(gdp_ts)
#| code-fold: true
#| code-summary: 'Importing Libraries'
#| warning: false
#| output: true
auto.arima((cpi_ts))
#| code-fold: true
#| code-summary: 'Importing Libraries'
#| warning: false
#| output: true
fit_crudeoil %>% forecast(h=36) %>% autoplot()
#| code-fold: true
#| code-summary: 'Importing Libraries'
#| warning: false
#| output: true
fit_NaturalGas %>% forecast(h=36) %>% autoplot()
#| code-fold: true
#| code-summary: 'Importing Libraries'
#| warning: false
#| output: true
fit_electricity %>% forecast(h=36) %>% autoplot()
#| code-fold: true
#| code-summary: 'Importing Libraries'
#| warning: false
#| output: true
fit_gdp_a %>% forecast(h=36) %>% autoplot()
#| code-fold: true
#| code-summary: 'Importing Libraries'
#| warning: false
#| output: true
#|
fit_cpi_a %>% forecast() %>% autoplot()
#| code-fold: true
#| code-summary: 'Importing Libraries'
#| warning: false
#| output: true
autoplot(composite_crude_oil_ts) +
autolayer(meanf(composite_crude_oil_ts, h=36),
series="Mean", PI=FALSE) +
autolayer(naive(composite_crude_oil_ts, h=36),
series="Naïve", PI=FALSE) +
autolayer(snaive(composite_crude_oil_ts, h=36),
series="SNaïve", PI=FALSE)+
autolayer(rwf(composite_crude_oil_ts, h=36, drift=TRUE),
series="Drift", PI=FALSE)+
autolayer(forecast(fit_crudeoil,36),
series="fit",PI=FALSE) +
guides(colour=guide_legend(title="Forecast"))
#| code-fold: true
#| code-summary: 'Importing Libraries'
#| warning: false
#| output: true
autoplot(citygate_gas_ts) +
autolayer(meanf(citygate_gas_ts, h=36),
series="Mean", PI=FALSE) +
autolayer(naive(citygate_gas_ts, h=36),
series="Naïve", PI=FALSE) +
autolayer(snaive(citygate_gas_ts, h=36),
series="SNaïve", PI=FALSE)+
autolayer(rwf(citygate_gas_ts, h=36, drift=TRUE),
series="Drift", PI=FALSE)+
autolayer(forecast(fit_NaturalGas,36),
series="fit",PI=FALSE) +
guides(colour=guide_legend(title="Forecast"))
#| code-fold: true
#| code-summary: 'Importing Libraries'
#| warning: false
#| output: true
autoplot(total_electricity_ts) +
autolayer(meanf(total_electricity_ts, h=36),
series="Mean", PI=FALSE) +
autolayer(naive(total_electricity_ts, h=36),
series="Naïve", PI=FALSE) +
autolayer(snaive(total_electricity_ts, h=36),
series="SNaïve", PI=FALSE)+
autolayer(rwf(total_electricity_ts, h=36, drift=TRUE),
series="Drift", PI=FALSE)+
autolayer(forecast(fit_electricity,36),
series="fit",PI=FALSE) +
guides(colour=guide_legend(title="Forecast"))
#| code-fold: true
#| code-summary: 'Importing Libraries'
#| warning: false
#| output: true
autoplot(gdp_ts) +
autolayer(meanf(gdp_ts, h=36),
series="Mean", PI=FALSE) +
autolayer(naive(gdp_ts, h=36),
series="Naïve", PI=FALSE) +
autolayer(snaive(gdp_ts, h=36),
series="SNaïve", PI=FALSE)+
autolayer(rwf(gdp_ts, h=36, drift=TRUE),
series="Drift", PI=FALSE)+
autolayer(forecast(fit_gdp_a,36),
series="fit",PI=FALSE) +
guides(colour=guide_legend(title="Forecast"))
#| code-fold: true
#| code-summary: 'Importing Libraries'
#| warning: false
#| output: true
#|
autoplot(cpi_ts) +
autolayer(meanf(cpi_ts, h=36),
series="Mean", PI=FALSE) +
autolayer(naive(cpi_ts, h=36),
series="Naïve", PI=FALSE) +
autolayer(snaive(cpi_ts, h=36),
series="SNaïve", PI=FALSE)+
autolayer(rwf(cpi_ts, h=36, drift=TRUE),
series="Drift", PI=FALSE)+
autolayer(forecast(fit_cpi_a,36),
series="fit",PI=FALSE) +
guides(colour=guide_legend(title="Forecast"))
#| code-fold: true
#| code-summary: 'Importing Libraries'
#| warning: false
#| output: false
library(ggplot2)
library(readr)
library(tidyverse)
library(lubridate)
library(forecast)
library(tseries)
library(plotly)
library(gridExtra)
library(zoo)
library(astsa)
library(ggplot2)
library(zoo)
library(plotly)
