#| output: true
#Generate forecasts
forecast_meanf <- meanf(oil_log_ts, h=36)
forecast_naive <- naive(oil_log_ts, h=36)
forecast_snaive <- snaive(oil_log_ts, h=36)
forecast_rwf <- rwf(oil_log_ts, drift=TRUE, h=36)
forecast_arima <- forecast(fit_crudeoil2, h=36)
#Plotting the forecasts
autoplot(oil_log_ts, series="Data") +
autolayer(forecast_meanf, series="Mean Forecast", PI=FALSE) +
autolayer(forecast_naive, series="Naive Forecast", PI=FALSE) +
autolayer(forecast_snaive, series="Seasonal Naive Forecast", PI=FALSE) +
autolayer(forecast_rwf, series="Drift", PI=FALSE) +
autolayer(forecast_arima, series="ARIMA(2,1,2) Forecast", PI=FALSE) +
labs(title="Comparative Forecast for Crude Oil Prices",
x="Year", y="Logged Prices",
caption="Comparing ARIMA(2,1,2) with Benchmark Methods") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5, face = "bold")) +
guides(colour=guide_legend(title="Forecast Method")) +
scale_color_manual(values=c("Data"="#000000", "Mean Forecast"="red",
"Naive Forecast"="green", "Seasonal Naive Forecast"="purple",
"Drift"="orange", "ARIMA(2,1,2) Forecast"="blue"),
breaks=c("Data", "Mean Forecast", "Naive Forecast",
"Seasonal Naive Forecast", "Drift", "ARIMA(2,1,2) Forecast"))
accuracy(forecast_crudeoil2)
#| code-fold: true
#| code-summary: 'Comparing Benchmark'
#| warning: false
#| output: true
#Generate forecasts
forecast_meanf_ng <- meanf(gas_log_ts, h=36)
forecast_naive_ng <- naive(gas_log_ts, h=36)
forecast_snaive_ng <- snaive(gas_log_ts, h=36)
forecast_rwf_ng <- rwf(gas_log_ts, drift=TRUE, h=36)
forecast_arima_ng <- forecast(fit_NaturalGas, h=36)
#Plotting the forecasts
autoplot(gas_log_ts, series="Data") +
autolayer(forecast_meanf_ng, series="Mean Forecast", PI=FALSE) +
autolayer(forecast_naive_ng, series="Naive Forecast", PI=FALSE) +
autolayer(forecast_snaive_ng, series="Seasonal Naive Forecast", PI=FALSE) +
autolayer(forecast_rwf_ng, series="Drift", PI=FALSE) +
autolayer(forecast_arima_ng, series="ARIMA(3,1,1) Forecast", PI=FALSE) +
labs(title="Comparative Forecast for Natural Gas Prices",
x="Year", y="Logged Prices",
caption="Comparing ARIMA(3,1,1) with Benchmark Methods") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5, face = "bold")) +
guides(colour=guide_legend(title="Forecast Method")) +
scale_color_manual(values=c("Data"="#000000", "Mean Forecast"="red",
"Naive Forecast"="green", "Seasonal Naive Forecast"="purple",
"Drift"="orange", "ARIMA(3,1,1) Forecast"="blue"),
breaks=c("Data", "Mean Forecast", "Naive Forecast",
"Seasonal Naive Forecast", "Drift", "ARIMA(3,1,1) Forecast"))
accuracy(forecast_arima_ng)
#| code-fold: true
#| code-summary: 'Comparing Benchmark'
#| warning: false
#| output: true
#Generate forecasts
forecast_meanf_elec <- meanf(electricity_log_ts, h=36)
forecast_naive_elec <- naive(electricity_log_ts, h=36)
forecast_snaive_elec <- snaive(electricity_log_ts, h=36)
forecast_rwf_elec <- rwf(electricity_log_ts, drift=TRUE, h=36)
forecast_arima_elec <- forecast(fit_electricity, h=36)
#Plotting the forecasts
autoplot(electricity_log_ts, series="Data") +
autolayer(forecast_meanf_elec, series="Mean Forecast", PI=FALSE) +
autolayer(forecast_naive_elec, series="Naive Forecast", PI=FALSE) +
autolayer(forecast_snaive_elec, series="Seasonal Naive Forecast", PI=FALSE) +
autolayer(forecast_rwf_elec, series="Drift", PI=FALSE) +
autolayer(forecast_arima_elec, series="ARIMA(2,1,3) Forecast", PI=FALSE) +
labs(title="Comparative Forecast for Electricity Prices",
x="Year", y="Logged Prices",
caption="Comparing ARIMA(2,1,3) with Benchmark Methods") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5, face = "bold")) +
guides(colour=guide_legend(title="Forecast Method")) +
scale_color_manual(values=c("Data"="#000000", "Mean Forecast"="red",
"Naive Forecast"="green", "Seasonal Naive Forecast"="purple",
"Drift"="orange", "ARIMA(2,1,3) Forecast"="blue"),
breaks=c("Data", "Mean Forecast", "Naive Forecast",
"Seasonal Naive Forecast", "Drift", "ARIMA(2,1,3) Forecast"))
accuracy(forecast_arima_elec)
#| code-fold: true
#| code-summary: 'Comparing Benchmark'
#| warning: false
#| output: true
#Generate forecasts
forecast_meanf_gdp <- meanf(gdp_log_ts, h=36)
forecast_naive_gdp <- naive(gdp_log_ts, h=36)
forecast_snaive_gdp <- snaive(gdp_log_ts, h=36)
forecast_rwf_gdp <- rwf(gdp_log_ts, drift=TRUE, h=36)
forecast_arima_gdp <- forecast(fit_gdp_a, h=36)
#Plotting the forecasts
autoplot(gdp_log_ts, series="Data") +
autolayer(forecast_meanf_gdp, series="Mean Forecast", PI=FALSE) +
autolayer(forecast_naive_gdp, series="Naive Forecast", PI=FALSE) +
autolayer(forecast_snaive_gdp, series="Seasonal Naive Forecast", PI=FALSE) +
autolayer(forecast_rwf_gdp, series="Drift", PI=FALSE) +
autolayer(forecast_arima_gdp, series="ARIMA(1,1,1) Forecast", PI=FALSE) +
labs(title="Comparative Forecast for GDP",
x="Year", y="Logged Prices",
caption="Comparing ARIMA(1,1,1) with Benchmark Methods") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5, face = "bold")) +
guides(colour=guide_legend(title="Forecast Method")) +
scale_color_manual(values=c("Data"="#000000", "Mean Forecast"="red",
"Naive Forecast"="green", "Seasonal Naive Forecast"="purple",
"Drift"="orange", "ARIMA(1,1,1) Forecast"="blue"),
breaks=c("Data", "Mean Forecast", "Naive Forecast",
"Seasonal Naive Forecast", "Drift", "ARIMA(1,1,1) Forecast"))
accuracy(forecast_arima_gdp)
#| code-fold: true
#| code-summary: 'Comparing Benchmark'
#| warning: false
#| output: true
#Generate forecasts
forecast_meanf_cpi <- meanf(cpi_log_ts, h=36)
forecast_naive_cpi <- naive(cpi_log_ts, h=36)
forecast_snaive_cpi <- snaive(cpi_log_ts, h=36)
forecast_rwf_cpi <- rwf(cpi_log_ts, drift=TRUE, h=36)
forecast_arima_cpi <- forecast(fit_cpi_a2, h=36)
#Plotting the forecasts
autoplot(cpi_log_ts, series="Data") +
autolayer(forecast_meanf_cpi, series="Mean Forecast", PI=FALSE) +
autolayer(forecast_naive_cpi, series="Naive Forecast", PI=FALSE) +
autolayer(forecast_snaive_cpi, series="Seasonal Naive Forecast", PI=FALSE) +
autolayer(forecast_rwf_cpi, series="Drift", PI=FALSE) +
autolayer(forecast_arima_cpi, series="ARIMA(3,1,3) Forecast", PI=FALSE) +
labs(title="Comparative Forecast for CPI",
x="Year", y="Logged Prices",
caption="Comparing ARIMA(3,1,3) with Benchmark Methods") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5, face = "bold")) +
guides(colour=guide_legend(title="Forecast Method")) +
scale_color_manual(values=c("Data"="#000000", "Mean Forecast"="red",
"Naive Forecast"="green", "Seasonal Naive Forecast"="purple",
"Drift"="orange", "ARIMA(3,1,3) Forecast"="blue"),
breaks=c("Data", "Mean Forecast", "Naive Forecast",
"Seasonal Naive Forecast", "Drift", "ARIMA(3,1,3) Forecast"))
accuracy(forecast_arima_cpi)
#| code-fold: true
#| code-summary: 'SARIMA ACF-PACF'
#| warning: false
#| output: true
#Seasonal differencing
seasonally_diff_oil_log_ts <- diff(oil_log_ts, lag=12)
#ACF and PACF plots
ggtsdisplay(seasonally_diff_oil_log_ts, main='Seasonally Differenced Crude Oil Prices')
#| code-fold: true
#| code-summary: 'SARIMA ACF-PACF'
#| warning: false
#| output: true
#Seasonal differencing
seasonally_diff_elec_log_ts <- diff(electricity_log_ts, lag=12)
#ACF and PACF plots
ggtsdisplay(seasonally_diff_elec_log_ts, main='Seasonally Differenced Electricity Prices')
#| code-fold: true
#| code-summary: 'SARIMA ACF-PACF'
#| warning: false
#| output: true
#Seasonal differencing
seasonally_diff_cpi_log_ts <- diff(cpi_log_ts, lag=12)
#ACF and PACF plots
ggtsdisplay(seasonally_diff_cpi_log_ts, main='Seasonally Differenced CPI')
#| code-fold: true
#| code-summary: 'Parameters'
#| warning: false
#| output: true
SARIMA.c=function(p1,p2,q1,q2,P1,P2,Q1,Q2,data){
#K=(p2+1)*(q2+1)*(P2+1)*(Q2+1)
temp=c()
d = 1
D = 1
s = 12
i=1
temp= data.frame()
ls=matrix(rep(NA,9*19),nrow=19)
for (p in p1:p2)
{
for(q in q1:q2)
{
for(P in P1:P2)
{
for(Q in Q1:Q2)
{
if(p+d+q+P+D+Q<=9)
{
model<- Arima(data,order=c(p-1,d,q-1),seasonal=c(P-1,D,Q-1))
ls[i,]= c(p-1,d,q-1,P-1,D,Q-1,model$aic,model$bic,model$aicc)
i=i+1
#print(i)
}
}
}
}
}
temp= as.data.frame(ls)
names(temp)= c("p","d","q","P","D","Q","AIC","BIC","AICc")
temp
}
output=SARIMA.c(p1=1,p2=2,q1=1,q2=3,P1=1,P2=2,Q1=1,Q2=2,data=oil_log_ts)
knitr::kable(output)
output[which.min(output$AIC),]
output[which.min(output$BIC),]
output[which.min(output$AICc),]
#| code-fold: true
#| code-summary: 'Parameters'
#| warning: false
#| output: true
SARIMA.c=function(p1,p2,q1,q2,P1,P2,Q1,Q2,data){
#K=(p2+1)*(q2+1)*(P2+1)*(Q2+1)
temp=c()
d = 1
D = 1
s = 12
i=1
temp= data.frame()
ls=matrix(rep(NA,9*24),nrow=24)
for (p in p1:p2)
{
for(q in q1:q2)
{
for(P in P1:P2)
{
for(Q in Q1:Q2)
{
if(p+d+q+P+D+Q<=9)
{
model<- Arima(data,order=c(p-1,d,q-1),seasonal=c(P-1,D,Q-1))
ls[i,]= c(p-1,d,q-1,P-1,D,Q-1,model$aic,model$bic,model$aicc)
i=i+1
#print(i)
}
}
}
}
}
temp= as.data.frame(ls)
names(temp)= c("p","d","q","P","D","Q","AIC","BIC","AICc")
temp
}
output=SARIMA.c(p1=1,p2=3,q1=1,q2=7,P1=1,P2=2,Q1=1,Q2=2,data=electricity_log_ts)
knitr::kable(output)
output[which.min(output$AIC),]
output[which.min(output$BIC),]
output[which.min(output$AICc),]
#| code-fold: true
#| code-summary: 'Parameters'
#| warning: false
#| output: true
SARIMA.c=function(p1,p2,q1,q2,P1,P2,Q1,Q2,data){
#K=(p2+1)*(q2+1)*(P2+1)*(Q2+1)
temp=c()
d = 1
D = 1
s = 12
i=1
temp= data.frame()
ls=matrix(rep(NA,9*25),nrow=25)
for (p in p1:p2)
{
for(q in q1:q2)
{
for(P in P1:P2)
{
for(Q in Q1:Q2)
{
if(p+d+q+P+D+Q<=9)
{
model<- Arima(data,order=c(p-1,d,q-1),seasonal=c(P-1,D,Q-1))
ls[i,]= c(p-1,d,q-1,P-1,D,Q-1,model$aic,model$bic,model$aicc)
i=i+1
#print(i)
}
}
}
}
}
temp= as.data.frame(ls)
names(temp)= c("p","d","q","P","D","Q","AIC","BIC","AICc")
temp
}
output=SARIMA.c(p1=1,p2=12,q1=1,q2=9,P1=1,P2=2,Q1=1,Q2=2,data=cpi_log_ts)
knitr::kable(output)
output[which.min(output$AIC),]
output[which.min(output$BIC),]
output[which.min(output$AICc),]
#| code-fold: true
#| code-summary: 'SARIMA Fit'
#| warning: false
#| output: true
set.seed(222)
model_output_s <- capture.output(sarima(oil_log_ts, 0,1,2,0,1,1,12))
#model_output_s
cat(model_output_s[25:37], model_output_s[length(model_output_s)], sep = "\n")
#| code-fold: true
#| code-summary: 'SARIMA Fit'
#| warning: false
#| output: true
set.seed(222)
model_output_e <- capture.output(sarima(electricity_log_ts, 1,1,0,0,1,1,12))
#model_output_e
cat(model_output_e[21:32], model_output_e[length(model_output_e)], sep = "\n")
#| code-fold: true
#| code-summary: 'SARIMA Fit'
#| warning: false
#| output: true
set.seed(222)
model_output_c <- capture.output(sarima(cpi_log_ts, 0,1,2,0,1,1,12))
#model_output_c
cat(model_output_c[22:34], model_output_c[length(model_output_c)], sep = "\n")
#| code-fold: true
#| code-summary: 'Auto Arima'
#| warning: false
#| output: true
auto.arima(oil_log_ts)
#| code-fold: true
#| code-summary: 'Auto Arima'
#| warning: false
#| output: true
auto.arima(electricity_log_ts)
#| code-fold: true
#| code-summary: 'Auto Arima'
#| warning: false
#| output: true
auto.arima(cpi_log_ts)
#| code-fold: true
#| code-summary: 'Forecasting SARIMA'
#| warning: false
#| output: true
#Forecasting the next 36 months
fit_oil_s <- Arima(oil_log_ts, order=c(0,1,2), seasonal=c(0,1,1))
forecast_oil_s <- forecast(fit_oil_s, h=36)
#Plotting the forecast
autoplot(forecast_oil_s) +
labs(title="Forecast for Crude Oil Prices - SARIMA",
x="Year", y="Logged Prices",
caption="Forecast using SARIMA(0,1,2)(0,1,1)[12]") +
theme_minimal()+
theme(plot.title = element_text(hjust = 0.5, face = "bold"))
#| code-fold: true
#| code-summary: 'Forecasting SARIMA'
#| warning: false
#| output: true
#Forecasting the next 36 months
fit_elec_s <- Arima(electricity_log_ts, order=c(1,1,0), seasonal=c(0,1,1))
forecast_elect_s <- forecast(fit_elec_s, h=36)
#Plotting the forecast
autoplot(forecast_elect_s) +
labs(title="Forecast for Electricty Prices - SARIMA",
x="Year", y="Logged Prices",
caption="Forecast using SARIMA(1,1,0)(0,1,1)[12]") +
theme_minimal()+
theme(plot.title = element_text(hjust = 0.5, face = "bold"))
#| code-fold: true
#| code-summary: 'Forecasting SARIMA'
#| warning: false
#| output: true
#Forecasting the next 36 months
fit_cpi_s <- Arima(cpi_log_ts, order=c(0,1,2), seasonal=c(0,1,1))
forecast_cpi_s <- forecast(fit_cpi_s, h=36)
#Plotting the forecast
autoplot(forecast_cpi_s) +
labs(title="Forecast for CPI - SARIMA",
x="Year", y="Logged Prices",
caption="Forecast using SARIMA(0,1,2)(0,1,1)[12]") +
theme_minimal()+
theme(plot.title = element_text(hjust = 0.5, face = "bold"))
#| code-fold: true
#| code-summary: 'Comparing SARIMA Benchmark'
#| warning: false
#| output: true
#Plot
autoplot(oil_log_ts) +
autolayer(meanf(oil_log_ts, h=36), series="Mean", PI=FALSE) +
autolayer(naive(oil_log_ts, h=36), series="Naïve", PI=FALSE) +
autolayer(snaive(oil_log_ts, h=36), series="SNaïve", PI=FALSE) +
autolayer(rwf(oil_log_ts, h=36, drift=TRUE), series="Drift", PI=FALSE) +
autolayer(forecast(fit_oil_s, 36), series="SARIMA", PI=FALSE) +
labs(title="Comparing SARIMA with Benchmark Forecasts for Crude Oil Prices",
x="Time", y="Logged Prices",
caption="Forecasting Methods") +
guides(colour=guide_legend(title="Forecast")) +
theme_bw()
#| code-fold: true
#| code-summary: 'Comparing SARIMA Benchmark'
#| warning: false
#| output: true
autoplot(electricity_log_ts) +
autolayer(meanf(electricity_log_ts, h=36), series="Mean", PI=FALSE) +
autolayer(naive(electricity_log_ts, h=36), series="Naïve", PI=FALSE) +
autolayer(snaive(electricity_log_ts, h=36), series="SNaïve", PI=FALSE) +
autolayer(rwf(electricity_log_ts, h=36, drift=TRUE), series="Drift", PI=FALSE) +
autolayer(forecast(fit_elec_s, 36), series="SARIMA", PI=FALSE) +
labs(title="Comparing SARIMA with Benchmark Forecasts for Electricity Prices",
x="Time", y="Logged Prices",
caption="Forecasting Methods") +
guides(colour=guide_legend(title="Forecast")) +
theme_bw()
#| code-fold: true
#| code-summary: 'Comparing SARIMA Benchmark'
#| warning: false
#| output: true
#Plot
autoplot(cpi_log_ts) +
autolayer(meanf(cpi_log_ts, h=36), series="Mean", PI=FALSE) +
autolayer(naive(cpi_log_ts, h=36), series="Naïve", PI=FALSE) +
autolayer(snaive(cpi_log_ts, h=36), series="SNaïve", PI=FALSE) +
autolayer(rwf(cpi_log_ts, h=36, drift=TRUE), series="Drift", PI=FALSE) +
autolayer(forecast(fit_cpi_s, 36), series="SARIMA", PI=FALSE) +
labs(title="Comparing SARIMA with Benchmark Forecasts for CPI",
x="Time", y="Logged Prices",
caption="Forecasting Methods") +
guides(colour=guide_legend(title="Forecast")) +
theme_bw()
#| code-fold: true
#| code-summary: 'CV'
#| warning: false
#| output: true
x=oil_log_ts
set.seed(222)
k <- 72 # first training set length (6 seasonal lags - 6*12)
n <- length(x) #408
n-k #336 rest of the observations
#n-k=336; 336/12=28; k=72
mae1 <- matrix(NA, 28,12)
mae2 <- matrix(NA,28,12)
st <- tsp(oil_log_ts)[1]+(k-1)/12
for(i in 1:28)
{
#xtrain <- window(a10, start=st+(i-k+1)/12, end=st+i/12)
xtrain <- window(oil_log_ts, end=st + i-1)
xtest <- window(oil_log_ts, start=st + (i-1) + 1/12, end=st + i)
# Manual model
fit <- Arima(xtrain, order=c(0,1,2), seasonal=list(order=c(0,1,1), period=12),
method="ML")
fcast <- forecast(fit, h=12)
# Auto Arima
fit2 <- Arima(xtrain, order=c(2,1,0), seasonal=list(order=c(1,0,0), period=12),
method="ML")
fcast2 <- forecast(fit2, h=12)
mae1[i,] <- abs(fcast$mean-xtest)
mae2[i,] <- abs(fcast2$mean-xtest)
}
plot(1:12, colMeans(mae1,na.rm=TRUE), type="l", col=2, xlab="horizon", ylab="MAE")
lines(1:12, colMeans(mae2,na.rm=TRUE), type="l",col=3)
legend("topleft",legend=c("Manual Model","Auto Arima"),col=2:4,lty=1)
#| code-fold: true
#| code-summary: 'CV'
#| warning: false
#| output: true
x=electricity_log_ts
set.seed(222)
k <- 48 # first training set length (4 seasonal lags - 4*12)
n <- length(x) #407
n-k #359 rest of the observations
#n-k=360; 360/12=30; k=48
mae1 <- matrix(NA, 29,12)
mae2 <- matrix(NA,29,12)
st <- tsp(electricity_log_ts)[1]+(k-1)/12
for(i in 1:29)
{
xtrain <- window(electricity_log_ts, end=st + i-1)
xtest <- window(electricity_log_ts, start=st + (i-1) + 1/12, end=st + i)
# Manual model
fit <- Arima(xtrain, order=c(1,1,0), seasonal=list(order=c(0,1,1), period=12),
method="ML")
fcast <- forecast(fit, h=12)
# Auto Arima
fit2 <- Arima(xtrain, order=c(0,1,1), seasonal=list(order=c(0,1,1), period=12),
method="ML")
fcast2 <- forecast(fit2, h=12)
mae1[i,] <- abs(fcast$mean-xtest)
mae2[i,] <- abs(fcast2$mean-xtest)
}
plot(1:12, colMeans(mae1,na.rm=TRUE), type="l", col=2, xlab="horizon", ylab="MAE")
lines(1:12, colMeans(mae2,na.rm=TRUE), type="l",col=3)
legend("topleft",legend=c("Manual Model","Auto Arima"),col=2:4,lty=1)
#| code-fold: true
#| code-summary: 'CV'
#| warning: false
#| output: true
x=cpi_log_ts
set.seed(222)
k <- 72 # first training set length (6 seasonal lags - 6*12)
n <- length(x) #410
#n-k #338 rest of the observations
#n-k=338; 338/12=28; k=72
mae1 <- matrix(NA, 28,12)
mae2 <- matrix(NA,28,12)
st <- tsp(cpi_log_ts)[1]+(k-1)/12
for(i in 1:28)
{
#xtrain <- window(a10, start=st+(i-k+1)/12, end=st+i/12)
xtrain <- window(cpi_log_ts, end=st + i-1)
xtest <- window(cpi_log_ts, start=st + (i-1) + 1/12, end=st + i)
# Manual model
fit <- Arima(xtrain, order=c(0,1,2), seasonal=list(order=c(0,1,1), period=12),
method="ML")
fcast <- forecast(fit, h=12)
# Auto Arima
fit2 <- Arima(xtrain, order=c(2,1,0), seasonal=list(order=c(1,0,0), period=12),
method="ML")
fcast2 <- forecast(fit2, h=12)
mae1[i,] <- abs(fcast$mean-xtest)
mae2[i,] <- abs(fcast2$mean-xtest)
}
plot(1:12, colMeans(mae1,na.rm=TRUE), type="l", col=2, xlab="horizon", ylab="MAE")
lines(1:12, colMeans(mae2,na.rm=TRUE), type="l",col=3)
legend("topleft",legend=c("Manual Model","Auto Arima"),col=2:4,lty=1)
