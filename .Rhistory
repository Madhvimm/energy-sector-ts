if(p+d+q+P+D+Q<=9)
{
model <- Arima(data, order=c(p, d, q), seasonal=c(P, D, Q))
ls[i, ] <- c(p, d, q, P, D, Q, model$aic, model$bic, model$aicc)  # Store results
i=i+1
#print(i)
}
}
}
}
}
ls <- ls[1:(i-1), ]
colnames(ls) <- c("p", "d", "q", "P", "D", "Q", "AIC", "BIC", "AICc")
return(as.data.frame(ls))
}
output <- SARIMA.c(1, 2, 1, 2, 0, 2, 0, 2,data=oil_log_ts)
#| code-fold: true
#| code-summary: 'Parameters'
#| warning: false
#| output: true
SARIMA.c <- function(p1, p2, q1, q2, P1, P2, Q1, Q2, data) {
#K=(p2+1)*(q2+1)*(P2+1)*(Q2+1)
d = 1
D = 1
s = 12
i=1
ls=matrix(rep(NA,9*36),nrow=36)
for (p in p1:p2)
{
for(q in q1:q2)
{
for(P in P1:P2)
{
for(Q in Q1:Q2)
{
if(p+d+q+P+D+Q<=10)
{
model <- Arima(data, order=c(p, d, q), seasonal=c(P, D, Q))
ls[i, ] <- c(p, d, q, P, D, Q, model$aic, model$bic, model$aicc)  # Store results
i=i+1
#print(i)
}
}
}
}
}
ls <- ls[1:(i-1), ]
colnames(ls) <- c("p", "d", "q", "P", "D", "Q", "AIC", "BIC", "AICc")
return(as.data.frame(ls))
}
output <- SARIMA.c(1, 2, 1, 2, 0, 2, 0, 2,data=oil_log_ts)
library(forecast)
library(knitr)
SARIMA.c <- function(p1, p2, q1, q2, P1, P2, Q1, Q2, data) {
d = 1
D = 1
s = 12
results = list()  # Using a list to dynamically store results
i = 1
for (p in p1:p2) {
for (q in q1:q2) {
for (P in P1:P2) {
for (Q in Q1:Q2) {
if (p + d + q + P + D + Q <= 9) {
tryCatch({
model <- Arima(data, order = c(p, d, q), seasonal = c(P, D, Q))
results[[i]] <- c(p, d, q, P, D, Q, model$aic, model$bic, model$aicc)
i <- i + 1
}, error = function(e) {
cat(sprintf("Error for p=%d, d=%d, q=%d, P=%d, D=%d, Q=%d: %s\n",
p, d, q, P, D, Q, e$message))
})
}
}
}
}
}
if (length(results) == 0) {
cat("No models were successfully fitted.\n")
return(NULL)
}
# Convert the list to a data frame
df <- do.call(rbind, results)
colnames(df) <- c("p", "d", "q", "P", "D", "Q", "AIC", "BIC", "AICc")
return(df)
}
# Usage example, make sure 'oil_log_ts' is your time series data
output <- SARIMA.c(1, 2, 1, 2, 0, 2, 0, 2, oil_log_ts)
if (!is.null(output)) {
print(knitr::kable(output))
} else {
message("No output due to model fitting issues.")
}
library(forecast)
library(knitr)
SARIMA.c <- function(p1, p2, q1, q2, P1, P2, Q1, Q2, data) {
d = 1
D = 1
s = 12
results = list()  # Using a list to dynamically store results
i = 1
for (p in p1:p2) {
for (q in q1:q2) {
for (P in P1:P2) {
for (Q in Q1:Q2) {
if (p + d + q + P + D + Q <= 9) {
tryCatch({
model <- Arima(data, order = c(p, d, q), seasonal = c(P, D, Q), method = "ML",
optim.control = list(maxit = 1000, reltol = 1e-8))
# Store results
}, error = function(e) {
cat(sprintf("Error for p=%d, d=%d, q=%d, P=%d, D=%d, Q=%d: %s\n",
p, d, q, P, D, Q, e$message))
})
}
}
}
}
}
if (length(results) == 0) {
cat("No models were successfully fitted.\n")
return(NULL)
}
# Convert the list to a data frame
df <- do.call(rbind, results)
colnames(df) <- c("p", "d", "q", "P", "D", "Q", "AIC", "BIC", "AICc")
return(df)
}
# Usage example, make sure 'oil_log_ts' is your time series data
output <- SARIMA.c(1, 2, 1, 2, 0, 2, 0, 2, oil_log_ts)
if (!is.null(output)) {
print(knitr::kable(output))
} else {
message("No output due to model fitting issues.")
}
library(forecast)
library(knitr)
SARIMA.c <- function(p1, p2, q1, q2, P1, P2, Q1, Q2, data) {
d = 1
D = 1
s = 12
results = list()  # Using a list to dynamically store results
i = 1
for (p in p1:p2) {
for (q in q1:q2) {
for (P in P1:P2) {
for (Q in Q1:Q2) {
if (p + d + q + P + D + Q <= 9) {
tryCatch({
model <- Arima(data, order = c(p, d, q), seasonal = c(P, D, Q), method = "ML",
optim.control = list(maxit = 1000, reltol = 1e-8))
# Store results
}, error = function(e) {
cat(sprintf("Error for p=%d, d=%d, q=%d, P=%d, D=%d, Q=%d: %s\n",
p, d, q, P, D, Q, e$message))
})
}
}
}
}
}
if (length(results) == 0) {
cat("No models were successfully fitted.\n")
return(NULL)
}
#Convert list to df
df <- do.call(rbind, results)
colnames(df) <- c("p", "d", "q", "P", "D", "Q", "AIC", "BIC", "AICc")
return(df)
}
output <- SARIMA.c(1, 2, 1, 2, 0, 2, 0, 2, oil_log_ts)
if (!is.null(output)) {
print(knitr::kable(output))
} else {
message("No output due to model fitting issues.")
}
SARIMA.c <- function(p1, p2, q1, q2, P1, P2, Q1, Q2, data) {
d = 1
D = 1
s = 12
results = list()  # Using a list to dynamically store results
i = 1
for (p in p1:p2) {
for (q in q1:q2) {
for (P in P1:P2) {
for (Q in Q1:Q2) {
if (p + d + q + P + D + Q <= 9) {
tryCatch({
model <- Arima(data, order = c(p, d, q), seasonal = c(P, D, Q), method = "ML",
optim.control = list(maxit = 1000, reltol = 1e-8))
# Store results
}, error = function(e) {
cat(sprintf("Error for p=%d, d=%d, q=%d, P=%d, D=%d, Q=%d: %s\n",
p, d, q, P, D, Q, e$message))
})
}
}
}
}
}
if (length(results) == 0) {
cat("No models were successfully fitted.\n")
return(NULL)
}
#Convert list to df
df <- do.call(rbind, results)
colnames(df) <- c("p", "d", "q", "P", "D", "Q", "AIC", "BIC", "AICc")
return(df)
}
output <- SARIMA.c(1, 2, 1, 2, 0, 2, 0, 2, oil_log_ts)
if (!is.null(output)) {
print(knitr::kable(output))
} else {
message("No output due to model fitting issues.")
}
#| code-fold: true
#| code-summary: 'SARIMA ACF-PACF'
#| warning: false
#| output: true
#Seasonal differencing
seasonally_diff_oil_log_ts <- diff(oil_log_ts, lag=12)
#ACF and PACF plots
ggtsdisplay(seasonally_diff_oil_log_ts, main='Seasonally Differenced Crude Oil Prices')
#| code-fold: true
#| code-summary: 'Parameters'
#| warning: false
#| output: true
SARIMA.c=function(p1,p2,q1,q2,P1,P2,Q1,Q2,data){
#K=(p2+1)*(q2+1)*(P2+1)*(Q2+1)
temp=c()
d = 1
D = 1
s = 12
i=1
temp= data.frame()
ls=matrix(rep(NA,9*30),nrow=30)
for (p in p1:p2)
{
for(q in q1:q2)
{
for(P in P1:P2)
{
for(Q in Q1:Q2)
{
if(p+d+q+P+D+Q<=9)
{
model<- Arima(data,order=c(p-1,d,q-1),seasonal=c(P-1,D,Q-1))
ls[i,]= c(p-1,d,q-1,P-1,D,Q-1,model$aic,model$bic,model$aicc)
i=i+1
#print(i)
}
}
}
}
}
temp= as.data.frame(ls)
names(temp)= c("p","d","q","P","D","Q","AIC","BIC","AICc")
temp
}
output=SARIMA.c(p1=1,p2=2,q1=1,q2=3,P1=1,P2=2,Q1=1,Q2=2,data=oil_log_ts)
knitr::kable(output)
#| code-fold: true
#| code-summary: 'Parameters'
#| warning: false
#| output: true
SARIMA.c=function(p1,p2,q1,q2,P1,P2,Q1,Q2,data){
#K=(p2+1)*(q2+1)*(P2+1)*(Q2+1)
temp=c()
d = 1
D = 1
s = 12
i=1
temp= data.frame()
ls=matrix(rep(NA,9*20),nrow=20)
for (p in p1:p2)
{
for(q in q1:q2)
{
for(P in P1:P2)
{
for(Q in Q1:Q2)
{
if(p+d+q+P+D+Q<=9)
{
model<- Arima(data,order=c(p-1,d,q-1),seasonal=c(P-1,D,Q-1))
ls[i,]= c(p-1,d,q-1,P-1,D,Q-1,model$aic,model$bic,model$aicc)
i=i+1
#print(i)
}
}
}
}
}
temp= as.data.frame(ls)
names(temp)= c("p","d","q","P","D","Q","AIC","BIC","AICc")
temp
}
output=SARIMA.c(p1=1,p2=2,q1=1,q2=3,P1=1,P2=2,Q1=1,Q2=2,data=oil_log_ts)
knitr::kable(output)
#| code-fold: true
#| code-summary: 'Parameters'
#| warning: false
#| output: true
SARIMA.c=function(p1,p2,q1,q2,P1,P2,Q1,Q2,data){
#K=(p2+1)*(q2+1)*(P2+1)*(Q2+1)
temp=c()
d = 1
D = 1
s = 12
i=1
temp= data.frame()
ls=matrix(rep(NA,9*19),nrow=19)
for (p in p1:p2)
{
for(q in q1:q2)
{
for(P in P1:P2)
{
for(Q in Q1:Q2)
{
if(p+d+q+P+D+Q<=9)
{
model<- Arima(data,order=c(p-1,d,q-1),seasonal=c(P-1,D,Q-1))
ls[i,]= c(p-1,d,q-1,P-1,D,Q-1,model$aic,model$bic,model$aicc)
i=i+1
#print(i)
}
}
}
}
}
temp= as.data.frame(ls)
names(temp)= c("p","d","q","P","D","Q","AIC","BIC","AICc")
temp
}
output=SARIMA.c(p1=1,p2=2,q1=1,q2=3,P1=1,P2=2,Q1=1,Q2=2,data=oil_log_ts)
knitr::kable(output)
#| code-fold: true
#| code-summary: 'Parameters'
#| warning: false
#| output: true
SARIMA.c=function(p1,p2,q1,q2,P1,P2,Q1,Q2,data){
#K=(p2+1)*(q2+1)*(P2+1)*(Q2+1)
temp=c()
d = 1
D = 1
s = 12
i=1
temp= data.frame()
ls=matrix(rep(NA,9*19),nrow=19)
for (p in p1:p2)
{
for(q in q1:q2)
{
for(P in P1:P2)
{
for(Q in Q1:Q2)
{
if(p+d+q+P+D+Q<=9)
{
model<- Arima(data,order=c(p-1,d,q-1),seasonal=c(P-1,D,Q-1))
ls[i,]= c(p-1,d,q-1,P-1,D,Q-1,model$aic,model$bic,model$aicc)
i=i+1
#print(i)
}
}
}
}
}
temp= as.data.frame(ls)
names(temp)= c("p","d","q","P","D","Q","AIC","BIC","AICc")
temp
}
output=SARIMA.c(p1=1,p2=2,q1=1,q2=3,P1=1,P2=2,Q1=1,Q2=2,data=oil_log_ts)
knitr::kable(output)
output[which.min(output$AIC),]
output[which.min(output$BIC),]
output[which.min(output$AICc),]
set.seed(222)
model_output <- capture.output(sarima(oil_log_ts, 0,1,2,0,1,1,12))
#| code-fold: true
#| code-summary: 'SARIMA Fit'
#| warning: false
#| output: true
set.seed(222)
model_output <- capture.output(sarima(oil_log_ts, 0,1,2,0,1,1,12))
model_output
#cat(model_output[28:60], model_output[length(model_output)], sep = "\n")
#| code-fold: true
#| code-summary: 'SARIMA Fit'
#| warning: false
#| output: true
set.seed(222)
model_output <- capture.output(sarima(oil_log_ts, 0,1,2,0,1,1,12))
#model_output
cat(model_output[24:39], model_output[length(model_output)], sep = "\n")
#| code-fold: true
#| code-summary: 'SARIMA Fit'
#| warning: false
#| output: true
set.seed(222)
model_output <- capture.output(sarima(oil_log_ts, 0,1,2,0,1,1,12))
#model_output
cat(model_output[24:37], model_output[length(model_output)], sep = "\n")
#| code-fold: true
#| code-summary: 'SARIMA Fit'
#| warning: false
#| output: true
set.seed(222)
model_output <- capture.output(sarima(oil_log_ts, 0,1,2,0,1,1,12))
#model_output
cat(model_output[25:37], model_output[length(model_output)], sep = "\n")
#| code-fold: true
#| code-summary: 'SARIMA Fit'
#| warning: false
#| output: true
set.seed(222)
model_output <- capture.output(sarima(oil_log_ts, 0,1,2,0,1,1,12))
model_output
#cat(model_output[25:37], model_output[length(model_output)], sep = "\n")
#| code-fold: true
#| code-summary: 'SARIMA Fit'
#| warning: false
#| output: true
set.seed(222)
model_output_s <- capture.output(sarima(oil_log_ts, 0,1,2,0,1,1,12))
model_output_s
#cat(model_output[25:37], model_output[length(model_output)], sep = "\n")
#| code-fold: true
#| code-summary: 'SARIMA Fit'
#| warning: false
#| output: true
set.seed(222)
model_output_s <- capture.output(sarima(oil_log_ts, 0,1,2,0,1,1,12))
model_output_s
#cat(model_output[25:37], model_output[length(model_output)], sep = "\n")
model_output[length(model_output)]
#| code-fold: true
#| code-summary: 'SARIMA Fit'
#| warning: false
#| output: true
set.seed(222)
model_output_s <- capture.output(sarima(oil_log_ts, 0,1,2,0,1,1,12))
#model_output_s
#cat(model_output[25:37], model_output[length(model_output)], sep = "\n")
model_output[length(model_output)]
#| code-fold: true
#| code-summary: 'SARIMA Fit'
#| warning: false
#| output: true
set.seed(222)
model_output_s <- capture.output(sarima(oil_log_ts, 0,1,2,0,1,1,12))
#model_output_s
cat(model_output[25:37], model_output[length(model_output)], sep = "\n")
#| code-fold: true
#| code-summary: 'SARIMA Fit'
#| warning: false
#| output: true
set.seed(222)
model_output_s <- capture.output(sarima(oil_log_ts, 0,1,2,0,1,1,12))
#model_output_s
cat(model_output_s[25:37], model_output_s[length(model_output_s)], sep = "\n")
auto.arima(oil_log_ts)
fit_oil_s <- Arima(oil_log_ts, order=c(0,1,2), seasonal=c(0,1,1))
# forecast next three years
fit_oil_s %>% forecast(h=36) %>% autoplot()+theme_bw()
#| code-fold: true
#| code-summary: 'Importing Libraries'
#| warning: false
#| output: true
autoplot(oil_log_ts) +
autolayer(meanf(oil_log_ts, h=36),
series="Mean", PI=FALSE) +
autolayer(naive(oil_log_ts, h=36),
series="Naïve", PI=FALSE) +
autolayer(snaive(oil_log_ts, h=36),
series="SNaïve", PI=FALSE)+
autolayer(rwf(oil_log_ts, h=36, drift=TRUE),
series="Drift", PI=FALSE)+
autolayer(forecast(fit_oil_s,36),
series="fit",PI=FALSE) +
guides(colour=guide_legend(title="Forecast")) +theme_bw()
#| code-fold: true
#| code-summary: 'Importing Libraries'
#| warning: false
#| output: true
#n=length(oil_log_ts)
#n-k=50; 96/12=5;
k=51
mae1 <- matrix(NA, 5,12) # change to 5
mae2 <- matrix(NA,5,12)
st <- tsp(oil_log_ts)[1]+(k-1)/12 #48 observations
# put up to 5 because 96/12 = 5
for(i in 1:5)
{
#xtrain <- window(a10, start=st+(i-k+1)/12, end=st+i/12)
xtrain <- window(oil_log_ts, end=st + i-1)
xtest <- window(oil_log_ts, start=st + (i-1) + 1/12, end=st + i)
# Manual model
fit <- Arima(xtrain, order=c(0,1,2), seasonal=list(order=c(0,1,1), period=12),
include.drift=TRUE, method="ML")
fcast <- forecast(fit, h=12)
# Auto Arima
fit2 <- Arima(xtrain, order=c(2,1,0), seasonal=list(order=c(1,0,0), period=12),
include.drift=TRUE, method="ML")
fcast2 <- forecast(fit2, h=12)
mae1[i,] <- abs(fcast$mean-xtest)
mae2[i,] <- abs(fcast2$mean-xtest)
}
plot(1:12, colMeans(mae1,na.rm=TRUE), type="l", col=2, xlab="horizon", ylab="MAE")
lines(1:12, colMeans(mae2,na.rm=TRUE), type="l",col=3)
legend("topleft",legend=c("Manual Model","Auto Arima"),col=2:4,lty=1)
