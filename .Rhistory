adf_test_natural_gas <- tseries::adf.test(citygate_gas_ts)
# Display the test results
adf_test_natural_gas
#| code-fold: true
#| code-summary: 'D-F Test'
#| warning: false
#| output: true
# Dickey-Fuller Test for Electricity
adf_test_electricity <- tseries::adf.test(total_electricity_ts)
# Display the test results
adf_test_electricity
#| code-fold: true
#| code-summary: 'D-F Test'
#| warning: false
#| output: true
# Dickey-Fuller Test for GDP
adf_test_gdp <- tseries::adf.test(gdp_ts)
# Display the test results
adf_test_gdp
#| code-fold: true
#| code-summary: 'D-F Test'
#| warning: false
#| output: true
# Dickey-Fuller Test for CPI
adf_test_cpi <- tseries::adf.test(cpi_ts)
# Display the test results
adf_test_cpi
#| code-fold: true
#| code-summary: 'Plot'
#| warning: false
#| output: false
# Convert residuals to a ts object
fit_crude_oil <- lm(Value ~ Date, data = composite_crude_oil_prices, na.action = NULL)
resid_crude_oil_ts <- ts(resid(fit_crude_oil), start=c(start_year, start_month), frequency=12)
#| code-fold: true
#| code-summary: 'Plot'
#| warning: false
#| output: true
#Plot the residuals
plot1_crude_oil <- autoplot(resid_crude_oil_ts, series="Detrended Crude Oil", colour = "#3fa4b5") +
theme_bw() +
xlab("Time") +
ylab("Residuals") +
ggtitle("Detrended Crude Oil") +
theme(plot.title = element_text(hjust = 0.5, face = "bold"))
#Differencing plot
plot2_crude_oil <- autoplot(diff(composite_crude_oil_ts), series = "First Difference Crude Oil", colour = "#ce7f72") +
theme_bw() +
xlab("Time") +
ylab("Differences") +
ggtitle("First Difference Crude Oil") +
theme(plot.title = element_text(hjust = 0.5, face = "bold"))
#Arrange plots
grid.arrange(plot1_crude_oil, plot2_crude_oil, nrow = 2)
#| code-fold: true
#| code-summary: 'Plot'
#| warning: false
#| output: false
# Detrending using the original data frame
fit_natural_gas <- lm(Value ~ Date, data = citygate_gas_prices, na.action = NULL)
# Convert residuals to a ts object for plotting
resid_natural_gas_ts <- ts(resid(fit_natural_gas), start=c(start_year_gas, start_month_gas), frequency=12)
#| code-fold: true
#| code-summary: 'Plot'
#| warning: false
#| output: true
#Plot the residuals
plot1_natural_gas <- autoplot(resid_natural_gas_ts, series="Detrended Natural Gas", colour = "#3fa4b5") +
theme_bw() +
xlab("Time") +
ylab("Residuals") +
ggtitle("Detrended Natural Gas") +
theme(plot.title = element_text(hjust = 0.5, face = "bold"))
#Differencing plot
plot2_natural_gas <- autoplot(diff(citygate_gas_ts), series = "First Difference Natural Gas", colour = "#ce7f72") +
theme_bw() +
xlab("Time") +
ylab("Differences") +
ggtitle("First Difference Natural Gas") +
theme(plot.title = element_text(hjust = 0.5, face = "bold"))
#Arrange plots
grid.arrange(plot1_natural_gas, plot2_natural_gas, nrow = 2)
#| code-fold: true
#| code-summary: 'Plot'
#| warning: false
#| output: false
# Detrending using the original data frame
fit_electricity <- lm(Value ~ Date, data = total_electricity_prices, na.action = NULL)
# Convert residuals to a ts object for plotting
resid_electricity_ts <- ts(resid(fit_electricity), start=c(start_year_elec, start_month_elec), frequency=12)
#| code-fold: true
#| code-summary: 'Plot'
#| warning: false
#| output: true
#Plot the residuals
plot1_electricity <- autoplot(resid_electricity_ts, series="Detrended Electricity", colour = "#3fa4b5") +
theme_bw() +
xlab("Time") +
ylab("Residuals") +
ggtitle("Detrended Electricity") +
theme(plot.title = element_text(hjust = 0.5, face = "bold"))
#Differencing plot
plot2_electricity <- autoplot(diff(total_electricity_ts), series = "First Difference Electricity", colour = "#ce7f72") +
theme_bw() +
xlab("Time") +
ylab("Differences") +
ggtitle("First Difference Electricity") +
theme(plot.title = element_text(hjust = 0.5, face = "bold"))
#Arrange plots
grid.arrange(plot1_electricity, plot2_electricity, nrow = 2)
#| code-fold: true
#| code-summary: 'Plot'
#| warning: false
#| output: false
# Detrending using the original data frame
fit_gdp <- lm(GDP ~ DATE, data = gdp_data, na.action = NULL)
# Convert residuals to a ts object for plotting
resid_gdp_ts <- ts(resid(fit_gdp), start=c(start_year_gdp, start_quarter_gdp), frequency=4)
#| code-fold: true
#| code-summary: 'Plot'
#| warning: false
#| output: true
#Plot the residuals
plot1_gdp <- autoplot(resid_gdp_ts, series="Detrended GDP", colour = "#3fa4b5") +
theme_bw() +
xlab("Time") +
ylab("Residuals") +
ggtitle("Detrended GDP") +
theme(plot.title = element_text(hjust = 0.5, face = "bold"))
#Differencing plot
plot2_gdp <- autoplot(diff(gdp_ts), series = "First Difference GDP", colour = "#ce7f72") +
theme_bw() +
xlab("Time") +
ylab("Differences") +
ggtitle("First Difference GDP") +
theme(plot.title = element_text(hjust = 0.5, face = "bold"))
#Arrange plots
grid.arrange(plot1_gdp, plot2_gdp, nrow = 2)
#| code-fold: true
#| code-summary: 'Plot'
#| warning: false
#| output: false
# Detrending using the original data frame
fit_cpi <- lm(CPIAUCSL ~ DATE, data = cpi_data, na.action = NULL)
# Convert residuals to a ts object for plotting
resid_cpi_ts <- ts(resid(fit_cpi), start=c(start_year_cpi, start_month_cpi), frequency=12)
#| code-fold: true
#| code-summary: 'Plot'
#| warning: false
#| output: true
#Plot the residuals
plot1_cpi <- autoplot(resid_cpi_ts, series="Detrended CPI", colour = "#3fa4b5") +
theme_bw() +
xlab("Time") +
ylab("Residuals") +
ggtitle("Detrended CPI") +
theme(plot.title = element_text(hjust = 0.5, face = "bold"))
#Differencing plot
plot2_cpi <- autoplot(diff(cpi_ts), series = "First Difference CPI", colour = "#ce7f72") +
theme_bw() +
xlab("Time") +
ylab("Differences") +
ggtitle("First Difference CPI") +
theme(plot.title = element_text(hjust = 0.5, face = "bold"))
#Arrange plots
grid.arrange(plot1_cpi, plot2_cpi, nrow = 2)
#| code-fold: true
#| code-summary: 'Importing Libraries'
#| warning: false
#| output: true
# Prepare the data frame with the correct start date
crude_oil_df <- data.frame(
Date = seq(as.Date("1973-10-01"), by = "month", length.out = length(composite_crude_oil_ts)),
Value = as.vector(composite_crude_oil_ts)
)
# Calculate moving averages with the specified window sizes
crude_oil_df$ma5 <- zoo::rollmean(crude_oil_df$Value, 5, mean, fill = NA, align = "right")
crude_oil_df$ma15 <- zoo::rollmean(crude_oil_df$Value, 15, mean, fill = NA, align = "right")
crude_oil_df$ma20 <- zoo::rollmean(crude_oil_df$Value, 20, mean, fill = NA, align = "right")
crude_oil_df$ma30 <- zoo::rollmean(crude_oil_df$Value, 30, mean, fill = NA, align = "right")
# Create the ggplot object with a color aesthetic for the legend
p <- ggplot(crude_oil_df, aes(x = Date)) +
geom_line(aes(y = Value, color = "Actual Data")) +
geom_line(aes(y = ma5, color = "5-MA")) +
geom_line(aes(y = ma15, color = "15-MA")) +
geom_line(aes(y = ma20, color = "20-MA")) +
geom_line(aes(y = ma30, color = "30-MA")) +
xlab("Time") + ylab("Value (USD)") +
ggtitle('Crude Oil Price with Moving Averages') +
theme_bw()
# Convert the ggplot object to a plotly object
plotly::ggplotly(p)
#| code-fold: true
#| code-summary: 'Importing Libraries'
#| warning: false
#| output: true
natural_gas_df <- data.frame(
Date = seq(as.Date("1973-10-01"), by = "month", length.out = length(citygate_gas_ts)),
Value = as.vector(citygate_gas_ts)
)
# Calculate moving averages with the specified window sizes
natural_gas_df$ma5 <- zoo::rollmean(natural_gas_df$Value, 5, mean, fill = NA, align = "right")
natural_gas_df$ma15 <- zoo::rollmean(natural_gas_df$Value, 15, mean, fill = NA, align = "right")
natural_gas_df$ma20 <- zoo::rollmean(natural_gas_df$Value, 20, mean, fill = NA, align = "right")
natural_gas_df$ma30 <- zoo::rollmean(natural_gas_df$Value, 30, mean, fill = NA, align = "right")
# Create the ggplot object with a color aesthetic for the legend
p_ng <- ggplot(natural_gas_df, aes(x = Date)) +
geom_line(aes(y = Value, color = "Actual Data")) +
geom_line(aes(y = ma5, color = "5-MA")) +
geom_line(aes(y = ma15, color = "15-MA")) +
geom_line(aes(y = ma20, color = "20-MA")) +
geom_line(aes(y = ma30, color = "30-MA")) +
xlab("Time") + ylab("Value (Price)") +
ggtitle('Natural Gas Price with Moving Averages') +
theme_bw()
# Convert the ggplot object to a plotly object
plotly::ggplotly(p_ng)
#| code-fold: true
#| code-summary: 'Importing Libraries'
#| warning: false
#| output: true
# Calculate moving averages with the specified window sizes
total_electricity_prices$ma5 <- zoo::rollmean(total_electricity_prices$Value, 5, mean, fill = NA, align = "right")
total_electricity_prices$ma15 <- zoo::rollmean(total_electricity_prices$Value, 15, mean, fill = NA, align = "right")
total_electricity_prices$ma20 <- zoo::rollmean(total_electricity_prices$Value, 20, mean, fill = NA, align = "right")
total_electricity_prices$ma30 <- zoo::rollmean(total_electricity_prices$Value, 30, mean, fill = NA, align = "right")
# Create the ggplot object with a color aesthetic for the legend
p_electricity <- ggplot(total_electricity_prices, aes(x = Date)) +
geom_line(aes(y = Value, color = "Actual Data")) +
geom_line(aes(y = ma5, color = "5-MA")) +
geom_line(aes(y = ma15, color = "15-MA")) +
geom_line(aes(y = ma20, color = "20-MA")) +
geom_line(aes(y = ma30, color = "30-MA")) +
xlab("Time") + ylab("Price (Cents per Kilowatthour)") +
ggtitle('Electricity Price with Moving Averages') +
theme_bw()
# Convert the ggplot object to a plotly object
plotly::ggplotly(p_electricity)
#| code-fold: true
#| code-summary: 'Importing Libraries'
#| warning: false
#| output: true
# Calculate moving averages with the specified window sizes
gdp_data$ma5 <- zoo::rollmean(gdp_data$GDP, 5, mean, fill = NA, align = "right", by = 4)  # Considering quarterly data
gdp_data$ma15 <- zoo::rollmean(gdp_data$GDP, 15, mean, fill = NA, align = "right", by = 4)
gdp_data$ma20 <- zoo::rollmean(gdp_data$GDP, 20, mean, fill = NA, align = "right", by = 4)
gdp_data$ma30 <- zoo::rollmean(gdp_data$GDP, 30, mean, fill = NA, align = "right", by = 4)
# Create the ggplot object with a color aesthetic for the legend
p_gdp <- ggplot(gdp_data, aes(x = DATE)) +
geom_line(aes(y = GDP, color = "Actual Data")) +
geom_line(aes(y = ma5, color = "5-MA")) +
geom_line(aes(y = ma15, color = "15-MA")) +
geom_line(aes(y = ma20, color = "20-MA")) +
geom_line(aes(y = ma30, color = "30-MA")) +
xlab("Time") + ylab("GDP (in billions)") +
ggtitle('GDP with Moving Averages') +
theme_bw()
# Convert the ggplot object to a plotly object
plotly::ggplotly(p_gdp)
#| code-fold: true
#| code-summary: 'Importing Libraries'
#| warning: false
#| output: true
#|
# Calculate moving averages with the specified window sizes
# Replace 'fill = NA' with 'fill = ifelse(is.na(.), NA, mean(., na.rm = TRUE))' if you want to avoid NA in your moving averages
cpi_data$ma5 <- zoo::rollmean(cpi_data$CPIAUCSL, 5, fill = NA, align = "right", by.column = FALSE)
cpi_data$ma15 <- zoo::rollmean(cpi_data$CPIAUCSL, 15, fill = NA, align = "right", by.column = FALSE)
cpi_data$ma20 <- zoo::rollmean(cpi_data$CPIAUCSL, 20, fill = NA, align = "right", by.column = FALSE)
cpi_data$ma30 <- zoo::rollmean(cpi_data$CPIAUCSL, 30, fill = NA, align = "right", by.column = FALSE)
# Create the ggplot object with a color aesthetic for the legend
p_cpi <- ggplot(cpi_data, aes(x = DATE)) +
geom_line(aes(y = CPIAUCSL, color = "Actual Data")) +
geom_line(aes(y = ma5, color = "5-MA")) +
geom_line(aes(y = ma15, color = "15-MA")) +
geom_line(aes(y = ma20, color = "20-MA")) +
geom_line(aes(y = ma30, color = "30-MA")) +
xlab("Time") + ylab("CPIAUCSL") +
ggtitle('CPI with Moving Averages') +
theme_bw()
# Convert the ggplot object to a plotly object
plotly::ggplotly(p_cpi)
#| code-fold: true
#| code-summary: 'Importing Libraries'
#| warning: false
#| output: true
# Prepare the data frame with the correct start date
crude_oil_df <- data.frame(
Date = seq(as.Date("1973-10-01"), by = "month", length.out = length(composite_crude_oil_ts)),
Value = as.vector(composite_crude_oil_ts)
)
# Calculate moving averages with the specified window sizes
crude_oil_df$ma5 <- zoo::rollmean(crude_oil_df$Value, 5, mean, fill = NA, align = "right")
crude_oil_df$ma15 <- zoo::rollmean(crude_oil_df$Value, 15, mean, fill = NA, align = "right")
crude_oil_df$ma20 <- zoo::rollmean(crude_oil_df$Value, 20, mean, fill = NA, align = "right")
crude_oil_df$ma30 <- zoo::rollmean(crude_oil_df$Value, 30, mean, fill = NA, align = "right")
#| code-fold: true
#| code-summary: 'Importing Libraries'
#| warning: false
#| output: true
#Ggplot
p <- ggplot(crude_oil_df, aes(x = Date)) +
geom_line(aes(y = Value, color = "Actual Data")) +
geom_line(aes(y = ma5, color = "5-MA")) +
geom_line(aes(y = ma15, color = "15-MA")) +
geom_line(aes(y = ma20, color = "20-MA")) +
geom_line(aes(y = ma30, color = "30-MA")) +
xlab("Time") + ylab("Value (USD)") +
ggtitle('Crude Oil Price with Moving Averages') +
theme_bw()
#Convert ggplot object to plotly
plotly::ggplotly(p)
#| code-fold: true
#| code-summary: 'Importing Libraries'
#| warning: false
#| output: true
natural_gas_df <- data.frame(
Date = seq(as.Date("1973-10-01"), by = "month", length.out = length(citygate_gas_ts)),
Value = as.vector(citygate_gas_ts)
)
# Calculate moving averages with the specified window sizes
natural_gas_df$ma5 <- zoo::rollmean(natural_gas_df$Value, 5, mean, fill = NA, align = "right")
natural_gas_df$ma15 <- zoo::rollmean(natural_gas_df$Value, 15, mean, fill = NA, align = "right")
natural_gas_df$ma20 <- zoo::rollmean(natural_gas_df$Value, 20, mean, fill = NA, align = "right")
natural_gas_df$ma30 <- zoo::rollmean(natural_gas_df$Value, 30, mean, fill = NA, align = "right")
#| code-fold: true
#| code-summary: 'Importing Libraries'
#| warning: false
#| output: true
# Calculate moving averages with the specified window sizes
total_electricity_prices$ma5 <- zoo::rollmean(total_electricity_prices$Value, 5, mean, fill = NA, align = "right")
total_electricity_prices$ma15 <- zoo::rollmean(total_electricity_prices$Value, 15, mean, fill = NA, align = "right")
total_electricity_prices$ma20 <- zoo::rollmean(total_electricity_prices$Value, 20, mean, fill = NA, align = "right")
total_electricity_prices$ma30 <- zoo::rollmean(total_electricity_prices$Value, 30, mean, fill = NA, align = "right")
#| code-fold: true
#| code-summary: 'Importing Libraries'
#| warning: false
#| output: true
# Calculate moving averages with the specified window sizes
total_electricity_prices$ma5 <- zoo::rollmean(total_electricity_prices$Value, 5, mean, fill = NA, align = "right")
total_electricity_prices$ma15 <- zoo::rollmean(total_electricity_prices$Value, 15, mean, fill = NA, align = "right")
total_electricity_prices$ma20 <- zoo::rollmean(total_electricity_prices$Value, 20, mean, fill = NA, align = "right")
total_electricity_prices$ma30 <- zoo::rollmean(total_electricity_prices$Value, 30, mean, fill = NA, align = "right")
#| code-fold: true
#| code-summary: 'Importing Libraries'
#| warning: false
#| output: true
#Ggplot
p_electricity <- ggplot(total_electricity_prices, aes(x = Date)) +
geom_line(aes(y = Value, color = "Actual Data")) +
geom_line(aes(y = ma5, color = "5-MA")) +
geom_line(aes(y = ma15, color = "15-MA")) +
geom_line(aes(y = ma20, color = "20-MA")) +
geom_line(aes(y = ma30, color = "30-MA")) +
xlab("Time") + ylab("Price (Cents per Kilowatthour)") +
ggtitle('Electricity Price with Moving Averages') +
theme_bw()
#Convert ggplot object to plotly
plotly::ggplotly(p_electricity)
#| code-fold: true
#| code-summary: 'Importing Libraries'
#| warning: false
#| output: true
# Calculate moving averages with the specified window sizes
gdp_data$ma5 <- zoo::rollmean(gdp_data$GDP, 5, mean, fill = NA, align = "right", by = 4)  # Considering quarterly data
gdp_data$ma15 <- zoo::rollmean(gdp_data$GDP, 15, mean, fill = NA, align = "right", by = 4)
gdp_data$ma20 <- zoo::rollmean(gdp_data$GDP, 20, mean, fill = NA, align = "right", by = 4)
gdp_data$ma30 <- zoo::rollmean(gdp_data$GDP, 30, mean, fill = NA, align = "right", by = 4)
#| code-fold: true
#| code-summary: 'Importing Libraries'
#| warning: false
#| output: true
#Ggplot
p_gdp <- ggplot(gdp_data, aes(x = DATE)) +
geom_line(aes(y = GDP, color = "Actual Data")) +
geom_line(aes(y = ma5, color = "5-MA")) +
geom_line(aes(y = ma15, color = "15-MA")) +
geom_line(aes(y = ma20, color = "20-MA")) +
geom_line(aes(y = ma30, color = "30-MA")) +
xlab("Time") + ylab("GDP (in billions)") +
ggtitle('GDP with Moving Averages') +
theme_bw()
#Convert ggplot object to plotly
plotly::ggplotly(p_gdp)
#| code-fold: true
#| code-summary: 'Importing Libraries'
#| warning: false
#| output: true
# Calculate moving averages with the specified window sizes
cpi_data$ma5 <- zoo::rollmean(cpi_data$CPIAUCSL, 5, fill = NA, align = "right", by.column = FALSE)
cpi_data$ma15 <- zoo::rollmean(cpi_data$CPIAUCSL, 15, fill = NA, align = "right", by.column = FALSE)
cpi_data$ma20 <- zoo::rollmean(cpi_data$CPIAUCSL, 20, fill = NA, align = "right", by.column = FALSE)
cpi_data$ma30 <- zoo::rollmean(cpi_data$CPIAUCSL, 30, fill = NA, align = "right", by.column = FALSE)
#| code-fold: true
#| code-summary: 'Importing Libraries'
#| warning: false
#| output: true
#|
#Ggplot
p_cpi <- ggplot(cpi_data, aes(x = DATE)) +
geom_line(aes(y = CPIAUCSL, color = "Actual Data")) +
geom_line(aes(y = ma5, color = "5-MA")) +
geom_line(aes(y = ma15, color = "15-MA")) +
geom_line(aes(y = ma20, color = "20-MA")) +
geom_line(aes(y = ma30, color = "30-MA")) +
xlab("Time") + ylab("CPIAUCSL") +
ggtitle('CPI with Moving Averages') +
theme_bw()
#Convert ggplot object to plotly
plotly::ggplotly(p_cpi)
#| code-fold: true
#| code-summary: 'Importing Libraries'
#| warning: false
#| output: true
#Ggplot
p <- ggplot(crude_oil_df, aes(x = Date)) +
geom_line(aes(y = Value, color = "Actual Data")) +
geom_line(aes(y = ma5, color = "5-MA")) +
geom_line(aes(y = ma15, color = "15-MA")) +
geom_line(aes(y = ma20, color = "20-MA")) +
geom_line(aes(y = ma30, color = "30-MA")) +
xlab("Time") + ylab("Value (USD)") +
ggtitle('Crude Oil Price with Moving Averages') +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5, face = "bold"))
#Convert ggplot object to plotly
plotly::ggplotly(p)
#| code-fold: true
#| code-summary: 'Importing Libraries'
#| warning: false
#| output: true
#Ggplot
p_ng <- ggplot(natural_gas_df, aes(x = Date)) +
geom_line(aes(y = Value, color = "Actual Data")) +
geom_line(aes(y = ma5, color = "5-MA")) +
geom_line(aes(y = ma15, color = "15-MA")) +
geom_line(aes(y = ma20, color = "20-MA")) +
geom_line(aes(y = ma30, color = "30-MA")) +
xlab("Time") + ylab("Value (Price)") +
ggtitle('Natural Gas Price with Moving Averages') +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5, face = "bold"))
#Convert ggplot object to plotly
plotly::ggplotly(p_ng)
#| code-fold: true
#| code-summary: 'Importing Libraries'
#| warning: false
#| output: true
#Ggplot
p_electricity <- ggplot(total_electricity_prices, aes(x = Date)) +
geom_line(aes(y = Value, color = "Actual Data")) +
geom_line(aes(y = ma5, color = "5-MA")) +
geom_line(aes(y = ma15, color = "15-MA")) +
geom_line(aes(y = ma20, color = "20-MA")) +
geom_line(aes(y = ma30, color = "30-MA")) +
xlab("Time") + ylab("Price (Cents per Kilowatthour)") +
ggtitle('Electricity Price with Moving Averages') +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5, face = "bold"))
#Convert ggplot object to plotly
plotly::ggplotly(p_electricity)
#| code-fold: true
#| code-summary: 'Importing Libraries'
#| warning: false
#| output: true
#Ggplot
p_gdp <- ggplot(gdp_data, aes(x = DATE)) +
geom_line(aes(y = GDP, color = "Actual Data")) +
geom_line(aes(y = ma5, color = "5-MA")) +
geom_line(aes(y = ma15, color = "15-MA")) +
geom_line(aes(y = ma20, color = "20-MA")) +
geom_line(aes(y = ma30, color = "30-MA")) +
xlab("Time") + ylab("GDP (in billions)") +
ggtitle('GDP with Moving Averages') +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5, face = "bold"))
#Convert ggplot object to plotly
plotly::ggplotly(p_gdp)
#| code-fold: true
#| code-summary: 'Importing Libraries'
#| warning: false
#| output: true
#|
#Ggplot
p_cpi <- ggplot(cpi_data, aes(x = DATE)) +
geom_line(aes(y = CPIAUCSL, color = "Actual Data")) +
geom_line(aes(y = ma5, color = "5-MA")) +
geom_line(aes(y = ma15, color = "15-MA")) +
geom_line(aes(y = ma20, color = "20-MA")) +
geom_line(aes(y = ma30, color = "30-MA")) +
xlab("Time") + ylab("CPIAUCSL") +
ggtitle('CPI with Moving Averages') +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5, face = "bold"))
#Convert ggplot object to plotly
plotly::ggplotly(p_cpi)
#| code-fold: true
#| code-summary: 'D-F Test'
#| warning: false
#| output: true
# Dickey-Fuller Test for GDP
adf_test_gdp <- tseries::adf.test(gdp_ts)
# Display the test results
adf_test_gdp
#| code-fold: true
#| code-summary: 'D-F Test'
#| warning: false
#| output: true
# Dickey-Fuller Test for GDP
suppressWarnings(adf_test_gdp <- tseries::adf.test(gdp_ts))
# Display the test results
adf_test_gdp
